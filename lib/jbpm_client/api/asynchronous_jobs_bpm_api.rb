=begin
#jbpm

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 7.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1

=end

require "uri"

module JBPMAPIClient
  class AsynchronousJobsBPMApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Cancels active asynchronous job identified by given jobId
    # 
    # @param job_id identifier of the asynchronous job to be canceled
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def cancel_request(job_id, opts = {})
      cancel_request_with_http_info(job_id, opts)
      return nil
    end

    # Cancels active asynchronous job identified by given jobId
    # 
    # @param job_id identifier of the asynchronous job to be canceled
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def cancel_request_with_http_info(job_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AsynchronousJobsBPMApi.cancel_request ..."
      end
      # verify the required parameter 'job_id' is set
      if @api_client.config.client_side_validation && job_id.nil?
        fail ArgumentError, "Missing the required parameter 'job_id' when calling AsynchronousJobsBPMApi.cancel_request"
      end
      # resource path
      local_var_path = "/server/jobs/{jobId}".sub('{' + 'jobId' + '}', job_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AsynchronousJobsBPMApi#cancel_request\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves asynchronous job by given jobId
    # 
    # @param job_id identifier of the asynchronous job to be retrieved
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :with_errors optional flag that indicats if errors should be loaded as well
    # @option opts [BOOLEAN] :with_data optional flag that indicats if input/output data should be loaded as well
    # @return [RequestInfoInstance]
    def get_request_by_id(job_id, opts = {})
      data, _status_code, _headers = get_request_by_id_with_http_info(job_id, opts)
      return data
    end

    # Retrieves asynchronous job by given jobId
    # 
    # @param job_id identifier of the asynchronous job to be retrieved
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :with_errors optional flag that indicats if errors should be loaded as well
    # @option opts [BOOLEAN] :with_data optional flag that indicats if input/output data should be loaded as well
    # @return [Array<(RequestInfoInstance, Fixnum, Hash)>] RequestInfoInstance data, response status code and response headers
    def get_request_by_id_with_http_info(job_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AsynchronousJobsBPMApi.get_request_by_id ..."
      end
      # verify the required parameter 'job_id' is set
      if @api_client.config.client_side_validation && job_id.nil?
        fail ArgumentError, "Missing the required parameter 'job_id' when calling AsynchronousJobsBPMApi.get_request_by_id"
      end
      # resource path
      local_var_path = "/server/jobs/{jobId}".sub('{' + 'jobId' + '}', job_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'withErrors'] = opts[:'with_errors'] if !opts[:'with_errors'].nil?
      query_params[:'withData'] = opts[:'with_data'] if !opts[:'with_data'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RequestInfoInstance')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AsynchronousJobsBPMApi#get_request_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves asynchronous jobs by business key
    # 
    # @param key identifier of the business key that asynchornous jobs should be found for
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :status optional job status (QUEUED, DONE, CANCELLED, ERROR, RETRYING, RUNNING)
    # @option opts [Integer] :page optional pagination - at which page to start, defaults to 0 (meaning first) (default to 0)
    # @option opts [Integer] :page_size optional pagination - size of the result, defaults to 10 (default to 10)
    # @return [RequestInfoInstanceList]
    def get_requests_by_business_key(key, opts = {})
      data, _status_code, _headers = get_requests_by_business_key_with_http_info(key, opts)
      return data
    end

    # Retrieves asynchronous jobs by business key
    # 
    # @param key identifier of the business key that asynchornous jobs should be found for
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :status optional job status (QUEUED, DONE, CANCELLED, ERROR, RETRYING, RUNNING)
    # @option opts [Integer] :page optional pagination - at which page to start, defaults to 0 (meaning first)
    # @option opts [Integer] :page_size optional pagination - size of the result, defaults to 10
    # @return [Array<(RequestInfoInstanceList, Fixnum, Hash)>] RequestInfoInstanceList data, response status code and response headers
    def get_requests_by_business_key_with_http_info(key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AsynchronousJobsBPMApi.get_requests_by_business_key ..."
      end
      # verify the required parameter 'key' is set
      if @api_client.config.client_side_validation && key.nil?
        fail ArgumentError, "Missing the required parameter 'key' when calling AsynchronousJobsBPMApi.get_requests_by_business_key"
      end
      if @api_client.config.client_side_validation && opts[:'status'] && !opts[:'status'].all?{|item| ['QUEUED', 'DONE', 'CANCELLED', 'ERROR', 'RETRYING', 'RUNNING'].include?(item)}
        fail ArgumentError, 'invalid value for "status", must include one of QUEUED, DONE, CANCELLED, ERROR, RETRYING, RUNNING'
      end
      # resource path
      local_var_path = "/server/jobs/keys/{key}".sub('{' + 'key' + '}', key.to_s)

      # query parameters
      query_params = {}
      query_params[:'status'] = @api_client.build_collection_param(opts[:'status'], :multi) if !opts[:'status'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'pageSize'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RequestInfoInstanceList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AsynchronousJobsBPMApi#get_requests_by_business_key\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves asynchronous jobs by command
    # 
    # @param cmd name of the command that asynchornous jobs should be found for
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :status optional job status (QUEUED, DONE, CANCELLED, ERROR, RETRYING, RUNNING)
    # @option opts [Integer] :page optional pagination - at which page to start, defaults to 0 (meaning first) (default to 0)
    # @option opts [Integer] :page_size optional pagination - size of the result, defaults to 10 (default to 10)
    # @return [RequestInfoInstanceList]
    def get_requests_by_command(cmd, opts = {})
      data, _status_code, _headers = get_requests_by_command_with_http_info(cmd, opts)
      return data
    end

    # Retrieves asynchronous jobs by command
    # 
    # @param cmd name of the command that asynchornous jobs should be found for
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :status optional job status (QUEUED, DONE, CANCELLED, ERROR, RETRYING, RUNNING)
    # @option opts [Integer] :page optional pagination - at which page to start, defaults to 0 (meaning first)
    # @option opts [Integer] :page_size optional pagination - size of the result, defaults to 10
    # @return [Array<(RequestInfoInstanceList, Fixnum, Hash)>] RequestInfoInstanceList data, response status code and response headers
    def get_requests_by_command_with_http_info(cmd, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AsynchronousJobsBPMApi.get_requests_by_command ..."
      end
      # verify the required parameter 'cmd' is set
      if @api_client.config.client_side_validation && cmd.nil?
        fail ArgumentError, "Missing the required parameter 'cmd' when calling AsynchronousJobsBPMApi.get_requests_by_command"
      end
      if @api_client.config.client_side_validation && opts[:'status'] && !opts[:'status'].all?{|item| ['QUEUED', 'DONE', 'CANCELLED', 'ERROR', 'RETRYING', 'RUNNING'].include?(item)}
        fail ArgumentError, 'invalid value for "status", must include one of QUEUED, DONE, CANCELLED, ERROR, RETRYING, RUNNING'
      end
      # resource path
      local_var_path = "/server/jobs/commands/{cmd}".sub('{' + 'cmd' + '}', cmd.to_s)

      # query parameters
      query_params = {}
      query_params[:'status'] = @api_client.build_collection_param(opts[:'status'], :multi) if !opts[:'status'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'pageSize'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RequestInfoInstanceList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AsynchronousJobsBPMApi#get_requests_by_command\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves asynchronous jobs by container
    # 
    # @param id identifier of the container that asynchornous jobs should be found for
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :status optional job status (QUEUED, DONE, CANCELLED, ERROR, RETRYING, RUNNING)
    # @option opts [Integer] :page optional pagination - at which page to start, defaults to 0 (meaning first) (default to 0)
    # @option opts [Integer] :page_size optional pagination - size of the result, defaults to 10 (default to 10)
    # @return [RequestInfoInstanceList]
    def get_requests_by_container(id, opts = {})
      data, _status_code, _headers = get_requests_by_container_with_http_info(id, opts)
      return data
    end

    # Retrieves asynchronous jobs by container
    # 
    # @param id identifier of the container that asynchornous jobs should be found for
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :status optional job status (QUEUED, DONE, CANCELLED, ERROR, RETRYING, RUNNING)
    # @option opts [Integer] :page optional pagination - at which page to start, defaults to 0 (meaning first)
    # @option opts [Integer] :page_size optional pagination - size of the result, defaults to 10
    # @return [Array<(RequestInfoInstanceList, Fixnum, Hash)>] RequestInfoInstanceList data, response status code and response headers
    def get_requests_by_container_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AsynchronousJobsBPMApi.get_requests_by_container ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AsynchronousJobsBPMApi.get_requests_by_container"
      end
      if @api_client.config.client_side_validation && opts[:'status'] && !opts[:'status'].all?{|item| ['QUEUED', 'DONE', 'CANCELLED', 'ERROR', 'RETRYING', 'RUNNING'].include?(item)}
        fail ArgumentError, 'invalid value for "status", must include one of QUEUED, DONE, CANCELLED, ERROR, RETRYING, RUNNING'
      end
      # resource path
      local_var_path = "/server/jobs/containers/{id}".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'status'] = @api_client.build_collection_param(opts[:'status'], :multi) if !opts[:'status'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'pageSize'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RequestInfoInstanceList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AsynchronousJobsBPMApi#get_requests_by_container\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves asynchronous jobs by process instance id
    # 
    # @param p_instance_id identifier of the process instance that asynchornous jobs should be found for
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :status optional job status (QUEUED, DONE, CANCELLED, ERROR, RETRYING, RUNNING)
    # @option opts [Integer] :page optional pagination - at which page to start, defaults to 0 (meaning first) (default to 0)
    # @option opts [Integer] :page_size optional pagination - size of the result, defaults to 10 (default to 10)
    # @return [RequestInfoInstanceList]
    def get_requests_by_process_instance(p_instance_id, opts = {})
      data, _status_code, _headers = get_requests_by_process_instance_with_http_info(p_instance_id, opts)
      return data
    end

    # Retrieves asynchronous jobs by process instance id
    # 
    # @param p_instance_id identifier of the process instance that asynchornous jobs should be found for
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :status optional job status (QUEUED, DONE, CANCELLED, ERROR, RETRYING, RUNNING)
    # @option opts [Integer] :page optional pagination - at which page to start, defaults to 0 (meaning first)
    # @option opts [Integer] :page_size optional pagination - size of the result, defaults to 10
    # @return [Array<(RequestInfoInstanceList, Fixnum, Hash)>] RequestInfoInstanceList data, response status code and response headers
    def get_requests_by_process_instance_with_http_info(p_instance_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AsynchronousJobsBPMApi.get_requests_by_process_instance ..."
      end
      # verify the required parameter 'p_instance_id' is set
      if @api_client.config.client_side_validation && p_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'p_instance_id' when calling AsynchronousJobsBPMApi.get_requests_by_process_instance"
      end
      if @api_client.config.client_side_validation && opts[:'status'] && !opts[:'status'].all?{|item| ['QUEUED', 'DONE', 'CANCELLED', 'ERROR', 'RETRYING', 'RUNNING'].include?(item)}
        fail ArgumentError, 'invalid value for "status", must include one of QUEUED, DONE, CANCELLED, ERROR, RETRYING, RUNNING'
      end
      # resource path
      local_var_path = "/server/jobs/processes/instances/{pInstanceId}".sub('{' + 'pInstanceId' + '}', p_instance_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'status'] = @api_client.build_collection_param(opts[:'status'], :multi) if !opts[:'status'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'pageSize'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['jbpm_auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RequestInfoInstanceList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AsynchronousJobsBPMApi#get_requests_by_process_instance\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves asynchronous jobs filtered by status
    # 
    # @param status optional job status (QUEUED, DONE, CANCELLED, ERROR, RETRYING, RUNNING)
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page optional pagination - at which page to start, defaults to 0 (meaning first) (default to 0)
    # @option opts [Integer] :page_size optional pagination - size of the result, defaults to 10 (default to 10)
    # @return [RequestInfoInstanceList]
    def get_requests_by_status(status, opts = {})
      data, _status_code, _headers = get_requests_by_status_with_http_info(status, opts)
      return data
    end

    # Retrieves asynchronous jobs filtered by status
    # 
    # @param status optional job status (QUEUED, DONE, CANCELLED, ERROR, RETRYING, RUNNING)
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page optional pagination - at which page to start, defaults to 0 (meaning first)
    # @option opts [Integer] :page_size optional pagination - size of the result, defaults to 10
    # @return [Array<(RequestInfoInstanceList, Fixnum, Hash)>] RequestInfoInstanceList data, response status code and response headers
    def get_requests_by_status_with_http_info(status, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AsynchronousJobsBPMApi.get_requests_by_status ..."
      end
      # verify the required parameter 'status' is set
      if @api_client.config.client_side_validation && status.nil?
        fail ArgumentError, "Missing the required parameter 'status' when calling AsynchronousJobsBPMApi.get_requests_by_status"
      end
      # resource path
      local_var_path = "/server/jobs"

      # query parameters
      query_params = {}
      query_params[:'status'] = @api_client.build_collection_param(status, :multi)
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'pageSize'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RequestInfoInstanceList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AsynchronousJobsBPMApi#get_requests_by_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Requeues failed asynchronous job identified by given jobId
    # 
    # @param job_id identifier of the asynchronous job to be requeued
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def requeue_request(job_id, opts = {})
      requeue_request_with_http_info(job_id, opts)
      return nil
    end

    # Requeues failed asynchronous job identified by given jobId
    # 
    # @param job_id identifier of the asynchronous job to be requeued
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def requeue_request_with_http_info(job_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AsynchronousJobsBPMApi.requeue_request ..."
      end
      # verify the required parameter 'job_id' is set
      if @api_client.config.client_side_validation && job_id.nil?
        fail ArgumentError, "Missing the required parameter 'job_id' when calling AsynchronousJobsBPMApi.requeue_request"
      end
      # resource path
      local_var_path = "/server/jobs/{jobId}".sub('{' + 'jobId' + '}', job_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml', 'application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/xml', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AsynchronousJobsBPMApi#requeue_request\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Schedules new asynchronous job based on given body
    # 
    # @param body asynchronous job definition represented as JobRequestInstance
    # @param [Hash] opts the optional parameters
    # @option opts [String] :container_id optional container id that the job should be associated with
    # @return [Integer]
    def schedule_request(body, opts = {})
      data, _status_code, _headers = schedule_request_with_http_info(body, opts)
      return data
    end

    # Schedules new asynchronous job based on given body
    # 
    # @param body asynchronous job definition represented as JobRequestInstance
    # @param [Hash] opts the optional parameters
    # @option opts [String] :container_id optional container id that the job should be associated with
    # @return [Array<(Integer, Fixnum, Hash)>] Integer data, response status code and response headers
    def schedule_request_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AsynchronousJobsBPMApi.schedule_request ..."
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling AsynchronousJobsBPMApi.schedule_request"
      end
      # resource path
      local_var_path = "/server/jobs"

      # query parameters
      query_params = {}
      query_params[:'containerId'] = opts[:'container_id'] if !opts[:'container_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml', 'application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/xml', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Integer')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AsynchronousJobsBPMApi#schedule_request\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Updates active asynchronous job's data (identified by given jobId)
    # 
    # @param job_id identifier of the asynchronous job to be updated
    # @param body data to be updated on the asynchronous job represented as Map
    # @param [Hash] opts the optional parameters
    # @option opts [String] :container_id optional container id that the job should be associated with
    # @return [nil]
    def update_request_data(job_id, body, opts = {})
      update_request_data_with_http_info(job_id, body, opts)
      return nil
    end

    # Updates active asynchronous job&#39;s data (identified by given jobId)
    # 
    # @param job_id identifier of the asynchronous job to be updated
    # @param body data to be updated on the asynchronous job represented as Map
    # @param [Hash] opts the optional parameters
    # @option opts [String] :container_id optional container id that the job should be associated with
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def update_request_data_with_http_info(job_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AsynchronousJobsBPMApi.update_request_data ..."
      end
      # verify the required parameter 'job_id' is set
      if @api_client.config.client_side_validation && job_id.nil?
        fail ArgumentError, "Missing the required parameter 'job_id' when calling AsynchronousJobsBPMApi.update_request_data"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling AsynchronousJobsBPMApi.update_request_data"
      end
      # resource path
      local_var_path = "/server/jobs/{jobId}/data".sub('{' + 'jobId' + '}', job_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'containerId'] = opts[:'container_id'] if !opts[:'container_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AsynchronousJobsBPMApi#update_request_data\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end

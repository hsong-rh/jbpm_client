=begin
#jbpm

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 7.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1

=end

require "uri"

module JBPMAPIClient
  class UserTaskOperationsAndQueriesBPMApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Activates task with given id that belongs to given container
    # 
    # @param id container id that task instance belongs to
    # @param t_instance_id identifier of the task instance that should be activated
    # @param [Hash] opts the optional parameters
    # @option opts [String] :user optional user id to be used instead of authenticated user - only when bypass authenticated user is enabled
    # @return [nil]
    def activate(id, t_instance_id, opts = {})
      activate_with_http_info(id, t_instance_id, opts)
      return nil
    end

    # Activates task with given id that belongs to given container
    # 
    # @param id container id that task instance belongs to
    # @param t_instance_id identifier of the task instance that should be activated
    # @param [Hash] opts the optional parameters
    # @option opts [String] :user optional user id to be used instead of authenticated user - only when bypass authenticated user is enabled
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def activate_with_http_info(id, t_instance_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UserTaskOperationsAndQueriesBPMApi.activate ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UserTaskOperationsAndQueriesBPMApi.activate"
      end
      # verify the required parameter 't_instance_id' is set
      if @api_client.config.client_side_validation && t_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 't_instance_id' when calling UserTaskOperationsAndQueriesBPMApi.activate"
      end
      # resource path
      local_var_path = "/server/containers/{id}/tasks/{tInstanceId}/states/activated".sub('{' + 'id' + '}', id.to_s).sub('{' + 'tInstanceId' + '}', t_instance_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'user'] = opts[:'user'] if !opts[:'user'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserTaskOperationsAndQueriesBPMApi#activate\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Adds attachment to task with given id that belongs to given container
    # 
    # @param id container id that task instance belongs to
    # @param t_instance_id identifier of the task instance that attachment should be added to
    # @param name name of the attachment to be added
    # @param body attachment content, any type can be provided
    # @param [Hash] opts the optional parameters
    # @option opts [String] :user optional user id to be used instead of authenticated user - only when bypass authenticated user is enabled
    # @return [Integer]
    def add_attachment(id, t_instance_id, name, body, opts = {})
      data, _status_code, _headers = add_attachment_with_http_info(id, t_instance_id, name, body, opts)
      return data
    end

    # Adds attachment to task with given id that belongs to given container
    # 
    # @param id container id that task instance belongs to
    # @param t_instance_id identifier of the task instance that attachment should be added to
    # @param name name of the attachment to be added
    # @param body attachment content, any type can be provided
    # @param [Hash] opts the optional parameters
    # @option opts [String] :user optional user id to be used instead of authenticated user - only when bypass authenticated user is enabled
    # @return [Array<(Integer, Fixnum, Hash)>] Integer data, response status code and response headers
    def add_attachment_with_http_info(id, t_instance_id, name, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UserTaskOperationsAndQueriesBPMApi.add_attachment ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UserTaskOperationsAndQueriesBPMApi.add_attachment"
      end
      # verify the required parameter 't_instance_id' is set
      if @api_client.config.client_side_validation && t_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 't_instance_id' when calling UserTaskOperationsAndQueriesBPMApi.add_attachment"
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling UserTaskOperationsAndQueriesBPMApi.add_attachment"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling UserTaskOperationsAndQueriesBPMApi.add_attachment"
      end
      # resource path
      local_var_path = "/server/containers/{id}/tasks/{tInstanceId}/attachments".sub('{' + 'id' + '}', id.to_s).sub('{' + 'tInstanceId' + '}', t_instance_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'name'] = name
      query_params[:'user'] = opts[:'user'] if !opts[:'user'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Integer')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserTaskOperationsAndQueriesBPMApi#add_attachment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Adds comment to task with given id that belongs to given container
    # 
    # @param id container id that task instance belongs to
    # @param t_instance_id identifier of the task instance that comment should be added to
    # @param body comment data as TaskComment
    # @param [Hash] opts the optional parameters
    # @return [Integer]
    def add_comment_by_instance_id(id, t_instance_id, body, opts = {})
      data, _status_code, _headers = add_comment_by_instance_id_with_http_info(id, t_instance_id, body, opts)
      return data
    end

    # Adds comment to task with given id that belongs to given container
    # 
    # @param id container id that task instance belongs to
    # @param t_instance_id identifier of the task instance that comment should be added to
    # @param body comment data as TaskComment
    # @param [Hash] opts the optional parameters
    # @return [Array<(Integer, Fixnum, Hash)>] Integer data, response status code and response headers
    def add_comment_by_instance_id_with_http_info(id, t_instance_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UserTaskOperationsAndQueriesBPMApi.add_comment_by_instance_id ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UserTaskOperationsAndQueriesBPMApi.add_comment_by_instance_id"
      end
      # verify the required parameter 't_instance_id' is set
      if @api_client.config.client_side_validation && t_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 't_instance_id' when calling UserTaskOperationsAndQueriesBPMApi.add_comment_by_instance_id"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling UserTaskOperationsAndQueriesBPMApi.add_comment_by_instance_id"
      end
      # resource path
      local_var_path = "/server/containers/{id}/tasks/{tInstanceId}/comments".sub('{' + 'id' + '}', id.to_s).sub('{' + 'tInstanceId' + '}', t_instance_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Integer')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserTaskOperationsAndQueriesBPMApi#add_comment_by_instance_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Claims task with given id that belongs to given container
    # 
    # @param id container id that task instance belongs to
    # @param t_instance_id identifier of the task instance that should be claimed
    # @param [Hash] opts the optional parameters
    # @option opts [String] :user optional user id to be used instead of authenticated user - only when bypass authenticated user is enabled
    # @return [nil]
    def claim(id, t_instance_id, opts = {})
      claim_with_http_info(id, t_instance_id, opts)
      return nil
    end

    # Claims task with given id that belongs to given container
    # 
    # @param id container id that task instance belongs to
    # @param t_instance_id identifier of the task instance that should be claimed
    # @param [Hash] opts the optional parameters
    # @option opts [String] :user optional user id to be used instead of authenticated user - only when bypass authenticated user is enabled
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def claim_with_http_info(id, t_instance_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UserTaskOperationsAndQueriesBPMApi.claim ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UserTaskOperationsAndQueriesBPMApi.claim"
      end
      # verify the required parameter 't_instance_id' is set
      if @api_client.config.client_side_validation && t_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 't_instance_id' when calling UserTaskOperationsAndQueriesBPMApi.claim"
      end
      # resource path
      local_var_path = "/server/containers/{id}/tasks/{tInstanceId}/states/claimed".sub('{' + 'id' + '}', id.to_s).sub('{' + 'tInstanceId' + '}', t_instance_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'user'] = opts[:'user'] if !opts[:'user'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserTaskOperationsAndQueriesBPMApi#claim\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Completes task with given id that belongs to given container, optionally it can claim and start task when auto-progress is used
    # 
    # @param id container id that task instance belongs to
    # @param t_instance_id identifier of the task instance that should be completed
    # @param [Hash] opts the optional parameters
    # @option opts [String] :user optional user id to be used instead of authenticated user - only when bypass authenticated user is enabled
    # @option opts [BOOLEAN] :auto_progress optional flag that allows to directlu claim and start task (if needed) before completion
    # @option opts [String] :body optional map of output variables
    # @return [nil]
    def complete(id, t_instance_id, opts = {})
      complete_with_http_info(id, t_instance_id, opts)
      return nil
    end

    # Completes task with given id that belongs to given container, optionally it can claim and start task when auto-progress is used
    # 
    # @param id container id that task instance belongs to
    # @param t_instance_id identifier of the task instance that should be completed
    # @param [Hash] opts the optional parameters
    # @option opts [String] :user optional user id to be used instead of authenticated user - only when bypass authenticated user is enabled
    # @option opts [BOOLEAN] :auto_progress optional flag that allows to directlu claim and start task (if needed) before completion
    # @option opts [String] :body optional map of output variables
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def complete_with_http_info(id, t_instance_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UserTaskOperationsAndQueriesBPMApi.complete ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UserTaskOperationsAndQueriesBPMApi.complete"
      end
      # verify the required parameter 't_instance_id' is set
      if @api_client.config.client_side_validation && t_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 't_instance_id' when calling UserTaskOperationsAndQueriesBPMApi.complete"
      end
      # resource path
      local_var_path = "/server/containers/{id}/tasks/{tInstanceId}/states/completed".sub('{' + 'id' + '}', id.to_s).sub('{' + 'tInstanceId' + '}', t_instance_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'user'] = opts[:'user'] if !opts[:'user'].nil?
      query_params[:'auto-progress'] = opts[:'auto_progress'] if !opts[:'auto_progress'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserTaskOperationsAndQueriesBPMApi#complete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delegates task with given id that belongs to given container
    # 
    # @param id container id that task instance belongs to
    # @param t_instance_id identifier of the task instance that should be delegated
    # @param target_user user that task should be dalegated to
    # @param [Hash] opts the optional parameters
    # @option opts [String] :user optional user id to be used instead of authenticated user - only when bypass authenticated user is enabled
    # @return [nil]
    def delegate(id, t_instance_id, target_user, opts = {})
      delegate_with_http_info(id, t_instance_id, target_user, opts)
      return nil
    end

    # Delegates task with given id that belongs to given container
    # 
    # @param id container id that task instance belongs to
    # @param t_instance_id identifier of the task instance that should be delegated
    # @param target_user user that task should be dalegated to
    # @param [Hash] opts the optional parameters
    # @option opts [String] :user optional user id to be used instead of authenticated user - only when bypass authenticated user is enabled
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delegate_with_http_info(id, t_instance_id, target_user, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UserTaskOperationsAndQueriesBPMApi.delegate ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UserTaskOperationsAndQueriesBPMApi.delegate"
      end
      # verify the required parameter 't_instance_id' is set
      if @api_client.config.client_side_validation && t_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 't_instance_id' when calling UserTaskOperationsAndQueriesBPMApi.delegate"
      end
      # verify the required parameter 'target_user' is set
      if @api_client.config.client_side_validation && target_user.nil?
        fail ArgumentError, "Missing the required parameter 'target_user' when calling UserTaskOperationsAndQueriesBPMApi.delegate"
      end
      # resource path
      local_var_path = "/server/containers/{id}/tasks/{tInstanceId}/states/delegated".sub('{' + 'id' + '}', id.to_s).sub('{' + 'tInstanceId' + '}', t_instance_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'targetUser'] = target_user
      query_params[:'user'] = opts[:'user'] if !opts[:'user'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserTaskOperationsAndQueriesBPMApi#delegate\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Deletes attachment from task with given id that belongs to given container
    # 
    # @param id container id that task instance belongs to
    # @param t_instance_id identifier of the task instance that attachment belongs to
    # @param attachment_id identifier of the attachment to be deleted
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_attachment(id, t_instance_id, attachment_id, opts = {})
      delete_attachment_with_http_info(id, t_instance_id, attachment_id, opts)
      return nil
    end

    # Deletes attachment from task with given id that belongs to given container
    # 
    # @param id container id that task instance belongs to
    # @param t_instance_id identifier of the task instance that attachment belongs to
    # @param attachment_id identifier of the attachment to be deleted
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_attachment_with_http_info(id, t_instance_id, attachment_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UserTaskOperationsAndQueriesBPMApi.delete_attachment ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UserTaskOperationsAndQueriesBPMApi.delete_attachment"
      end
      # verify the required parameter 't_instance_id' is set
      if @api_client.config.client_side_validation && t_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 't_instance_id' when calling UserTaskOperationsAndQueriesBPMApi.delete_attachment"
      end
      # verify the required parameter 'attachment_id' is set
      if @api_client.config.client_side_validation && attachment_id.nil?
        fail ArgumentError, "Missing the required parameter 'attachment_id' when calling UserTaskOperationsAndQueriesBPMApi.delete_attachment"
      end
      # resource path
      local_var_path = "/server/containers/{id}/tasks/{tInstanceId}/attachments/{attachmentId}".sub('{' + 'id' + '}', id.to_s).sub('{' + 'tInstanceId' + '}', t_instance_id.to_s).sub('{' + 'attachmentId' + '}', attachment_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserTaskOperationsAndQueriesBPMApi#delete_attachment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Deletes comment from task with given id that belongs to given container
    # 
    # @param id container id that task instance belongs to
    # @param t_instance_id identifier of the task instance that comment belongs to
    # @param comment_id identifier of the comment to be deleted
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_comment(id, t_instance_id, comment_id, opts = {})
      delete_comment_with_http_info(id, t_instance_id, comment_id, opts)
      return nil
    end

    # Deletes comment from task with given id that belongs to given container
    # 
    # @param id container id that task instance belongs to
    # @param t_instance_id identifier of the task instance that comment belongs to
    # @param comment_id identifier of the comment to be deleted
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_comment_with_http_info(id, t_instance_id, comment_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UserTaskOperationsAndQueriesBPMApi.delete_comment ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UserTaskOperationsAndQueriesBPMApi.delete_comment"
      end
      # verify the required parameter 't_instance_id' is set
      if @api_client.config.client_side_validation && t_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 't_instance_id' when calling UserTaskOperationsAndQueriesBPMApi.delete_comment"
      end
      # verify the required parameter 'comment_id' is set
      if @api_client.config.client_side_validation && comment_id.nil?
        fail ArgumentError, "Missing the required parameter 'comment_id' when calling UserTaskOperationsAndQueriesBPMApi.delete_comment"
      end
      # resource path
      local_var_path = "/server/containers/{id}/tasks/{tInstanceId}/comments/{commentId}".sub('{' + 'id' + '}', id.to_s).sub('{' + 'tInstanceId' + '}', t_instance_id.to_s).sub('{' + 'commentId' + '}', comment_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserTaskOperationsAndQueriesBPMApi#delete_comment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Deletes content from task with given id that belongs to given container
    # 
    # @param id container id that task instance belongs to
    # @param t_instance_id identifier of the task instance that content belongs to
    # @param content_id identifier of the content to be deleted
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_content(id, t_instance_id, content_id, opts = {})
      delete_content_with_http_info(id, t_instance_id, content_id, opts)
      return nil
    end

    # Deletes content from task with given id that belongs to given container
    # 
    # @param id container id that task instance belongs to
    # @param t_instance_id identifier of the task instance that content belongs to
    # @param content_id identifier of the content to be deleted
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_content_with_http_info(id, t_instance_id, content_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UserTaskOperationsAndQueriesBPMApi.delete_content ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UserTaskOperationsAndQueriesBPMApi.delete_content"
      end
      # verify the required parameter 't_instance_id' is set
      if @api_client.config.client_side_validation && t_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 't_instance_id' when calling UserTaskOperationsAndQueriesBPMApi.delete_content"
      end
      # verify the required parameter 'content_id' is set
      if @api_client.config.client_side_validation && content_id.nil?
        fail ArgumentError, "Missing the required parameter 'content_id' when calling UserTaskOperationsAndQueriesBPMApi.delete_content"
      end
      # resource path
      local_var_path = "/server/containers/{id}/tasks/{tInstanceId}/contents/{contentId}".sub('{' + 'id' + '}', id.to_s).sub('{' + 'tInstanceId' + '}', t_instance_id.to_s).sub('{' + 'contentId' + '}', content_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserTaskOperationsAndQueriesBPMApi#delete_content\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Exists task with given id that belongs to given container
    # 
    # @param id container id that task instance belongs to
    # @param t_instance_id identifier of the task instance that should be exited
    # @param [Hash] opts the optional parameters
    # @option opts [String] :user optional user id to be used instead of authenticated user - only when bypass authenticated user is enabled
    # @return [nil]
    def exit(id, t_instance_id, opts = {})
      exit_with_http_info(id, t_instance_id, opts)
      return nil
    end

    # Exists task with given id that belongs to given container
    # 
    # @param id container id that task instance belongs to
    # @param t_instance_id identifier of the task instance that should be exited
    # @param [Hash] opts the optional parameters
    # @option opts [String] :user optional user id to be used instead of authenticated user - only when bypass authenticated user is enabled
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def exit_with_http_info(id, t_instance_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UserTaskOperationsAndQueriesBPMApi.exit ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UserTaskOperationsAndQueriesBPMApi.exit"
      end
      # verify the required parameter 't_instance_id' is set
      if @api_client.config.client_side_validation && t_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 't_instance_id' when calling UserTaskOperationsAndQueriesBPMApi.exit"
      end
      # resource path
      local_var_path = "/server/containers/{id}/tasks/{tInstanceId}/states/exited".sub('{' + 'id' + '}', id.to_s).sub('{' + 'tInstanceId' + '}', t_instance_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'user'] = opts[:'user'] if !opts[:'user'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserTaskOperationsAndQueriesBPMApi#exit\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Fails task with given id that belongs to given container
    # 
    # @param id container id that task instance belongs to
    # @param t_instance_id identifier of the task instance that should be failed
    # @param [Hash] opts the optional parameters
    # @option opts [String] :user optional user id to be used instead of authenticated user - only when bypass authenticated user is enabled
    # @option opts [String] :body optional map of output variables
    # @return [nil]
    def fail(id, t_instance_id, opts = {})
      fail_with_http_info(id, t_instance_id, opts)
      return nil
    end

    # Fails task with given id that belongs to given container
    # 
    # @param id container id that task instance belongs to
    # @param t_instance_id identifier of the task instance that should be failed
    # @param [Hash] opts the optional parameters
    # @option opts [String] :user optional user id to be used instead of authenticated user - only when bypass authenticated user is enabled
    # @option opts [String] :body optional map of output variables
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def fail_with_http_info(id, t_instance_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UserTaskOperationsAndQueriesBPMApi.fail ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UserTaskOperationsAndQueriesBPMApi.fail"
      end
      # verify the required parameter 't_instance_id' is set
      if @api_client.config.client_side_validation && t_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 't_instance_id' when calling UserTaskOperationsAndQueriesBPMApi.fail"
      end
      # resource path
      local_var_path = "/server/containers/{id}/tasks/{tInstanceId}/states/failed".sub('{' + 'id' + '}', id.to_s).sub('{' + 'tInstanceId' + '}', t_instance_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'user'] = opts[:'user'] if !opts[:'user'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserTaskOperationsAndQueriesBPMApi#fail\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Forwards task with given id that belongs to given container
    # 
    # @param id container id that task instance belongs to
    # @param t_instance_id identifier of the task instance that should be forwarded
    # @param target_user user that the task should be forwarded to
    # @param [Hash] opts the optional parameters
    # @option opts [String] :user optional user id to be used instead of authenticated user - only when bypass authenticated user is enabled
    # @return [nil]
    def forward(id, t_instance_id, target_user, opts = {})
      forward_with_http_info(id, t_instance_id, target_user, opts)
      return nil
    end

    # Forwards task with given id that belongs to given container
    # 
    # @param id container id that task instance belongs to
    # @param t_instance_id identifier of the task instance that should be forwarded
    # @param target_user user that the task should be forwarded to
    # @param [Hash] opts the optional parameters
    # @option opts [String] :user optional user id to be used instead of authenticated user - only when bypass authenticated user is enabled
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def forward_with_http_info(id, t_instance_id, target_user, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UserTaskOperationsAndQueriesBPMApi.forward ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UserTaskOperationsAndQueriesBPMApi.forward"
      end
      # verify the required parameter 't_instance_id' is set
      if @api_client.config.client_side_validation && t_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 't_instance_id' when calling UserTaskOperationsAndQueriesBPMApi.forward"
      end
      # verify the required parameter 'target_user' is set
      if @api_client.config.client_side_validation && target_user.nil?
        fail ArgumentError, "Missing the required parameter 'target_user' when calling UserTaskOperationsAndQueriesBPMApi.forward"
      end
      # resource path
      local_var_path = "/server/containers/{id}/tasks/{tInstanceId}/states/forwarded".sub('{' + 'id' + '}', id.to_s).sub('{' + 'tInstanceId' + '}', t_instance_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'targetUser'] = target_user
      query_params[:'user'] = opts[:'user'] if !opts[:'user'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserTaskOperationsAndQueriesBPMApi#forward\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves attachment with given id from task with given id that belongs to given container
    # 
    # @param id container id that task instance belongs to
    # @param t_instance_id identifier of the task instance that attachment belongs to
    # @param attachment_id identifier of the attachment to be loaded
    # @param [Hash] opts the optional parameters
    # @return [TaskAttachment]
    def get_attachment_by_id(id, t_instance_id, attachment_id, opts = {})
      data, _status_code, _headers = get_attachment_by_id_with_http_info(id, t_instance_id, attachment_id, opts)
      return data
    end

    # Retrieves attachment with given id from task with given id that belongs to given container
    # 
    # @param id container id that task instance belongs to
    # @param t_instance_id identifier of the task instance that attachment belongs to
    # @param attachment_id identifier of the attachment to be loaded
    # @param [Hash] opts the optional parameters
    # @return [Array<(TaskAttachment, Fixnum, Hash)>] TaskAttachment data, response status code and response headers
    def get_attachment_by_id_with_http_info(id, t_instance_id, attachment_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UserTaskOperationsAndQueriesBPMApi.get_attachment_by_id ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UserTaskOperationsAndQueriesBPMApi.get_attachment_by_id"
      end
      # verify the required parameter 't_instance_id' is set
      if @api_client.config.client_side_validation && t_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 't_instance_id' when calling UserTaskOperationsAndQueriesBPMApi.get_attachment_by_id"
      end
      # verify the required parameter 'attachment_id' is set
      if @api_client.config.client_side_validation && attachment_id.nil?
        fail ArgumentError, "Missing the required parameter 'attachment_id' when calling UserTaskOperationsAndQueriesBPMApi.get_attachment_by_id"
      end
      # resource path
      local_var_path = "/server/containers/{id}/tasks/{tInstanceId}/attachments/{attachmentId}".sub('{' + 'id' + '}', id.to_s).sub('{' + 'tInstanceId' + '}', t_instance_id.to_s).sub('{' + 'attachmentId' + '}', attachment_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TaskAttachment')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserTaskOperationsAndQueriesBPMApi#get_attachment_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves attachment's content with given id from task with given id that belongs to given container
    # 
    # @param id container id that task instance belongs to
    # @param t_instance_id identifier of the task instance that attachment belongs to
    # @param attachment_id identifier of the attachment that content should be loaded from
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def get_attachment_content_by_id(id, t_instance_id, attachment_id, opts = {})
      data, _status_code, _headers = get_attachment_content_by_id_with_http_info(id, t_instance_id, attachment_id, opts)
      return data
    end

    # Retrieves attachment&#39;s content with given id from task with given id that belongs to given container
    # 
    # @param id container id that task instance belongs to
    # @param t_instance_id identifier of the task instance that attachment belongs to
    # @param attachment_id identifier of the attachment that content should be loaded from
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Fixnum, Hash)>] Object data, response status code and response headers
    def get_attachment_content_by_id_with_http_info(id, t_instance_id, attachment_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UserTaskOperationsAndQueriesBPMApi.get_attachment_content_by_id ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UserTaskOperationsAndQueriesBPMApi.get_attachment_content_by_id"
      end
      # verify the required parameter 't_instance_id' is set
      if @api_client.config.client_side_validation && t_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 't_instance_id' when calling UserTaskOperationsAndQueriesBPMApi.get_attachment_content_by_id"
      end
      # verify the required parameter 'attachment_id' is set
      if @api_client.config.client_side_validation && attachment_id.nil?
        fail ArgumentError, "Missing the required parameter 'attachment_id' when calling UserTaskOperationsAndQueriesBPMApi.get_attachment_content_by_id"
      end
      # resource path
      local_var_path = "/server/containers/{id}/tasks/{tInstanceId}/attachments/{attachmentId}/content".sub('{' + 'id' + '}', id.to_s).sub('{' + 'tInstanceId' + '}', t_instance_id.to_s).sub('{' + 'attachmentId' + '}', attachment_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Object')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserTaskOperationsAndQueriesBPMApi#get_attachment_content_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves attachments from task with given id that belongs to given container
    # 
    # @param id container id that task instance belongs to
    # @param t_instance_id identifier of the task instance that attachments should be loaded for
    # @param [Hash] opts the optional parameters
    # @return [TaskAttachmentList]
    def get_attachments_by_task_id(id, t_instance_id, opts = {})
      data, _status_code, _headers = get_attachments_by_task_id_with_http_info(id, t_instance_id, opts)
      return data
    end

    # Retrieves attachments from task with given id that belongs to given container
    # 
    # @param id container id that task instance belongs to
    # @param t_instance_id identifier of the task instance that attachments should be loaded for
    # @param [Hash] opts the optional parameters
    # @return [Array<(TaskAttachmentList, Fixnum, Hash)>] TaskAttachmentList data, response status code and response headers
    def get_attachments_by_task_id_with_http_info(id, t_instance_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UserTaskOperationsAndQueriesBPMApi.get_attachments_by_task_id ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UserTaskOperationsAndQueriesBPMApi.get_attachments_by_task_id"
      end
      # verify the required parameter 't_instance_id' is set
      if @api_client.config.client_side_validation && t_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 't_instance_id' when calling UserTaskOperationsAndQueriesBPMApi.get_attachments_by_task_id"
      end
      # resource path
      local_var_path = "/server/containers/{id}/tasks/{tInstanceId}/attachments".sub('{' + 'id' + '}', id.to_s).sub('{' + 'tInstanceId' + '}', t_instance_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TaskAttachmentList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserTaskOperationsAndQueriesBPMApi#get_attachments_by_task_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves comment with given id from task with given id that belongs to given container
    # 
    # @param id container id that task instance belongs to
    # @param t_instance_id identifier of the task instance that comment belongs to
    # @param comment_id identifier of the comment to be loaded
    # @param [Hash] opts the optional parameters
    # @return [TaskComment]
    def get_comment_by_id(id, t_instance_id, comment_id, opts = {})
      data, _status_code, _headers = get_comment_by_id_with_http_info(id, t_instance_id, comment_id, opts)
      return data
    end

    # Retrieves comment with given id from task with given id that belongs to given container
    # 
    # @param id container id that task instance belongs to
    # @param t_instance_id identifier of the task instance that comment belongs to
    # @param comment_id identifier of the comment to be loaded
    # @param [Hash] opts the optional parameters
    # @return [Array<(TaskComment, Fixnum, Hash)>] TaskComment data, response status code and response headers
    def get_comment_by_id_with_http_info(id, t_instance_id, comment_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UserTaskOperationsAndQueriesBPMApi.get_comment_by_id ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UserTaskOperationsAndQueriesBPMApi.get_comment_by_id"
      end
      # verify the required parameter 't_instance_id' is set
      if @api_client.config.client_side_validation && t_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 't_instance_id' when calling UserTaskOperationsAndQueriesBPMApi.get_comment_by_id"
      end
      # verify the required parameter 'comment_id' is set
      if @api_client.config.client_side_validation && comment_id.nil?
        fail ArgumentError, "Missing the required parameter 'comment_id' when calling UserTaskOperationsAndQueriesBPMApi.get_comment_by_id"
      end
      # resource path
      local_var_path = "/server/containers/{id}/tasks/{tInstanceId}/comments/{commentId}".sub('{' + 'id' + '}', id.to_s).sub('{' + 'tInstanceId' + '}', t_instance_id.to_s).sub('{' + 'commentId' + '}', comment_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TaskComment')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserTaskOperationsAndQueriesBPMApi#get_comment_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves comments from task with given id that belongs to given container
    # 
    # @param id container id that task instance belongs to
    # @param t_instance_id identifier of the task instance that comments should be loaded for
    # @param [Hash] opts the optional parameters
    # @return [TaskCommentList]
    def get_comments_by_task_id(id, t_instance_id, opts = {})
      data, _status_code, _headers = get_comments_by_task_id_with_http_info(id, t_instance_id, opts)
      return data
    end

    # Retrieves comments from task with given id that belongs to given container
    # 
    # @param id container id that task instance belongs to
    # @param t_instance_id identifier of the task instance that comments should be loaded for
    # @param [Hash] opts the optional parameters
    # @return [Array<(TaskCommentList, Fixnum, Hash)>] TaskCommentList data, response status code and response headers
    def get_comments_by_task_id_with_http_info(id, t_instance_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UserTaskOperationsAndQueriesBPMApi.get_comments_by_task_id ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UserTaskOperationsAndQueriesBPMApi.get_comments_by_task_id"
      end
      # verify the required parameter 't_instance_id' is set
      if @api_client.config.client_side_validation && t_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 't_instance_id' when calling UserTaskOperationsAndQueriesBPMApi.get_comments_by_task_id"
      end
      # resource path
      local_var_path = "/server/containers/{id}/tasks/{tInstanceId}/comments".sub('{' + 'id' + '}', id.to_s).sub('{' + 'tInstanceId' + '}', t_instance_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TaskCommentList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserTaskOperationsAndQueriesBPMApi#get_comments_by_task_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves task with given id that belongs to given container, optionally loads its input, output data and assignments
    # 
    # @param id container id that task instance belongs to
    # @param t_instance_id identifier of the task instance that should be loaded
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :with_input_data optionally loads task input data
    # @option opts [BOOLEAN] :with_output_data optionally loads task output data
    # @option opts [BOOLEAN] :with_assignments optionally loads task people assignments
    # @return [TaskInstance]
    def get_task(id, t_instance_id, opts = {})
      data, _status_code, _headers = get_task_with_http_info(id, t_instance_id, opts)
      return data
    end

    # Retrieves task with given id that belongs to given container, optionally loads its input, output data and assignments
    # 
    # @param id container id that task instance belongs to
    # @param t_instance_id identifier of the task instance that should be loaded
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :with_input_data optionally loads task input data
    # @option opts [BOOLEAN] :with_output_data optionally loads task output data
    # @option opts [BOOLEAN] :with_assignments optionally loads task people assignments
    # @return [Array<(TaskInstance, Fixnum, Hash)>] TaskInstance data, response status code and response headers
    def get_task_with_http_info(id, t_instance_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UserTaskOperationsAndQueriesBPMApi.get_task ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UserTaskOperationsAndQueriesBPMApi.get_task"
      end
      # verify the required parameter 't_instance_id' is set
      if @api_client.config.client_side_validation && t_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 't_instance_id' when calling UserTaskOperationsAndQueriesBPMApi.get_task"
      end
      # resource path
      local_var_path = "/server/containers/{id}/tasks/{tInstanceId}".sub('{' + 'id' + '}', id.to_s).sub('{' + 'tInstanceId' + '}', t_instance_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'withInputData'] = opts[:'with_input_data'] if !opts[:'with_input_data'].nil?
      query_params[:'withOutputData'] = opts[:'with_output_data'] if !opts[:'with_output_data'].nil?
      query_params[:'withAssignments'] = opts[:'with_assignments'] if !opts[:'with_assignments'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TaskInstance')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserTaskOperationsAndQueriesBPMApi#get_task\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves task events for given task id and applies pagination
    # 
    # @param id container id that task instance belongs to
    # @param t_instance_id identifier of the task instance that events should be loaded for
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page optional pagination - at which page to start, defaults to 0 (meaning first) (default to 0)
    # @option opts [Integer] :page_size optional pagination - size of the result, defaults to 10 (default to 10)
    # @option opts [String] :sort optional sort column, no default
    # @option opts [BOOLEAN] :sort_order optional sort direction (asc, desc) - defaults to asc (default to true)
    # @return [TaskEventInstanceList]
    def get_task_events_by_container_id(id, t_instance_id, opts = {})
      data, _status_code, _headers = get_task_events_by_container_id_with_http_info(id, t_instance_id, opts)
      return data
    end

    # Retrieves task events for given task id and applies pagination
    # 
    # @param id container id that task instance belongs to
    # @param t_instance_id identifier of the task instance that events should be loaded for
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page optional pagination - at which page to start, defaults to 0 (meaning first)
    # @option opts [Integer] :page_size optional pagination - size of the result, defaults to 10
    # @option opts [String] :sort optional sort column, no default
    # @option opts [BOOLEAN] :sort_order optional sort direction (asc, desc) - defaults to asc
    # @return [Array<(TaskEventInstanceList, Fixnum, Hash)>] TaskEventInstanceList data, response status code and response headers
    def get_task_events_by_container_id_with_http_info(id, t_instance_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UserTaskOperationsAndQueriesBPMApi.get_task_events_by_container_id ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UserTaskOperationsAndQueriesBPMApi.get_task_events_by_container_id"
      end
      # verify the required parameter 't_instance_id' is set
      if @api_client.config.client_side_validation && t_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 't_instance_id' when calling UserTaskOperationsAndQueriesBPMApi.get_task_events_by_container_id"
      end
      # resource path
      local_var_path = "/server/containers/{id}/tasks/{tInstanceId}/events".sub('{' + 'id' + '}', id.to_s).sub('{' + 'tInstanceId' + '}', t_instance_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'pageSize'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'sortOrder'] = opts[:'sort_order'] if !opts[:'sort_order'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TaskEventInstanceList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserTaskOperationsAndQueriesBPMApi#get_task_events_by_container_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves input date from task with given id that belongs to given container
    # 
    # @param id container id that task instance belongs to
    # @param t_instance_id identifier of the task instance that input data should be loaded from
    # @param [Hash] opts the optional parameters
    # @return [Hash<String, Object>]
    def get_task_input_content_by_task_id(id, t_instance_id, opts = {})
      data, _status_code, _headers = get_task_input_content_by_task_id_with_http_info(id, t_instance_id, opts)
      return data
    end

    # Retrieves input date from task with given id that belongs to given container
    # 
    # @param id container id that task instance belongs to
    # @param t_instance_id identifier of the task instance that input data should be loaded from
    # @param [Hash] opts the optional parameters
    # @return [Array<(Hash<String, Object>, Fixnum, Hash)>] Hash<String, Object> data, response status code and response headers
    def get_task_input_content_by_task_id_with_http_info(id, t_instance_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UserTaskOperationsAndQueriesBPMApi.get_task_input_content_by_task_id ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UserTaskOperationsAndQueriesBPMApi.get_task_input_content_by_task_id"
      end
      # verify the required parameter 't_instance_id' is set
      if @api_client.config.client_side_validation && t_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 't_instance_id' when calling UserTaskOperationsAndQueriesBPMApi.get_task_input_content_by_task_id"
      end
      # resource path
      local_var_path = "/server/containers/{id}/tasks/{tInstanceId}/contents/input".sub('{' + 'id' + '}', id.to_s).sub('{' + 'tInstanceId' + '}', t_instance_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Hash<String, Object>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserTaskOperationsAndQueriesBPMApi#get_task_input_content_by_task_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves output date from task with given id that belongs to given container
    # 
    # @param id container id that task instance belongs to
    # @param t_instance_id identifier of the task instance that output data should be loaded from
    # @param [Hash] opts the optional parameters
    # @return [Hash<String, Object>]
    def get_task_output_content_by_task_id(id, t_instance_id, opts = {})
      data, _status_code, _headers = get_task_output_content_by_task_id_with_http_info(id, t_instance_id, opts)
      return data
    end

    # Retrieves output date from task with given id that belongs to given container
    # 
    # @param id container id that task instance belongs to
    # @param t_instance_id identifier of the task instance that output data should be loaded from
    # @param [Hash] opts the optional parameters
    # @return [Array<(Hash<String, Object>, Fixnum, Hash)>] Hash<String, Object> data, response status code and response headers
    def get_task_output_content_by_task_id_with_http_info(id, t_instance_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UserTaskOperationsAndQueriesBPMApi.get_task_output_content_by_task_id ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UserTaskOperationsAndQueriesBPMApi.get_task_output_content_by_task_id"
      end
      # verify the required parameter 't_instance_id' is set
      if @api_client.config.client_side_validation && t_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 't_instance_id' when calling UserTaskOperationsAndQueriesBPMApi.get_task_output_content_by_task_id"
      end
      # resource path
      local_var_path = "/server/containers/{id}/tasks/{tInstanceId}/contents/output".sub('{' + 'id' + '}', id.to_s).sub('{' + 'tInstanceId' + '}', t_instance_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Hash<String, Object>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserTaskOperationsAndQueriesBPMApi#get_task_output_content_by_task_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Nominates task with given id that belongs to given container
    # 
    # @param id container id that task instance belongs to
    # @param t_instance_id identifier of the task instance that should be nominated
    # @param pot_owner list of users that the task should be nominated to
    # @param [Hash] opts the optional parameters
    # @option opts [String] :user optional user id to be used instead of authenticated user - only when bypass authenticated user is enabled
    # @return [nil]
    def nominate(id, t_instance_id, pot_owner, opts = {})
      nominate_with_http_info(id, t_instance_id, pot_owner, opts)
      return nil
    end

    # Nominates task with given id that belongs to given container
    # 
    # @param id container id that task instance belongs to
    # @param t_instance_id identifier of the task instance that should be nominated
    # @param pot_owner list of users that the task should be nominated to
    # @param [Hash] opts the optional parameters
    # @option opts [String] :user optional user id to be used instead of authenticated user - only when bypass authenticated user is enabled
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def nominate_with_http_info(id, t_instance_id, pot_owner, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UserTaskOperationsAndQueriesBPMApi.nominate ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UserTaskOperationsAndQueriesBPMApi.nominate"
      end
      # verify the required parameter 't_instance_id' is set
      if @api_client.config.client_side_validation && t_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 't_instance_id' when calling UserTaskOperationsAndQueriesBPMApi.nominate"
      end
      # verify the required parameter 'pot_owner' is set
      if @api_client.config.client_side_validation && pot_owner.nil?
        fail ArgumentError, "Missing the required parameter 'pot_owner' when calling UserTaskOperationsAndQueriesBPMApi.nominate"
      end
      # resource path
      local_var_path = "/server/containers/{id}/tasks/{tInstanceId}/states/nominated".sub('{' + 'id' + '}', id.to_s).sub('{' + 'tInstanceId' + '}', t_instance_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'potOwner'] = @api_client.build_collection_param(pot_owner, :multi)
      query_params[:'user'] = opts[:'user'] if !opts[:'user'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserTaskOperationsAndQueriesBPMApi#nominate\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Releases task with given id that belongs to given container
    # 
    # @param id container id that task instance belongs to
    # @param t_instance_id identifier of the task instance that should be released
    # @param [Hash] opts the optional parameters
    # @option opts [String] :user optional user id to be used instead of authenticated user - only when bypass authenticated user is enabled
    # @return [nil]
    def release(id, t_instance_id, opts = {})
      release_with_http_info(id, t_instance_id, opts)
      return nil
    end

    # Releases task with given id that belongs to given container
    # 
    # @param id container id that task instance belongs to
    # @param t_instance_id identifier of the task instance that should be released
    # @param [Hash] opts the optional parameters
    # @option opts [String] :user optional user id to be used instead of authenticated user - only when bypass authenticated user is enabled
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def release_with_http_info(id, t_instance_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UserTaskOperationsAndQueriesBPMApi.release ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UserTaskOperationsAndQueriesBPMApi.release"
      end
      # verify the required parameter 't_instance_id' is set
      if @api_client.config.client_side_validation && t_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 't_instance_id' when calling UserTaskOperationsAndQueriesBPMApi.release"
      end
      # resource path
      local_var_path = "/server/containers/{id}/tasks/{tInstanceId}/states/released".sub('{' + 'id' + '}', id.to_s).sub('{' + 'tInstanceId' + '}', t_instance_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'user'] = opts[:'user'] if !opts[:'user'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserTaskOperationsAndQueriesBPMApi#release\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Resumes task with given id that belongs to given container
    # 
    # @param id container id that task instance belongs to
    # @param t_instance_id identifier of the task instance that should be resumed
    # @param [Hash] opts the optional parameters
    # @option opts [String] :user optional user id to be used instead of authenticated user - only when bypass authenticated user is enabled
    # @return [nil]
    def resume(id, t_instance_id, opts = {})
      resume_with_http_info(id, t_instance_id, opts)
      return nil
    end

    # Resumes task with given id that belongs to given container
    # 
    # @param id container id that task instance belongs to
    # @param t_instance_id identifier of the task instance that should be resumed
    # @param [Hash] opts the optional parameters
    # @option opts [String] :user optional user id to be used instead of authenticated user - only when bypass authenticated user is enabled
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def resume_with_http_info(id, t_instance_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UserTaskOperationsAndQueriesBPMApi.resume ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UserTaskOperationsAndQueriesBPMApi.resume"
      end
      # verify the required parameter 't_instance_id' is set
      if @api_client.config.client_side_validation && t_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 't_instance_id' when calling UserTaskOperationsAndQueriesBPMApi.resume"
      end
      # resource path
      local_var_path = "/server/containers/{id}/tasks/{tInstanceId}/states/resumed".sub('{' + 'id' + '}', id.to_s).sub('{' + 'tInstanceId' + '}', t_instance_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'user'] = opts[:'user'] if !opts[:'user'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserTaskOperationsAndQueriesBPMApi#resume\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Saves content on task with given id that belongs to given container
    # 
    # @param id container id that task instance belongs to
    # @param t_instance_id identifier of the task instance that data should be saved into
    # @param body output data to be saved as Map 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def save_content(id, t_instance_id, body, opts = {})
      save_content_with_http_info(id, t_instance_id, body, opts)
      return nil
    end

    # Saves content on task with given id that belongs to given container
    # 
    # @param id container id that task instance belongs to
    # @param t_instance_id identifier of the task instance that data should be saved into
    # @param body output data to be saved as Map 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def save_content_with_http_info(id, t_instance_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UserTaskOperationsAndQueriesBPMApi.save_content ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UserTaskOperationsAndQueriesBPMApi.save_content"
      end
      # verify the required parameter 't_instance_id' is set
      if @api_client.config.client_side_validation && t_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 't_instance_id' when calling UserTaskOperationsAndQueriesBPMApi.save_content"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling UserTaskOperationsAndQueriesBPMApi.save_content"
      end
      # resource path
      local_var_path = "/server/containers/{id}/tasks/{tInstanceId}/contents/output".sub('{' + 'id' + '}', id.to_s).sub('{' + 'tInstanceId' + '}', t_instance_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserTaskOperationsAndQueriesBPMApi#save_content\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Sets description on task with given id that belongs to given container
    # 
    # @param id container id that task instance belongs to
    # @param t_instance_id identifier of the task instance where description should be updated
    # @param body description as String
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def set_description(id, t_instance_id, body, opts = {})
      set_description_with_http_info(id, t_instance_id, body, opts)
      return nil
    end

    # Sets description on task with given id that belongs to given container
    # 
    # @param id container id that task instance belongs to
    # @param t_instance_id identifier of the task instance where description should be updated
    # @param body description as String
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def set_description_with_http_info(id, t_instance_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UserTaskOperationsAndQueriesBPMApi.set_description ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UserTaskOperationsAndQueriesBPMApi.set_description"
      end
      # verify the required parameter 't_instance_id' is set
      if @api_client.config.client_side_validation && t_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 't_instance_id' when calling UserTaskOperationsAndQueriesBPMApi.set_description"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling UserTaskOperationsAndQueriesBPMApi.set_description"
      end
      # resource path
      local_var_path = "/server/containers/{id}/tasks/{tInstanceId}/description".sub('{' + 'id' + '}', id.to_s).sub('{' + 'tInstanceId' + '}', t_instance_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserTaskOperationsAndQueriesBPMApi#set_description\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Sets expiration date on task with given id that belongs to given container
    # 
    # @param id container id that task instance belongs to
    # @param t_instance_id identifier of the task instance where expiration date should be updated
    # @param body expiration date as Date
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def set_expiration_date(id, t_instance_id, body, opts = {})
      set_expiration_date_with_http_info(id, t_instance_id, body, opts)
      return nil
    end

    # Sets expiration date on task with given id that belongs to given container
    # 
    # @param id container id that task instance belongs to
    # @param t_instance_id identifier of the task instance where expiration date should be updated
    # @param body expiration date as Date
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def set_expiration_date_with_http_info(id, t_instance_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UserTaskOperationsAndQueriesBPMApi.set_expiration_date ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UserTaskOperationsAndQueriesBPMApi.set_expiration_date"
      end
      # verify the required parameter 't_instance_id' is set
      if @api_client.config.client_side_validation && t_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 't_instance_id' when calling UserTaskOperationsAndQueriesBPMApi.set_expiration_date"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling UserTaskOperationsAndQueriesBPMApi.set_expiration_date"
      end
      # resource path
      local_var_path = "/server/containers/{id}/tasks/{tInstanceId}/expiration".sub('{' + 'id' + '}', id.to_s).sub('{' + 'tInstanceId' + '}', t_instance_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserTaskOperationsAndQueriesBPMApi#set_expiration_date\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Sets name on task with given id that belongs to given container
    # 
    # @param id container id that task instance belongs to
    # @param t_instance_id identifier of the task instance where name should be updated
    # @param body name as String
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def set_name(id, t_instance_id, body, opts = {})
      set_name_with_http_info(id, t_instance_id, body, opts)
      return nil
    end

    # Sets name on task with given id that belongs to given container
    # 
    # @param id container id that task instance belongs to
    # @param t_instance_id identifier of the task instance where name should be updated
    # @param body name as String
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def set_name_with_http_info(id, t_instance_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UserTaskOperationsAndQueriesBPMApi.set_name ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UserTaskOperationsAndQueriesBPMApi.set_name"
      end
      # verify the required parameter 't_instance_id' is set
      if @api_client.config.client_side_validation && t_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 't_instance_id' when calling UserTaskOperationsAndQueriesBPMApi.set_name"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling UserTaskOperationsAndQueriesBPMApi.set_name"
      end
      # resource path
      local_var_path = "/server/containers/{id}/tasks/{tInstanceId}/name".sub('{' + 'id' + '}', id.to_s).sub('{' + 'tInstanceId' + '}', t_instance_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserTaskOperationsAndQueriesBPMApi#set_name\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Sets priority on task with given id that belongs to given container
    # 
    # @param id container id that task instance belongs to
    # @param t_instance_id identifier of the task instance where priority should be updated
    # @param body priority as Integer
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def set_priority(id, t_instance_id, body, opts = {})
      set_priority_with_http_info(id, t_instance_id, body, opts)
      return nil
    end

    # Sets priority on task with given id that belongs to given container
    # 
    # @param id container id that task instance belongs to
    # @param t_instance_id identifier of the task instance where priority should be updated
    # @param body priority as Integer
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def set_priority_with_http_info(id, t_instance_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UserTaskOperationsAndQueriesBPMApi.set_priority ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UserTaskOperationsAndQueriesBPMApi.set_priority"
      end
      # verify the required parameter 't_instance_id' is set
      if @api_client.config.client_side_validation && t_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 't_instance_id' when calling UserTaskOperationsAndQueriesBPMApi.set_priority"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling UserTaskOperationsAndQueriesBPMApi.set_priority"
      end
      # resource path
      local_var_path = "/server/containers/{id}/tasks/{tInstanceId}/priority".sub('{' + 'id' + '}', id.to_s).sub('{' + 'tInstanceId' + '}', t_instance_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserTaskOperationsAndQueriesBPMApi#set_priority\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Sets skipable flag on task with given id that belongs to given container
    # 
    # @param id container id that task instance belongs to
    # @param t_instance_id identifier of the task instance where skipable flag should be updated
    # @param body skipable flag as Boolean
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def set_skipable(id, t_instance_id, body, opts = {})
      set_skipable_with_http_info(id, t_instance_id, body, opts)
      return nil
    end

    # Sets skipable flag on task with given id that belongs to given container
    # 
    # @param id container id that task instance belongs to
    # @param t_instance_id identifier of the task instance where skipable flag should be updated
    # @param body skipable flag as Boolean
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def set_skipable_with_http_info(id, t_instance_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UserTaskOperationsAndQueriesBPMApi.set_skipable ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UserTaskOperationsAndQueriesBPMApi.set_skipable"
      end
      # verify the required parameter 't_instance_id' is set
      if @api_client.config.client_side_validation && t_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 't_instance_id' when calling UserTaskOperationsAndQueriesBPMApi.set_skipable"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling UserTaskOperationsAndQueriesBPMApi.set_skipable"
      end
      # resource path
      local_var_path = "/server/containers/{id}/tasks/{tInstanceId}/skipable".sub('{' + 'id' + '}', id.to_s).sub('{' + 'tInstanceId' + '}', t_instance_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserTaskOperationsAndQueriesBPMApi#set_skipable\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Skips task with given id that belongs to given container
    # 
    # @param id container id that task instance belongs to
    # @param t_instance_id identifier of the task instance that should be skipped
    # @param [Hash] opts the optional parameters
    # @option opts [String] :user optional user id to be used instead of authenticated user - only when bypass authenticated user is enabled
    # @return [nil]
    def skip(id, t_instance_id, opts = {})
      skip_with_http_info(id, t_instance_id, opts)
      return nil
    end

    # Skips task with given id that belongs to given container
    # 
    # @param id container id that task instance belongs to
    # @param t_instance_id identifier of the task instance that should be skipped
    # @param [Hash] opts the optional parameters
    # @option opts [String] :user optional user id to be used instead of authenticated user - only when bypass authenticated user is enabled
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def skip_with_http_info(id, t_instance_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UserTaskOperationsAndQueriesBPMApi.skip ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UserTaskOperationsAndQueriesBPMApi.skip"
      end
      # verify the required parameter 't_instance_id' is set
      if @api_client.config.client_side_validation && t_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 't_instance_id' when calling UserTaskOperationsAndQueriesBPMApi.skip"
      end
      # resource path
      local_var_path = "/server/containers/{id}/tasks/{tInstanceId}/states/skipped".sub('{' + 'id' + '}', id.to_s).sub('{' + 'tInstanceId' + '}', t_instance_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'user'] = opts[:'user'] if !opts[:'user'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserTaskOperationsAndQueriesBPMApi#skip\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Starts task with given id that belongs to given container
    # 
    # @param id container id that task instance belongs to
    # @param t_instance_id identifier of the task instance that should be started
    # @param [Hash] opts the optional parameters
    # @option opts [String] :user optional user id to be used instead of authenticated user - only when bypass authenticated user is enabled
    # @return [nil]
    def start(id, t_instance_id, opts = {})
      start_with_http_info(id, t_instance_id, opts)
      return nil
    end

    # Starts task with given id that belongs to given container
    # 
    # @param id container id that task instance belongs to
    # @param t_instance_id identifier of the task instance that should be started
    # @param [Hash] opts the optional parameters
    # @option opts [String] :user optional user id to be used instead of authenticated user - only when bypass authenticated user is enabled
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def start_with_http_info(id, t_instance_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UserTaskOperationsAndQueriesBPMApi.start ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UserTaskOperationsAndQueriesBPMApi.start"
      end
      # verify the required parameter 't_instance_id' is set
      if @api_client.config.client_side_validation && t_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 't_instance_id' when calling UserTaskOperationsAndQueriesBPMApi.start"
      end
      # resource path
      local_var_path = "/server/containers/{id}/tasks/{tInstanceId}/states/started".sub('{' + 'id' + '}', id.to_s).sub('{' + 'tInstanceId' + '}', t_instance_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'user'] = opts[:'user'] if !opts[:'user'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserTaskOperationsAndQueriesBPMApi#start\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Stops task with given id that belongs to given container
    # 
    # @param id container id that task instance belongs to
    # @param t_instance_id identifier of the task instance that should be stopped
    # @param [Hash] opts the optional parameters
    # @option opts [String] :user optional user id to be used instead of authenticated user - only when bypass authenticated user is enabled
    # @return [nil]
    def stop(id, t_instance_id, opts = {})
      stop_with_http_info(id, t_instance_id, opts)
      return nil
    end

    # Stops task with given id that belongs to given container
    # 
    # @param id container id that task instance belongs to
    # @param t_instance_id identifier of the task instance that should be stopped
    # @param [Hash] opts the optional parameters
    # @option opts [String] :user optional user id to be used instead of authenticated user - only when bypass authenticated user is enabled
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def stop_with_http_info(id, t_instance_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UserTaskOperationsAndQueriesBPMApi.stop ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UserTaskOperationsAndQueriesBPMApi.stop"
      end
      # verify the required parameter 't_instance_id' is set
      if @api_client.config.client_side_validation && t_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 't_instance_id' when calling UserTaskOperationsAndQueriesBPMApi.stop"
      end
      # resource path
      local_var_path = "/server/containers/{id}/tasks/{tInstanceId}/states/stopped".sub('{' + 'id' + '}', id.to_s).sub('{' + 'tInstanceId' + '}', t_instance_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'user'] = opts[:'user'] if !opts[:'user'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserTaskOperationsAndQueriesBPMApi#stop\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Suspends task with given id that belongs to given container
    # 
    # @param id container id that task instance belongs to
    # @param t_instance_id identifier of the task instance that should be suspended
    # @param [Hash] opts the optional parameters
    # @option opts [String] :user optional user id to be used instead of authenticated user - only when bypass authenticated user is enabled
    # @return [nil]
    def suspend(id, t_instance_id, opts = {})
      suspend_with_http_info(id, t_instance_id, opts)
      return nil
    end

    # Suspends task with given id that belongs to given container
    # 
    # @param id container id that task instance belongs to
    # @param t_instance_id identifier of the task instance that should be suspended
    # @param [Hash] opts the optional parameters
    # @option opts [String] :user optional user id to be used instead of authenticated user - only when bypass authenticated user is enabled
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def suspend_with_http_info(id, t_instance_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UserTaskOperationsAndQueriesBPMApi.suspend ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UserTaskOperationsAndQueriesBPMApi.suspend"
      end
      # verify the required parameter 't_instance_id' is set
      if @api_client.config.client_side_validation && t_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 't_instance_id' when calling UserTaskOperationsAndQueriesBPMApi.suspend"
      end
      # resource path
      local_var_path = "/server/containers/{id}/tasks/{tInstanceId}/states/suspended".sub('{' + 'id' + '}', id.to_s).sub('{' + 'tInstanceId' + '}', t_instance_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'user'] = opts[:'user'] if !opts[:'user'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserTaskOperationsAndQueriesBPMApi#suspend\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Updates task with given id that belongs to given container with given task instance details in body, updates name, description, priority, expiration date, form name, input and output variables
    # 
    # @param id container id that task instance belongs to
    # @param t_instance_id identifier of the task instance that should be updated
    # @param body task instance with updates as TaskInstance type
    # @param [Hash] opts the optional parameters
    # @option opts [String] :user optional user id to be used instead of authenticated user - only when bypass authenticated user is enabled
    # @return [nil]
    def update(id, t_instance_id, body, opts = {})
      update_with_http_info(id, t_instance_id, body, opts)
      return nil
    end

    # Updates task with given id that belongs to given container with given task instance details in body, updates name, description, priority, expiration date, form name, input and output variables
    # 
    # @param id container id that task instance belongs to
    # @param t_instance_id identifier of the task instance that should be updated
    # @param body task instance with updates as TaskInstance type
    # @param [Hash] opts the optional parameters
    # @option opts [String] :user optional user id to be used instead of authenticated user - only when bypass authenticated user is enabled
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def update_with_http_info(id, t_instance_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UserTaskOperationsAndQueriesBPMApi.update ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UserTaskOperationsAndQueriesBPMApi.update"
      end
      # verify the required parameter 't_instance_id' is set
      if @api_client.config.client_side_validation && t_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 't_instance_id' when calling UserTaskOperationsAndQueriesBPMApi.update"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling UserTaskOperationsAndQueriesBPMApi.update"
      end
      # resource path
      local_var_path = "/server/containers/{id}/tasks/{tInstanceId}".sub('{' + 'id' + '}', id.to_s).sub('{' + 'tInstanceId' + '}', t_instance_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'user'] = opts[:'user'] if !opts[:'user'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserTaskOperationsAndQueriesBPMApi#update\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end

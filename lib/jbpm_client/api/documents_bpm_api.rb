=begin
#jbpm

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 7.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1

=end

require "uri"

module JBPMAPIClient
  class DocumentsBPMApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Creates new document based on given content (body)
    # 
    # @param body document content represented as DocumentInstance
    # @param [Hash] opts the optional parameters
    # @return [String]
    def create_document(body, opts = {})
      data, _status_code, _headers = create_document_with_http_info(body, opts)
      return data
    end

    # Creates new document based on given content (body)
    # 
    # @param body document content represented as DocumentInstance
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def create_document_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DocumentsBPMApi.create_document ..."
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling DocumentsBPMApi.create_document"
      end
      # resource path
      local_var_path = "/server/documents"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml', 'application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/xml', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DocumentsBPMApi#create_document\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Deletes document identified by given document id
    # 
    # @param document_id document id of a document that should be deleted
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_document(document_id, opts = {})
      delete_document_with_http_info(document_id, opts)
      return nil
    end

    # Deletes document identified by given document id
    # 
    # @param document_id document id of a document that should be deleted
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_document_with_http_info(document_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DocumentsBPMApi.delete_document ..."
      end
      # verify the required parameter 'document_id' is set
      if @api_client.config.client_side_validation && document_id.nil?
        fail ArgumentError, "Missing the required parameter 'document_id' when calling DocumentsBPMApi.delete_document"
      end
      # resource path
      local_var_path = "/server/documents/{documentId}".sub('{' + 'documentId' + '}', document_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['jbpm_auth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DocumentsBPMApi#delete_document\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves document identified by given documentId
    # 
    # @param document_id document id of a document that should be retruned
    # @param [Hash] opts the optional parameters
    # @return [DocumentInstance]
    def get_document(document_id, opts = {})
      data, _status_code, _headers = get_document_with_http_info(document_id, opts)
      return data
    end

    # Retrieves document identified by given documentId
    # 
    # @param document_id document id of a document that should be retruned
    # @param [Hash] opts the optional parameters
    # @return [Array<(DocumentInstance, Fixnum, Hash)>] DocumentInstance data, response status code and response headers
    def get_document_with_http_info(document_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DocumentsBPMApi.get_document ..."
      end
      # verify the required parameter 'document_id' is set
      if @api_client.config.client_side_validation && document_id.nil?
        fail ArgumentError, "Missing the required parameter 'document_id' when calling DocumentsBPMApi.get_document"
      end
      # resource path
      local_var_path = "/server/documents/{documentId}".sub('{' + 'documentId' + '}', document_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DocumentInstance')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DocumentsBPMApi#get_document\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves document's content identified by given documentId
    # 
    # @param document_id document id of a document that content should be retruned from
    # @param [Hash] opts the optional parameters
    # @return [Array<String>]
    def get_document_content(document_id, opts = {})
      data, _status_code, _headers = get_document_content_with_http_info(document_id, opts)
      return data
    end

    # Retrieves document&#39;s content identified by given documentId
    # 
    # @param document_id document id of a document that content should be retruned from
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<String>, Fixnum, Hash)>] Array<String> data, response status code and response headers
    def get_document_content_with_http_info(document_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DocumentsBPMApi.get_document_content ..."
      end
      # verify the required parameter 'document_id' is set
      if @api_client.config.client_side_validation && document_id.nil?
        fail ArgumentError, "Missing the required parameter 'document_id' when calling DocumentsBPMApi.get_document_content"
      end
      # resource path
      local_var_path = "/server/documents/{documentId}/content".sub('{' + 'documentId' + '}', document_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/octet-stream'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<String>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DocumentsBPMApi#get_document_content\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves documents that are stored in the system, with pagination
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page optional pagination - at which page to start, defaults to 0 (meaning first) (default to 0)
    # @option opts [Integer] :page_size optional pagination - size of the result, defaults to 10 (default to 10)
    # @return [DocumentInstanceList]
    def list_documents(opts = {})
      data, _status_code, _headers = list_documents_with_http_info(opts)
      return data
    end

    # Retrieves documents that are stored in the system, with pagination
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page optional pagination - at which page to start, defaults to 0 (meaning first)
    # @option opts [Integer] :page_size optional pagination - size of the result, defaults to 10
    # @return [Array<(DocumentInstanceList, Fixnum, Hash)>] DocumentInstanceList data, response status code and response headers
    def list_documents_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DocumentsBPMApi.list_documents ..."
      end
      # resource path
      local_var_path = "/server/documents"

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'pageSize'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DocumentInstanceList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DocumentsBPMApi#list_documents\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Updates document identified by given document id based on given content (body)
    # 
    # @param document_id document id of a document that should be updated
    # @param body document content represented as DocumentInstance
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def update_document(document_id, body, opts = {})
      update_document_with_http_info(document_id, body, opts)
      return nil
    end

    # Updates document identified by given document id based on given content (body)
    # 
    # @param document_id document id of a document that should be updated
    # @param body document content represented as DocumentInstance
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def update_document_with_http_info(document_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DocumentsBPMApi.update_document ..."
      end
      # verify the required parameter 'document_id' is set
      if @api_client.config.client_side_validation && document_id.nil?
        fail ArgumentError, "Missing the required parameter 'document_id' when calling DocumentsBPMApi.update_document"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling DocumentsBPMApi.update_document"
      end
      # resource path
      local_var_path = "/server/documents/{documentId}".sub('{' + 'documentId' + '}', document_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml', 'application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/xml', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DocumentsBPMApi#update_document\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end

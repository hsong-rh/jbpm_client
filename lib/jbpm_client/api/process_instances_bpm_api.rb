=begin
#jbpm

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 7.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1

=end

require "uri"

module JBPMAPIClient
  class ProcessInstancesBPMApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Aborts active process instance identified by given id
    # 
    # @param id container id that process instance belongs to
    # @param p_instance_id identifier of the process instance to be aborted
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def abort_process_instance(id, p_instance_id, opts = {})
      abort_process_instance_with_http_info(id, p_instance_id, opts)
      return nil
    end

    # Aborts active process instance identified by given id
    # 
    # @param id container id that process instance belongs to
    # @param p_instance_id identifier of the process instance to be aborted
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def abort_process_instance_with_http_info(id, p_instance_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ProcessInstancesBPMApi.abort_process_instance ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ProcessInstancesBPMApi.abort_process_instance"
      end
      # verify the required parameter 'p_instance_id' is set
      if @api_client.config.client_side_validation && p_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'p_instance_id' when calling ProcessInstancesBPMApi.abort_process_instance"
      end
      # resource path
      local_var_path = "/server/containers/{id}/processes/instances/{pInstanceId}".sub('{' + 'id' + '}', id.to_s).sub('{' + 'pInstanceId' + '}', p_instance_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProcessInstancesBPMApi#abort_process_instance\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Aborts active process instances identified by given list of identifiers
    # 
    # @param id container id that process instance belongs to
    # @param instance_id list of identifiers of the process instances to be aborted
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def abort_process_instances(id, instance_id, opts = {})
      abort_process_instances_with_http_info(id, instance_id, opts)
      return nil
    end

    # Aborts active process instances identified by given list of identifiers
    # 
    # @param id container id that process instance belongs to
    # @param instance_id list of identifiers of the process instances to be aborted
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def abort_process_instances_with_http_info(id, instance_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ProcessInstancesBPMApi.abort_process_instances ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ProcessInstancesBPMApi.abort_process_instances"
      end
      # verify the required parameter 'instance_id' is set
      if @api_client.config.client_side_validation && instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'instance_id' when calling ProcessInstancesBPMApi.abort_process_instances"
      end
      # resource path
      local_var_path = "/server/containers/{id}/processes/instances".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'instanceId'] = @api_client.build_collection_param(instance_id, :multi)

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProcessInstancesBPMApi#abort_process_instances\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Aborts work item identified by workItemId within process instance and container
    # 
    # @param id container id that process instance belongs to
    # @param p_instance_id identifier of the process instance that work item belongs to
    # @param work_item_id identifier of the work item to abort
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def abort_work_item(id, p_instance_id, work_item_id, opts = {})
      abort_work_item_with_http_info(id, p_instance_id, work_item_id, opts)
      return nil
    end

    # Aborts work item identified by workItemId within process instance and container
    # 
    # @param id container id that process instance belongs to
    # @param p_instance_id identifier of the process instance that work item belongs to
    # @param work_item_id identifier of the work item to abort
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def abort_work_item_with_http_info(id, p_instance_id, work_item_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ProcessInstancesBPMApi.abort_work_item ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ProcessInstancesBPMApi.abort_work_item"
      end
      # verify the required parameter 'p_instance_id' is set
      if @api_client.config.client_side_validation && p_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'p_instance_id' when calling ProcessInstancesBPMApi.abort_work_item"
      end
      # verify the required parameter 'work_item_id' is set
      if @api_client.config.client_side_validation && work_item_id.nil?
        fail ArgumentError, "Missing the required parameter 'work_item_id' when calling ProcessInstancesBPMApi.abort_work_item"
      end
      # resource path
      local_var_path = "/server/containers/{id}/processes/instances/{pInstanceId}/workitems/{workItemId}/aborted".sub('{' + 'id' + '}', id.to_s).sub('{' + 'pInstanceId' + '}', p_instance_id.to_s).sub('{' + 'workItemId' + '}', work_item_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProcessInstancesBPMApi#abort_work_item\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Completes work item identified by workItemId within process instance and container. Optionally completion can provide outcome data - as map
    # 
    # @param id container id that process instance belongs to
    # @param p_instance_id identifier of the process instance that work item belongs to
    # @param work_item_id identifier of the work item to complete
    # @param [Hash] opts the optional parameters
    # @option opts [String] :body optional outcome data give as map
    # @return [nil]
    def complete_work_item(id, p_instance_id, work_item_id, opts = {})
      complete_work_item_with_http_info(id, p_instance_id, work_item_id, opts)
      return nil
    end

    # Completes work item identified by workItemId within process instance and container. Optionally completion can provide outcome data - as map
    # 
    # @param id container id that process instance belongs to
    # @param p_instance_id identifier of the process instance that work item belongs to
    # @param work_item_id identifier of the work item to complete
    # @param [Hash] opts the optional parameters
    # @option opts [String] :body optional outcome data give as map
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def complete_work_item_with_http_info(id, p_instance_id, work_item_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ProcessInstancesBPMApi.complete_work_item ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ProcessInstancesBPMApi.complete_work_item"
      end
      # verify the required parameter 'p_instance_id' is set
      if @api_client.config.client_side_validation && p_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'p_instance_id' when calling ProcessInstancesBPMApi.complete_work_item"
      end
      # verify the required parameter 'work_item_id' is set
      if @api_client.config.client_side_validation && work_item_id.nil?
        fail ArgumentError, "Missing the required parameter 'work_item_id' when calling ProcessInstancesBPMApi.complete_work_item"
      end
      # resource path
      local_var_path = "/server/containers/{id}/processes/instances/{pInstanceId}/workitems/{workItemId}/completed".sub('{' + 'id' + '}', id.to_s).sub('{' + 'pInstanceId' + '}', p_instance_id.to_s).sub('{' + 'workItemId' + '}', work_item_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml', 'application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/xml', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProcessInstancesBPMApi#complete_work_item\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves active process instance's (identified by given id) active signals
    # 
    # @param id container id that process instance belongs to
    # @param p_instance_id identifier of the process instance that signals should be collected for
    # @param [Hash] opts the optional parameters
    # @return [Array<String>]
    def get_available_signals(id, p_instance_id, opts = {})
      data, _status_code, _headers = get_available_signals_with_http_info(id, p_instance_id, opts)
      return data
    end

    # Retrieves active process instance&#39;s (identified by given id) active signals
    # 
    # @param id container id that process instance belongs to
    # @param p_instance_id identifier of the process instance that signals should be collected for
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<String>, Fixnum, Hash)>] Array<String> data, response status code and response headers
    def get_available_signals_with_http_info(id, p_instance_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ProcessInstancesBPMApi.get_available_signals ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ProcessInstancesBPMApi.get_available_signals"
      end
      # verify the required parameter 'p_instance_id' is set
      if @api_client.config.client_side_validation && p_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'p_instance_id' when calling ProcessInstancesBPMApi.get_available_signals"
      end
      # resource path
      local_var_path = "/server/containers/{id}/processes/instances/{pInstanceId}/signals".sub('{' + 'id' + '}', id.to_s).sub('{' + 'pInstanceId' + '}', p_instance_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<String>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProcessInstancesBPMApi#get_available_signals\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves process instance identified by given id optionally with variables (variables will be loaded only for active process instance)
    # 
    # @param id container id that process instance belongs to
    # @param p_instance_id identifier of the process instance to be fetched
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :with_vars indicates if process instance variables should be loaded or not
    # @return [ProcessInstance]
    def get_process_instance(id, p_instance_id, opts = {})
      data, _status_code, _headers = get_process_instance_with_http_info(id, p_instance_id, opts)
      return data
    end

    # Retrieves process instance identified by given id optionally with variables (variables will be loaded only for active process instance)
    # 
    # @param id container id that process instance belongs to
    # @param p_instance_id identifier of the process instance to be fetched
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :with_vars indicates if process instance variables should be loaded or not
    # @return [Array<(ProcessInstance, Fixnum, Hash)>] ProcessInstance data, response status code and response headers
    def get_process_instance_with_http_info(id, p_instance_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ProcessInstancesBPMApi.get_process_instance ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ProcessInstancesBPMApi.get_process_instance"
      end
      # verify the required parameter 'p_instance_id' is set
      if @api_client.config.client_side_validation && p_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'p_instance_id' when calling ProcessInstancesBPMApi.get_process_instance"
      end
      # resource path
      local_var_path = "/server/containers/{id}/processes/instances/{pInstanceId}".sub('{' + 'id' + '}', id.to_s).sub('{' + 'pInstanceId' + '}', p_instance_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'withVars'] = opts[:'with_vars'] if !opts[:'with_vars'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ProcessInstance')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProcessInstancesBPMApi#get_process_instance\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves node instances for given process instance. Depending on provided query parameters (activeOnly or completedOnly) will return active and/or completes nodes
    # 
    # @param id container id that process instance belongs to
    # @param p_instance_id identifier of the process instance that history should be collected for
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :active_only instructs if active nodes only should be collected, defaults to false
    # @option opts [BOOLEAN] :completed_only instructs if completed nodes only should be collected, defaults to false
    # @option opts [Integer] :page optional pagination - at which page to start, defaults to 0 (meaning first) (default to 0)
    # @option opts [Integer] :page_size optional pagination - size of the result, defaults to 10 (default to 10)
    # @return [NodeInstanceList]
    def get_process_instance_history_by_container_id(id, p_instance_id, opts = {})
      data, _status_code, _headers = get_process_instance_history_by_container_id_with_http_info(id, p_instance_id, opts)
      return data
    end

    # Retrieves node instances for given process instance. Depending on provided query parameters (activeOnly or completedOnly) will return active and/or completes nodes
    # 
    # @param id container id that process instance belongs to
    # @param p_instance_id identifier of the process instance that history should be collected for
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :active_only instructs if active nodes only should be collected, defaults to false
    # @option opts [BOOLEAN] :completed_only instructs if completed nodes only should be collected, defaults to false
    # @option opts [Integer] :page optional pagination - at which page to start, defaults to 0 (meaning first)
    # @option opts [Integer] :page_size optional pagination - size of the result, defaults to 10
    # @return [Array<(NodeInstanceList, Fixnum, Hash)>] NodeInstanceList data, response status code and response headers
    def get_process_instance_history_by_container_id_with_http_info(id, p_instance_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ProcessInstancesBPMApi.get_process_instance_history_by_container_id ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ProcessInstancesBPMApi.get_process_instance_history_by_container_id"
      end
      # verify the required parameter 'p_instance_id' is set
      if @api_client.config.client_side_validation && p_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'p_instance_id' when calling ProcessInstancesBPMApi.get_process_instance_history_by_container_id"
      end
      # resource path
      local_var_path = "/server/containers/{id}/processes/instances/{pInstanceId}/nodes/instances".sub('{' + 'id' + '}', id.to_s).sub('{' + 'pInstanceId' + '}', p_instance_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'activeOnly'] = opts[:'active_only'] if !opts[:'active_only'].nil?
      query_params[:'completedOnly'] = opts[:'completed_only'] if !opts[:'completed_only'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'pageSize'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'NodeInstanceList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProcessInstancesBPMApi#get_process_instance_history_by_container_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves process instances that belong to given container and have given parent process instance, optionally allow to filter by process instance state.
    # 
    # @param id container id that process instance belongs to
    # @param p_instance_id identifier of the parent process instance that process instances should be collected for
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Integer>] :status optional process instance status (active, completed, aborted) - defaults ot active (1) only
    # @option opts [Integer] :page optional pagination - at which page to start, defaults to 0 (meaning first) (default to 0)
    # @option opts [Integer] :page_size optional pagination - size of the result, defaults to 10 (default to 10)
    # @option opts [String] :sort optional sort column, no default
    # @option opts [BOOLEAN] :sort_order optional sort direction (asc, desc) - defaults to asc (default to true)
    # @return [ProcessInstanceList]
    def get_process_instance_processes(id, p_instance_id, opts = {})
      data, _status_code, _headers = get_process_instance_processes_with_http_info(id, p_instance_id, opts)
      return data
    end

    # Retrieves process instances that belong to given container and have given parent process instance, optionally allow to filter by process instance state.
    # 
    # @param id container id that process instance belongs to
    # @param p_instance_id identifier of the parent process instance that process instances should be collected for
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Integer>] :status optional process instance status (active, completed, aborted) - defaults ot active (1) only
    # @option opts [Integer] :page optional pagination - at which page to start, defaults to 0 (meaning first)
    # @option opts [Integer] :page_size optional pagination - size of the result, defaults to 10
    # @option opts [String] :sort optional sort column, no default
    # @option opts [BOOLEAN] :sort_order optional sort direction (asc, desc) - defaults to asc
    # @return [Array<(ProcessInstanceList, Fixnum, Hash)>] ProcessInstanceList data, response status code and response headers
    def get_process_instance_processes_with_http_info(id, p_instance_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ProcessInstancesBPMApi.get_process_instance_processes ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ProcessInstancesBPMApi.get_process_instance_processes"
      end
      # verify the required parameter 'p_instance_id' is set
      if @api_client.config.client_side_validation && p_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'p_instance_id' when calling ProcessInstancesBPMApi.get_process_instance_processes"
      end
      if @api_client.config.client_side_validation && opts[:'status'] && !opts[:'status'].all?{|item| ['1', '2', '3'].include?(item)}
        fail ArgumentError, 'invalid value for "status", must include one of 1, 2, 3'
      end
      # resource path
      local_var_path = "/server/containers/{id}/processes/instances/{pInstanceId}/processes".sub('{' + 'id' + '}', id.to_s).sub('{' + 'pInstanceId' + '}', p_instance_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'status'] = @api_client.build_collection_param(opts[:'status'], :multi) if !opts[:'status'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'pageSize'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'sortOrder'] = opts[:'sort_order'] if !opts[:'sort_order'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ProcessInstanceList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProcessInstancesBPMApi#get_process_instance_processes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves active process instance's (identified by given id) variable given as variable name
    # 
    # @param id container id that process instance belongs to
    # @param p_instance_id identifier of the process instance that variable should be retrieved from
    # @param var_name variable name to be retrieved
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def get_process_instance_variable(id, p_instance_id, var_name, opts = {})
      data, _status_code, _headers = get_process_instance_variable_with_http_info(id, p_instance_id, var_name, opts)
      return data
    end

    # Retrieves active process instance&#39;s (identified by given id) variable given as variable name
    # 
    # @param id container id that process instance belongs to
    # @param p_instance_id identifier of the process instance that variable should be retrieved from
    # @param var_name variable name to be retrieved
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Fixnum, Hash)>] Object data, response status code and response headers
    def get_process_instance_variable_with_http_info(id, p_instance_id, var_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ProcessInstancesBPMApi.get_process_instance_variable ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ProcessInstancesBPMApi.get_process_instance_variable"
      end
      # verify the required parameter 'p_instance_id' is set
      if @api_client.config.client_side_validation && p_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'p_instance_id' when calling ProcessInstancesBPMApi.get_process_instance_variable"
      end
      # verify the required parameter 'var_name' is set
      if @api_client.config.client_side_validation && var_name.nil?
        fail ArgumentError, "Missing the required parameter 'var_name' when calling ProcessInstancesBPMApi.get_process_instance_variable"
      end
      # resource path
      local_var_path = "/server/containers/{id}/processes/instances/{pInstanceId}/variable/{varName}".sub('{' + 'id' + '}', id.to_s).sub('{' + 'pInstanceId' + '}', p_instance_id.to_s).sub('{' + 'varName' + '}', var_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Object')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProcessInstancesBPMApi#get_process_instance_variable\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves active process instance's (identified by given id) variables, variables are returned as map where key is the variable name (string) and value is variable value (any type)
    # 
    # @param id container id that process instance belongs to
    # @param p_instance_id identifier of the process instance that variables should be retrieved from
    # @param [Hash] opts the optional parameters
    # @return [Hash<String, Object>]
    def get_process_instance_variables(id, p_instance_id, opts = {})
      data, _status_code, _headers = get_process_instance_variables_with_http_info(id, p_instance_id, opts)
      return data
    end

    # Retrieves active process instance&#39;s (identified by given id) variables, variables are returned as map where key is the variable name (string) and value is variable value (any type)
    # 
    # @param id container id that process instance belongs to
    # @param p_instance_id identifier of the process instance that variables should be retrieved from
    # @param [Hash] opts the optional parameters
    # @return [Array<(Hash<String, Object>, Fixnum, Hash)>] Hash<String, Object> data, response status code and response headers
    def get_process_instance_variables_with_http_info(id, p_instance_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ProcessInstancesBPMApi.get_process_instance_variables ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ProcessInstancesBPMApi.get_process_instance_variables"
      end
      # verify the required parameter 'p_instance_id' is set
      if @api_client.config.client_side_validation && p_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'p_instance_id' when calling ProcessInstancesBPMApi.get_process_instance_variables"
      end
      # resource path
      local_var_path = "/server/containers/{id}/processes/instances/{pInstanceId}/variables".sub('{' + 'id' + '}', id.to_s).sub('{' + 'pInstanceId' + '}', p_instance_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Hash<String, Object>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProcessInstancesBPMApi#get_process_instance_variables\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves process instances that belong to given container
    # 
    # @param id container id that process instance belongs to
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Integer>] :status optional process instance status (active, completed, aborted) - defaults ot active (1) only
    # @option opts [Integer] :page optional pagination - at which page to start, defaults to 0 (meaning first) (default to 0)
    # @option opts [Integer] :page_size optional pagination - size of the result, defaults to 10 (default to 10)
    # @option opts [String] :sort optional sort column, no default
    # @option opts [BOOLEAN] :sort_order optional sort direction (asc, desc) - defaults to asc (default to true)
    # @return [ProcessInstanceList]
    def get_process_instances_by_container_id(id, opts = {})
      data, _status_code, _headers = get_process_instances_by_container_id_with_http_info(id, opts)
      return data
    end

    # Retrieves process instances that belong to given container
    # 
    # @param id container id that process instance belongs to
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Integer>] :status optional process instance status (active, completed, aborted) - defaults ot active (1) only
    # @option opts [Integer] :page optional pagination - at which page to start, defaults to 0 (meaning first)
    # @option opts [Integer] :page_size optional pagination - size of the result, defaults to 10
    # @option opts [String] :sort optional sort column, no default
    # @option opts [BOOLEAN] :sort_order optional sort direction (asc, desc) - defaults to asc
    # @return [Array<(ProcessInstanceList, Fixnum, Hash)>] ProcessInstanceList data, response status code and response headers
    def get_process_instances_by_container_id_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ProcessInstancesBPMApi.get_process_instances_by_container_id ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ProcessInstancesBPMApi.get_process_instances_by_container_id"
      end
      if @api_client.config.client_side_validation && opts[:'status'] && !opts[:'status'].all?{|item| ['1', '2', '3'].include?(item)}
        fail ArgumentError, 'invalid value for "status", must include one of 1, 2, 3'
      end
      # resource path
      local_var_path = "/server/containers/{id}/processes/instances".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'status'] = @api_client.build_collection_param(opts[:'status'], :multi) if !opts[:'status'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'pageSize'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'sortOrder'] = opts[:'sort_order'] if !opts[:'sort_order'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ProcessInstanceList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProcessInstancesBPMApi#get_process_instances_by_container_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves process definitions that belong to given container
    # 
    # @param id container id that process instance belongs to
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page optional pagination - at which page to start, defaults to 0 (meaning first) (default to 0)
    # @option opts [Integer] :page_size optional pagination - size of the result, defaults to 10 (default to 10)
    # @option opts [String] :sort optional sort column, no default
    # @option opts [BOOLEAN] :sort_order optional sort direction (asc, desc) - defaults to asc (default to true)
    # @return [ProcessDefinitions]
    def get_processes_by_deployment_id(id, opts = {})
      data, _status_code, _headers = get_processes_by_deployment_id_with_http_info(id, opts)
      return data
    end

    # Retrieves process definitions that belong to given container
    # 
    # @param id container id that process instance belongs to
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page optional pagination - at which page to start, defaults to 0 (meaning first)
    # @option opts [Integer] :page_size optional pagination - size of the result, defaults to 10
    # @option opts [String] :sort optional sort column, no default
    # @option opts [BOOLEAN] :sort_order optional sort direction (asc, desc) - defaults to asc
    # @return [Array<(ProcessDefinitions, Fixnum, Hash)>] ProcessDefinitions data, response status code and response headers
    def get_processes_by_deployment_id_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ProcessInstancesBPMApi.get_processes_by_deployment_id ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ProcessInstancesBPMApi.get_processes_by_deployment_id"
      end
      # resource path
      local_var_path = "/server/containers/{id}/processes".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'pageSize'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'sortOrder'] = opts[:'sort_order'] if !opts[:'sort_order'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ProcessDefinitions')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProcessInstancesBPMApi#get_processes_by_deployment_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves variable history (from audit logs) for given variable name that belongs to process instance
    # 
    # @param id container id that process instance belongs to
    # @param p_instance_id identifier of the process instance that variable history should be collected for
    # @param var_name name of the variables that history should be collected for
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page optional pagination - at which page to start, defaults to 0 (meaning first) (default to 0)
    # @option opts [Integer] :page_size optional pagination - size of the result, defaults to 10 (default to 10)
    # @return [VariableInstanceList]
    def get_variable_history(id, p_instance_id, var_name, opts = {})
      data, _status_code, _headers = get_variable_history_with_http_info(id, p_instance_id, var_name, opts)
      return data
    end

    # Retrieves variable history (from audit logs) for given variable name that belongs to process instance
    # 
    # @param id container id that process instance belongs to
    # @param p_instance_id identifier of the process instance that variable history should be collected for
    # @param var_name name of the variables that history should be collected for
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page optional pagination - at which page to start, defaults to 0 (meaning first)
    # @option opts [Integer] :page_size optional pagination - size of the result, defaults to 10
    # @return [Array<(VariableInstanceList, Fixnum, Hash)>] VariableInstanceList data, response status code and response headers
    def get_variable_history_with_http_info(id, p_instance_id, var_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ProcessInstancesBPMApi.get_variable_history ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ProcessInstancesBPMApi.get_variable_history"
      end
      # verify the required parameter 'p_instance_id' is set
      if @api_client.config.client_side_validation && p_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'p_instance_id' when calling ProcessInstancesBPMApi.get_variable_history"
      end
      # verify the required parameter 'var_name' is set
      if @api_client.config.client_side_validation && var_name.nil?
        fail ArgumentError, "Missing the required parameter 'var_name' when calling ProcessInstancesBPMApi.get_variable_history"
      end
      # resource path
      local_var_path = "/server/containers/{id}/processes/instances/{pInstanceId}/variables/instances/{varName}".sub('{' + 'id' + '}', id.to_s).sub('{' + 'pInstanceId' + '}', p_instance_id.to_s).sub('{' + 'varName' + '}', var_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'pageSize'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'VariableInstanceList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProcessInstancesBPMApi#get_variable_history\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves variables last value (from audit logs) for given process instance
    # 
    # @param id container id that process instance belongs to
    # @param p_instance_id identifier of the process instance that variables state should be collected for
    # @param [Hash] opts the optional parameters
    # @return [VariableInstanceList]
    def get_variables_current_state(id, p_instance_id, opts = {})
      data, _status_code, _headers = get_variables_current_state_with_http_info(id, p_instance_id, opts)
      return data
    end

    # Retrieves variables last value (from audit logs) for given process instance
    # 
    # @param id container id that process instance belongs to
    # @param p_instance_id identifier of the process instance that variables state should be collected for
    # @param [Hash] opts the optional parameters
    # @return [Array<(VariableInstanceList, Fixnum, Hash)>] VariableInstanceList data, response status code and response headers
    def get_variables_current_state_with_http_info(id, p_instance_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ProcessInstancesBPMApi.get_variables_current_state ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ProcessInstancesBPMApi.get_variables_current_state"
      end
      # verify the required parameter 'p_instance_id' is set
      if @api_client.config.client_side_validation && p_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'p_instance_id' when calling ProcessInstancesBPMApi.get_variables_current_state"
      end
      # resource path
      local_var_path = "/server/containers/{id}/processes/instances/{pInstanceId}/variables/instances".sub('{' + 'id' + '}', id.to_s).sub('{' + 'pInstanceId' + '}', p_instance_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'VariableInstanceList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProcessInstancesBPMApi#get_variables_current_state\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves work item identified by workItemId within process instance and container
    # 
    # @param id container id that process instance belongs to
    # @param p_instance_id identifier of the process instance that work item belongs to
    # @param work_item_id identifier of the work item to retrieve
    # @param [Hash] opts the optional parameters
    # @return [WorkItemInstance]
    def get_work_item(id, p_instance_id, work_item_id, opts = {})
      data, _status_code, _headers = get_work_item_with_http_info(id, p_instance_id, work_item_id, opts)
      return data
    end

    # Retrieves work item identified by workItemId within process instance and container
    # 
    # @param id container id that process instance belongs to
    # @param p_instance_id identifier of the process instance that work item belongs to
    # @param work_item_id identifier of the work item to retrieve
    # @param [Hash] opts the optional parameters
    # @return [Array<(WorkItemInstance, Fixnum, Hash)>] WorkItemInstance data, response status code and response headers
    def get_work_item_with_http_info(id, p_instance_id, work_item_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ProcessInstancesBPMApi.get_work_item ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ProcessInstancesBPMApi.get_work_item"
      end
      # verify the required parameter 'p_instance_id' is set
      if @api_client.config.client_side_validation && p_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'p_instance_id' when calling ProcessInstancesBPMApi.get_work_item"
      end
      # verify the required parameter 'work_item_id' is set
      if @api_client.config.client_side_validation && work_item_id.nil?
        fail ArgumentError, "Missing the required parameter 'work_item_id' when calling ProcessInstancesBPMApi.get_work_item"
      end
      # resource path
      local_var_path = "/server/containers/{id}/processes/instances/{pInstanceId}/workitems/{workItemId}".sub('{' + 'id' + '}', id.to_s).sub('{' + 'pInstanceId' + '}', p_instance_id.to_s).sub('{' + 'workItemId' + '}', work_item_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'WorkItemInstance')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProcessInstancesBPMApi#get_work_item\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves work items within process instance and container
    # 
    # @param id container id that process instance belongs to
    # @param p_instance_id identifier of the process instance that work items belong to
    # @param [Hash] opts the optional parameters
    # @return [WorkItemInstanceList]
    def get_work_item_by_process_instance(id, p_instance_id, opts = {})
      data, _status_code, _headers = get_work_item_by_process_instance_with_http_info(id, p_instance_id, opts)
      return data
    end

    # Retrieves work items within process instance and container
    # 
    # @param id container id that process instance belongs to
    # @param p_instance_id identifier of the process instance that work items belong to
    # @param [Hash] opts the optional parameters
    # @return [Array<(WorkItemInstanceList, Fixnum, Hash)>] WorkItemInstanceList data, response status code and response headers
    def get_work_item_by_process_instance_with_http_info(id, p_instance_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ProcessInstancesBPMApi.get_work_item_by_process_instance ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ProcessInstancesBPMApi.get_work_item_by_process_instance"
      end
      # verify the required parameter 'p_instance_id' is set
      if @api_client.config.client_side_validation && p_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'p_instance_id' when calling ProcessInstancesBPMApi.get_work_item_by_process_instance"
      end
      # resource path
      local_var_path = "/server/containers/{id}/processes/instances/{pInstanceId}/workitems".sub('{' + 'id' + '}', id.to_s).sub('{' + 'pInstanceId' + '}', p_instance_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'WorkItemInstanceList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProcessInstancesBPMApi#get_work_item_by_process_instance\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Updates active process instance's (identified by given id) variable with given name
    # 
    # @param id container id that process instance belongs to
    # @param p_instance_id identifier of the process instance to be updated
    # @param var_name name of the variable to be set/updated
    # @param body variable data - any type can be provided
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def set_process_variable(id, p_instance_id, var_name, body, opts = {})
      set_process_variable_with_http_info(id, p_instance_id, var_name, body, opts)
      return nil
    end

    # Updates active process instance&#39;s (identified by given id) variable with given name
    # 
    # @param id container id that process instance belongs to
    # @param p_instance_id identifier of the process instance to be updated
    # @param var_name name of the variable to be set/updated
    # @param body variable data - any type can be provided
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def set_process_variable_with_http_info(id, p_instance_id, var_name, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ProcessInstancesBPMApi.set_process_variable ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ProcessInstancesBPMApi.set_process_variable"
      end
      # verify the required parameter 'p_instance_id' is set
      if @api_client.config.client_side_validation && p_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'p_instance_id' when calling ProcessInstancesBPMApi.set_process_variable"
      end
      # verify the required parameter 'var_name' is set
      if @api_client.config.client_side_validation && var_name.nil?
        fail ArgumentError, "Missing the required parameter 'var_name' when calling ProcessInstancesBPMApi.set_process_variable"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ProcessInstancesBPMApi.set_process_variable"
      end
      # resource path
      local_var_path = "/server/containers/{id}/processes/instances/{pInstanceId}/variable/{varName}".sub('{' + 'id' + '}', id.to_s).sub('{' + 'pInstanceId' + '}', p_instance_id.to_s).sub('{' + 'varName' + '}', var_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml', 'application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/xml', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProcessInstancesBPMApi#set_process_variable\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Updates active process instance's (identified by given id) variables given as map in the body
    # 
    # @param id container id that process instance belongs to
    # @param p_instance_id identifier of the process instance to be updated
    # @param body variable data give as map
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def set_process_variables(id, p_instance_id, body, opts = {})
      set_process_variables_with_http_info(id, p_instance_id, body, opts)
      return nil
    end

    # Updates active process instance&#39;s (identified by given id) variables given as map in the body
    # 
    # @param id container id that process instance belongs to
    # @param p_instance_id identifier of the process instance to be updated
    # @param body variable data give as map
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def set_process_variables_with_http_info(id, p_instance_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ProcessInstancesBPMApi.set_process_variables ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ProcessInstancesBPMApi.set_process_variables"
      end
      # verify the required parameter 'p_instance_id' is set
      if @api_client.config.client_side_validation && p_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'p_instance_id' when calling ProcessInstancesBPMApi.set_process_variables"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ProcessInstancesBPMApi.set_process_variables"
      end
      # resource path
      local_var_path = "/server/containers/{id}/processes/instances/{pInstanceId}/variables".sub('{' + 'id' + '}', id.to_s).sub('{' + 'pInstanceId' + '}', p_instance_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml', 'application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/xml', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProcessInstancesBPMApi#set_process_variables\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Signals active process instance identified by given id with singal name and optional event data
    # 
    # @param id container id that process instance belongs to
    # @param p_instance_id identifier of the process instance to be signaled
    # @param s_name signal name to be send to process instance
    # @param [Hash] opts the optional parameters
    # @option opts [String] :body optional event data - any type can be provided
    # @return [nil]
    def signal_process_instance(id, p_instance_id, s_name, opts = {})
      signal_process_instance_with_http_info(id, p_instance_id, s_name, opts)
      return nil
    end

    # Signals active process instance identified by given id with singal name and optional event data
    # 
    # @param id container id that process instance belongs to
    # @param p_instance_id identifier of the process instance to be signaled
    # @param s_name signal name to be send to process instance
    # @param [Hash] opts the optional parameters
    # @option opts [String] :body optional event data - any type can be provided
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def signal_process_instance_with_http_info(id, p_instance_id, s_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ProcessInstancesBPMApi.signal_process_instance ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ProcessInstancesBPMApi.signal_process_instance"
      end
      # verify the required parameter 'p_instance_id' is set
      if @api_client.config.client_side_validation && p_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'p_instance_id' when calling ProcessInstancesBPMApi.signal_process_instance"
      end
      # verify the required parameter 's_name' is set
      if @api_client.config.client_side_validation && s_name.nil?
        fail ArgumentError, "Missing the required parameter 's_name' when calling ProcessInstancesBPMApi.signal_process_instance"
      end
      # resource path
      local_var_path = "/server/containers/{id}/processes/instances/{pInstanceId}/signal/{sName}".sub('{' + 'id' + '}', id.to_s).sub('{' + 'pInstanceId' + '}', p_instance_id.to_s).sub('{' + 'sName' + '}', s_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml', 'application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/xml', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProcessInstancesBPMApi#signal_process_instance\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Signals active process instances identified by given ids with singal name and optional event data
    # 
    # @param id container id that process instance belongs to
    # @param instance_id list of identifiers of the process instances to be signaled
    # @param s_name signal name to be send to process instance
    # @param [Hash] opts the optional parameters
    # @option opts [String] :body optional event data - any type can be provided
    # @return [nil]
    def signal_process_instances(id, instance_id, s_name, opts = {})
      signal_process_instances_with_http_info(id, instance_id, s_name, opts)
      return nil
    end

    # Signals active process instances identified by given ids with singal name and optional event data
    # 
    # @param id container id that process instance belongs to
    # @param instance_id list of identifiers of the process instances to be signaled
    # @param s_name signal name to be send to process instance
    # @param [Hash] opts the optional parameters
    # @option opts [String] :body optional event data - any type can be provided
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def signal_process_instances_with_http_info(id, instance_id, s_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ProcessInstancesBPMApi.signal_process_instances ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ProcessInstancesBPMApi.signal_process_instances"
      end
      # verify the required parameter 'instance_id' is set
      if @api_client.config.client_side_validation && instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'instance_id' when calling ProcessInstancesBPMApi.signal_process_instances"
      end
      # verify the required parameter 's_name' is set
      if @api_client.config.client_side_validation && s_name.nil?
        fail ArgumentError, "Missing the required parameter 's_name' when calling ProcessInstancesBPMApi.signal_process_instances"
      end
      # resource path
      local_var_path = "/server/containers/{id}/processes/instances/signal/{sName}".sub('{' + 'id' + '}', id.to_s).sub('{' + 'sName' + '}', s_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'instanceId'] = @api_client.build_collection_param(instance_id, :multi)

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml', 'application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/xml', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProcessInstancesBPMApi#signal_process_instances\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Starts new process instance of given process definition within given container with optional variables
    # 
    # @param id container id where the process definition resides
    # @param p_id process id that new instance should be created from
    # @param [Hash] opts the optional parameters
    # @option opts [String] :body optional map of process variables
    # @return [Integer]
    def start_process(id, p_id, opts = {})
      data, _status_code, _headers = start_process_with_http_info(id, p_id, opts)
      return data
    end

    # Starts new process instance of given process definition within given container with optional variables
    # 
    # @param id container id where the process definition resides
    # @param p_id process id that new instance should be created from
    # @param [Hash] opts the optional parameters
    # @option opts [String] :body optional map of process variables
    # @return [Array<(Integer, Fixnum, Hash)>] Integer data, response status code and response headers
    def start_process_with_http_info(id, p_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ProcessInstancesBPMApi.start_process ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ProcessInstancesBPMApi.start_process"
      end
      # verify the required parameter 'p_id' is set
      if @api_client.config.client_side_validation && p_id.nil?
        fail ArgumentError, "Missing the required parameter 'p_id' when calling ProcessInstancesBPMApi.start_process"
      end
      # resource path
      local_var_path = "/server/containers/{id}/processes/{pId}/instances".sub('{' + 'id' + '}', id.to_s).sub('{' + 'pId' + '}', p_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml', 'application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/xml', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Integer')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProcessInstancesBPMApi#start_process\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Starts new process instance with correlation key of given process definition within given container with optional variables
    # 
    # @param id container id where the process definition resides
    # @param p_id process id that new instance should be created from
    # @param correlation_key correlation key to be assigned to process instance
    # @param [Hash] opts the optional parameters
    # @option opts [String] :body optional map of process variables
    # @return [Integer]
    def start_process_with_correlation(id, p_id, correlation_key, opts = {})
      data, _status_code, _headers = start_process_with_correlation_with_http_info(id, p_id, correlation_key, opts)
      return data
    end

    # Starts new process instance with correlation key of given process definition within given container with optional variables
    # 
    # @param id container id where the process definition resides
    # @param p_id process id that new instance should be created from
    # @param correlation_key correlation key to be assigned to process instance
    # @param [Hash] opts the optional parameters
    # @option opts [String] :body optional map of process variables
    # @return [Array<(Integer, Fixnum, Hash)>] Integer data, response status code and response headers
    def start_process_with_correlation_with_http_info(id, p_id, correlation_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ProcessInstancesBPMApi.start_process_with_correlation ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ProcessInstancesBPMApi.start_process_with_correlation"
      end
      # verify the required parameter 'p_id' is set
      if @api_client.config.client_side_validation && p_id.nil?
        fail ArgumentError, "Missing the required parameter 'p_id' when calling ProcessInstancesBPMApi.start_process_with_correlation"
      end
      # verify the required parameter 'correlation_key' is set
      if @api_client.config.client_side_validation && correlation_key.nil?
        fail ArgumentError, "Missing the required parameter 'correlation_key' when calling ProcessInstancesBPMApi.start_process_with_correlation"
      end
      # resource path
      local_var_path = "/server/containers/{id}/processes/{pId}/instances/correlation/{correlationKey}".sub('{' + 'id' + '}', id.to_s).sub('{' + 'pId' + '}', p_id.to_s).sub('{' + 'correlationKey' + '}', correlation_key.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml', 'application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/xml', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Integer')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProcessInstancesBPMApi#start_process_with_correlation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end

=begin
#jbpm

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 7.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1

=end

require "uri"

module JBPMAPIClient
  class QueriesCaseDefinitionsAndInstancesCaseManagementApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Retrieves case definitions with filtering by name or id of the case definition and applies pagination
    # 
    # @param filter case definition id or name that case definitions will be filtered by
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page optional pagination - at which page to start, defaults to 0 (meaning first) (default to 0)
    # @option opts [Integer] :page_size optional pagination - size of the result, defaults to 10 (default to 10)
    # @option opts [String] :sort optional sort column, no default
    # @option opts [BOOLEAN] :sort_order optional sort direction (asc, desc) - defaults to asc (default to true)
    # @return [CaseInstanceList]
    def get_case_definitions(filter, opts = {})
      data, _status_code, _headers = get_case_definitions_with_http_info(filter, opts)
      return data
    end

    # Retrieves case definitions with filtering by name or id of the case definition and applies pagination
    # 
    # @param filter case definition id or name that case definitions will be filtered by
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page optional pagination - at which page to start, defaults to 0 (meaning first)
    # @option opts [Integer] :page_size optional pagination - size of the result, defaults to 10
    # @option opts [String] :sort optional sort column, no default
    # @option opts [BOOLEAN] :sort_order optional sort direction (asc, desc) - defaults to asc
    # @return [Array<(CaseInstanceList, Fixnum, Hash)>] CaseInstanceList data, response status code and response headers
    def get_case_definitions_with_http_info(filter, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: QueriesCaseDefinitionsAndInstancesCaseManagementApi.get_case_definitions ..."
      end
      # verify the required parameter 'filter' is set
      if @api_client.config.client_side_validation && filter.nil?
        fail ArgumentError, "Missing the required parameter 'filter' when calling QueriesCaseDefinitionsAndInstancesCaseManagementApi.get_case_definitions"
      end
      # resource path
      local_var_path = "/server/queries/cases"

      # query parameters
      query_params = {}
      query_params[:'filter'] = filter
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'pageSize'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'sortOrder'] = opts[:'sort_order'] if !opts[:'sort_order'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['jbpm_auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CaseInstanceList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QueriesCaseDefinitionsAndInstancesCaseManagementApi#get_case_definitions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves case instance data items, allows to filter by name or type of data and applies pagination
    # 
    # @param case_id case instance identifier that data items should belong to
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :name optionally filter by data item names
    # @option opts [Array<String>] :type optionally filter by data item types
    # @option opts [Integer] :page optional pagination - at which page to start, defaults to 0 (meaning first) (default to 0)
    # @option opts [Integer] :page_size optional pagination - size of the result, defaults to 10 (default to 10)
    # @return [CaseInstanceList]
    def get_case_instance_data_items(case_id, opts = {})
      data, _status_code, _headers = get_case_instance_data_items_with_http_info(case_id, opts)
      return data
    end

    # Retrieves case instance data items, allows to filter by name or type of data and applies pagination
    # 
    # @param case_id case instance identifier that data items should belong to
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :name optionally filter by data item names
    # @option opts [Array<String>] :type optionally filter by data item types
    # @option opts [Integer] :page optional pagination - at which page to start, defaults to 0 (meaning first)
    # @option opts [Integer] :page_size optional pagination - size of the result, defaults to 10
    # @return [Array<(CaseInstanceList, Fixnum, Hash)>] CaseInstanceList data, response status code and response headers
    def get_case_instance_data_items_with_http_info(case_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: QueriesCaseDefinitionsAndInstancesCaseManagementApi.get_case_instance_data_items ..."
      end
      # verify the required parameter 'case_id' is set
      if @api_client.config.client_side_validation && case_id.nil?
        fail ArgumentError, "Missing the required parameter 'case_id' when calling QueriesCaseDefinitionsAndInstancesCaseManagementApi.get_case_instance_data_items"
      end
      # resource path
      local_var_path = "/server/queries/cases/instances/{caseId}/caseFile".sub('{' + 'caseId' + '}', case_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'name'] = @api_client.build_collection_param(opts[:'name'], :multi) if !opts[:'name'].nil?
      query_params[:'type'] = @api_client.build_collection_param(opts[:'type'], :multi) if !opts[:'type'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'pageSize'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CaseInstanceList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QueriesCaseDefinitionsAndInstancesCaseManagementApi#get_case_instance_data_items\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves case instance tasks assigned as business admin, allows to filter by task status and applies pagination
    # 
    # @param case_id case instance identifier that tasks should belong to
    # @param [Hash] opts the optional parameters
    # @option opts [String] :user optional user id to be used instead of authenticated user - only when bypass authenticated user is enabled
    # @option opts [Array<String>] :status optional task status (Created, Ready, Reserved, InProgress, Suspended, Completed, Failed, Error, Exited, Obsolete)
    # @option opts [Integer] :page optional pagination - at which page to start, defaults to 0 (meaning first) (default to 0)
    # @option opts [Integer] :page_size optional pagination - size of the result, defaults to 10 (default to 10)
    # @option opts [String] :sort optional sort column, no default
    # @option opts [BOOLEAN] :sort_order optional sort direction (asc, desc) - defaults to asc (default to true)
    # @return [CaseInstanceList]
    def get_case_instance_tasks_as_admin(case_id, opts = {})
      data, _status_code, _headers = get_case_instance_tasks_as_admin_with_http_info(case_id, opts)
      return data
    end

    # Retrieves case instance tasks assigned as business admin, allows to filter by task status and applies pagination
    # 
    # @param case_id case instance identifier that tasks should belong to
    # @param [Hash] opts the optional parameters
    # @option opts [String] :user optional user id to be used instead of authenticated user - only when bypass authenticated user is enabled
    # @option opts [Array<String>] :status optional task status (Created, Ready, Reserved, InProgress, Suspended, Completed, Failed, Error, Exited, Obsolete)
    # @option opts [Integer] :page optional pagination - at which page to start, defaults to 0 (meaning first)
    # @option opts [Integer] :page_size optional pagination - size of the result, defaults to 10
    # @option opts [String] :sort optional sort column, no default
    # @option opts [BOOLEAN] :sort_order optional sort direction (asc, desc) - defaults to asc
    # @return [Array<(CaseInstanceList, Fixnum, Hash)>] CaseInstanceList data, response status code and response headers
    def get_case_instance_tasks_as_admin_with_http_info(case_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: QueriesCaseDefinitionsAndInstancesCaseManagementApi.get_case_instance_tasks_as_admin ..."
      end
      # verify the required parameter 'case_id' is set
      if @api_client.config.client_side_validation && case_id.nil?
        fail ArgumentError, "Missing the required parameter 'case_id' when calling QueriesCaseDefinitionsAndInstancesCaseManagementApi.get_case_instance_tasks_as_admin"
      end
      if @api_client.config.client_side_validation && opts[:'status'] && !opts[:'status'].all?{|item| ['Created', 'Ready', 'Reserved', 'InProgress', 'Suspended', 'Completed', 'Failed', 'Error', 'Exited', 'Obsolete'].include?(item)}
        fail ArgumentError, 'invalid value for "status", must include one of Created, Ready, Reserved, InProgress, Suspended, Completed, Failed, Error, Exited, Obsolete'
      end
      # resource path
      local_var_path = "/server/queries/cases/instances/{caseId}/tasks/instances/admins".sub('{' + 'caseId' + '}', case_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'user'] = opts[:'user'] if !opts[:'user'].nil?
      query_params[:'status'] = @api_client.build_collection_param(opts[:'status'], :multi) if !opts[:'status'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'pageSize'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'sortOrder'] = opts[:'sort_order'] if !opts[:'sort_order'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CaseInstanceList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QueriesCaseDefinitionsAndInstancesCaseManagementApi#get_case_instance_tasks_as_admin\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves case instance tasks assigned as potential owner, allows to filter by task status and applies pagination
    # 
    # @param case_id case instance identifier that tasks should belong to
    # @param [Hash] opts the optional parameters
    # @option opts [String] :user optional user id to be used instead of authenticated user - only when bypass authenticated user is enabled
    # @option opts [Array<String>] :status optional task status (Created, Ready, Reserved, InProgress, Suspended, Completed, Failed, Error, Exited, Obsolete)
    # @option opts [Integer] :page optional pagination - at which page to start, defaults to 0 (meaning first) (default to 0)
    # @option opts [Integer] :page_size optional pagination - size of the result, defaults to 10 (default to 10)
    # @option opts [String] :sort optional sort column, no default
    # @option opts [BOOLEAN] :sort_order optional sort direction (asc, desc) - defaults to asc (default to true)
    # @return [CaseInstanceList]
    def get_case_instance_tasks_as_potential_owner(case_id, opts = {})
      data, _status_code, _headers = get_case_instance_tasks_as_potential_owner_with_http_info(case_id, opts)
      return data
    end

    # Retrieves case instance tasks assigned as potential owner, allows to filter by task status and applies pagination
    # 
    # @param case_id case instance identifier that tasks should belong to
    # @param [Hash] opts the optional parameters
    # @option opts [String] :user optional user id to be used instead of authenticated user - only when bypass authenticated user is enabled
    # @option opts [Array<String>] :status optional task status (Created, Ready, Reserved, InProgress, Suspended, Completed, Failed, Error, Exited, Obsolete)
    # @option opts [Integer] :page optional pagination - at which page to start, defaults to 0 (meaning first)
    # @option opts [Integer] :page_size optional pagination - size of the result, defaults to 10
    # @option opts [String] :sort optional sort column, no default
    # @option opts [BOOLEAN] :sort_order optional sort direction (asc, desc) - defaults to asc
    # @return [Array<(CaseInstanceList, Fixnum, Hash)>] CaseInstanceList data, response status code and response headers
    def get_case_instance_tasks_as_potential_owner_with_http_info(case_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: QueriesCaseDefinitionsAndInstancesCaseManagementApi.get_case_instance_tasks_as_potential_owner ..."
      end
      # verify the required parameter 'case_id' is set
      if @api_client.config.client_side_validation && case_id.nil?
        fail ArgumentError, "Missing the required parameter 'case_id' when calling QueriesCaseDefinitionsAndInstancesCaseManagementApi.get_case_instance_tasks_as_potential_owner"
      end
      if @api_client.config.client_side_validation && opts[:'status'] && !opts[:'status'].all?{|item| ['Created', 'Ready', 'Reserved', 'InProgress', 'Suspended', 'Completed', 'Failed', 'Error', 'Exited', 'Obsolete'].include?(item)}
        fail ArgumentError, 'invalid value for "status", must include one of Created, Ready, Reserved, InProgress, Suspended, Completed, Failed, Error, Exited, Obsolete'
      end
      # resource path
      local_var_path = "/server/queries/cases/instances/{caseId}/tasks/instances/pot-owners".sub('{' + 'caseId' + '}', case_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'user'] = opts[:'user'] if !opts[:'user'].nil?
      query_params[:'status'] = @api_client.build_collection_param(opts[:'status'], :multi) if !opts[:'status'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'pageSize'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'sortOrder'] = opts[:'sort_order'] if !opts[:'sort_order'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CaseInstanceList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QueriesCaseDefinitionsAndInstancesCaseManagementApi#get_case_instance_tasks_as_potential_owner\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves case instance tasks assigned as stakeholder, allows to filter by task status and applies pagination
    # 
    # @param case_id case instance identifier that tasks should belong to
    # @param [Hash] opts the optional parameters
    # @option opts [String] :user optional user id to be used instead of authenticated user - only when bypass authenticated user is enabled
    # @option opts [Array<String>] :status optional task status (Created, Ready, Reserved, InProgress, Suspended, Completed, Failed, Error, Exited, Obsolete)
    # @option opts [Integer] :page optional pagination - at which page to start, defaults to 0 (meaning first) (default to 0)
    # @option opts [Integer] :page_size optional pagination - size of the result, defaults to 10 (default to 10)
    # @option opts [String] :sort optional sort column, no default
    # @option opts [BOOLEAN] :sort_order optional sort direction (asc, desc) - defaults to asc (default to true)
    # @return [CaseInstanceList]
    def get_case_instance_tasks_as_stakeholder(case_id, opts = {})
      data, _status_code, _headers = get_case_instance_tasks_as_stakeholder_with_http_info(case_id, opts)
      return data
    end

    # Retrieves case instance tasks assigned as stakeholder, allows to filter by task status and applies pagination
    # 
    # @param case_id case instance identifier that tasks should belong to
    # @param [Hash] opts the optional parameters
    # @option opts [String] :user optional user id to be used instead of authenticated user - only when bypass authenticated user is enabled
    # @option opts [Array<String>] :status optional task status (Created, Ready, Reserved, InProgress, Suspended, Completed, Failed, Error, Exited, Obsolete)
    # @option opts [Integer] :page optional pagination - at which page to start, defaults to 0 (meaning first)
    # @option opts [Integer] :page_size optional pagination - size of the result, defaults to 10
    # @option opts [String] :sort optional sort column, no default
    # @option opts [BOOLEAN] :sort_order optional sort direction (asc, desc) - defaults to asc
    # @return [Array<(CaseInstanceList, Fixnum, Hash)>] CaseInstanceList data, response status code and response headers
    def get_case_instance_tasks_as_stakeholder_with_http_info(case_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: QueriesCaseDefinitionsAndInstancesCaseManagementApi.get_case_instance_tasks_as_stakeholder ..."
      end
      # verify the required parameter 'case_id' is set
      if @api_client.config.client_side_validation && case_id.nil?
        fail ArgumentError, "Missing the required parameter 'case_id' when calling QueriesCaseDefinitionsAndInstancesCaseManagementApi.get_case_instance_tasks_as_stakeholder"
      end
      if @api_client.config.client_side_validation && opts[:'status'] && !opts[:'status'].all?{|item| ['Created', 'Ready', 'Reserved', 'InProgress', 'Suspended', 'Completed', 'Failed', 'Error', 'Exited', 'Obsolete'].include?(item)}
        fail ArgumentError, 'invalid value for "status", must include one of Created, Ready, Reserved, InProgress, Suspended, Completed, Failed, Error, Exited, Obsolete'
      end
      # resource path
      local_var_path = "/server/queries/cases/instances/{caseId}/tasks/instances/stakeholders".sub('{' + 'caseId' + '}', case_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'user'] = opts[:'user'] if !opts[:'user'].nil?
      query_params[:'status'] = @api_client.build_collection_param(opts[:'status'], :multi) if !opts[:'status'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'pageSize'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'sortOrder'] = opts[:'sort_order'] if !opts[:'sort_order'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CaseInstanceList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QueriesCaseDefinitionsAndInstancesCaseManagementApi#get_case_instance_tasks_as_stakeholder\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves case instances with authentication checks and applies pagination, allows to filter by data (case file) name and value, owner and case instance status
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :data_item_name data item name that case instances will be filtered by
    # @option opts [String] :data_item_value data item value that case instances will be filtered by
    # @option opts [String] :owner case instance owner that case instances will be filtered by
    # @option opts [Array<String>] :status optional case instance status (open, closed, canceled) - defaults ot open (1) only
    # @option opts [Integer] :page optional pagination - at which page to start, defaults to 0 (meaning first) (default to 0)
    # @option opts [Integer] :page_size optional pagination - size of the result, defaults to 10 (default to 10)
    # @option opts [String] :sort optional sort column, no default
    # @option opts [BOOLEAN] :sort_order optional sort direction (asc, desc) - defaults to asc (default to true)
    # @return [CaseInstanceList]
    def get_case_instances(opts = {})
      data, _status_code, _headers = get_case_instances_with_http_info(opts)
      return data
    end

    # Retrieves case instances with authentication checks and applies pagination, allows to filter by data (case file) name and value, owner and case instance status
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :data_item_name data item name that case instances will be filtered by
    # @option opts [String] :data_item_value data item value that case instances will be filtered by
    # @option opts [String] :owner case instance owner that case instances will be filtered by
    # @option opts [Array<String>] :status optional case instance status (open, closed, canceled) - defaults ot open (1) only
    # @option opts [Integer] :page optional pagination - at which page to start, defaults to 0 (meaning first)
    # @option opts [Integer] :page_size optional pagination - size of the result, defaults to 10
    # @option opts [String] :sort optional sort column, no default
    # @option opts [BOOLEAN] :sort_order optional sort direction (asc, desc) - defaults to asc
    # @return [Array<(CaseInstanceList, Fixnum, Hash)>] CaseInstanceList data, response status code and response headers
    def get_case_instances_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: QueriesCaseDefinitionsAndInstancesCaseManagementApi.get_case_instances ..."
      end
      if @api_client.config.client_side_validation && opts[:'status'] && !opts[:'status'].all?{|item| ['open', 'closed', 'cancelled'].include?(item)}
        fail ArgumentError, 'invalid value for "status", must include one of open, closed, cancelled'
      end
      # resource path
      local_var_path = "/server/queries/cases/instances"

      # query parameters
      query_params = {}
      query_params[:'dataItemName'] = opts[:'data_item_name'] if !opts[:'data_item_name'].nil?
      query_params[:'dataItemValue'] = opts[:'data_item_value'] if !opts[:'data_item_value'].nil?
      query_params[:'owner'] = opts[:'owner'] if !opts[:'owner'].nil?
      query_params[:'status'] = @api_client.build_collection_param(opts[:'status'], :multi) if !opts[:'status'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'pageSize'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'sortOrder'] = opts[:'sort_order'] if !opts[:'sort_order'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['jbpm_auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CaseInstanceList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QueriesCaseDefinitionsAndInstancesCaseManagementApi#get_case_instances\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves case instances where user is involved in given role and applies pagination, allows to filter by case instance status
    # 
    # @param case_role_name case role that instances should be found for
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :status optional case instance status (open, closed, canceled) - defaults ot open (1) only
    # @option opts [Integer] :page optional pagination - at which page to start, defaults to 0 (meaning first) (default to 0)
    # @option opts [Integer] :page_size optional pagination - size of the result, defaults to 10 (default to 10)
    # @option opts [String] :sort optional sort column, no default
    # @option opts [BOOLEAN] :sort_order optional sort direction (asc, desc) - defaults to asc (default to true)
    # @return [CaseInstanceList]
    def get_case_instances_by_role(case_role_name, opts = {})
      data, _status_code, _headers = get_case_instances_by_role_with_http_info(case_role_name, opts)
      return data
    end

    # Retrieves case instances where user is involved in given role and applies pagination, allows to filter by case instance status
    # 
    # @param case_role_name case role that instances should be found for
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :status optional case instance status (open, closed, canceled) - defaults ot open (1) only
    # @option opts [Integer] :page optional pagination - at which page to start, defaults to 0 (meaning first)
    # @option opts [Integer] :page_size optional pagination - size of the result, defaults to 10
    # @option opts [String] :sort optional sort column, no default
    # @option opts [BOOLEAN] :sort_order optional sort direction (asc, desc) - defaults to asc
    # @return [Array<(CaseInstanceList, Fixnum, Hash)>] CaseInstanceList data, response status code and response headers
    def get_case_instances_by_role_with_http_info(case_role_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: QueriesCaseDefinitionsAndInstancesCaseManagementApi.get_case_instances_by_role ..."
      end
      # verify the required parameter 'case_role_name' is set
      if @api_client.config.client_side_validation && case_role_name.nil?
        fail ArgumentError, "Missing the required parameter 'case_role_name' when calling QueriesCaseDefinitionsAndInstancesCaseManagementApi.get_case_instances_by_role"
      end
      if @api_client.config.client_side_validation && opts[:'status'] && !opts[:'status'].all?{|item| ['open', 'closed', 'cancelled'].include?(item)}
        fail ArgumentError, 'invalid value for "status", must include one of open, closed, cancelled'
      end
      # resource path
      local_var_path = "/server/queries/cases/{caseRoleName}/instances".sub('{' + 'caseRoleName' + '}', case_role_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'status'] = @api_client.build_collection_param(opts[:'status'], :multi) if !opts[:'status'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'pageSize'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'sortOrder'] = opts[:'sort_order'] if !opts[:'sort_order'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CaseInstanceList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QueriesCaseDefinitionsAndInstancesCaseManagementApi#get_case_instances_by_role\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves process definitions with filtering by name or id of the process definition and applies pagination
    # 
    # @param filter process definition id or name that process definitions will be filtered by
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page optional pagination - at which page to start, defaults to 0 (meaning first) (default to 0)
    # @option opts [Integer] :page_size optional pagination - size of the result, defaults to 10 (default to 10)
    # @option opts [String] :sort optional sort column, no default
    # @option opts [BOOLEAN] :sort_order optional sort direction (asc, desc) - defaults to asc (default to true)
    # @return [CaseInstanceList]
    def get_process_definitions(filter, opts = {})
      data, _status_code, _headers = get_process_definitions_with_http_info(filter, opts)
      return data
    end

    # Retrieves process definitions with filtering by name or id of the process definition and applies pagination
    # 
    # @param filter process definition id or name that process definitions will be filtered by
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page optional pagination - at which page to start, defaults to 0 (meaning first)
    # @option opts [Integer] :page_size optional pagination - size of the result, defaults to 10
    # @option opts [String] :sort optional sort column, no default
    # @option opts [BOOLEAN] :sort_order optional sort direction (asc, desc) - defaults to asc
    # @return [Array<(CaseInstanceList, Fixnum, Hash)>] CaseInstanceList data, response status code and response headers
    def get_process_definitions_with_http_info(filter, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: QueriesCaseDefinitionsAndInstancesCaseManagementApi.get_process_definitions ..."
      end
      # verify the required parameter 'filter' is set
      if @api_client.config.client_side_validation && filter.nil?
        fail ArgumentError, "Missing the required parameter 'filter' when calling QueriesCaseDefinitionsAndInstancesCaseManagementApi.get_process_definitions"
      end
      # resource path
      local_var_path = "/server/queries/cases/processes"

      # query parameters
      query_params = {}
      query_params[:'filter'] = filter
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'pageSize'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'sortOrder'] = opts[:'sort_order'] if !opts[:'sort_order'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CaseInstanceList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QueriesCaseDefinitionsAndInstancesCaseManagementApi#get_process_definitions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves process definitions that belong to given container and applies pagination
    # 
    # @param id container id that process definitions should be filtered by
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page optional pagination - at which page to start, defaults to 0 (meaning first) (default to 0)
    # @option opts [Integer] :page_size optional pagination - size of the result, defaults to 10 (default to 10)
    # @option opts [String] :sort optional sort column, no default
    # @option opts [BOOLEAN] :sort_order optional sort direction (asc, desc) - defaults to asc (default to true)
    # @return [CaseInstanceList]
    def get_process_definitions_by_container(id, opts = {})
      data, _status_code, _headers = get_process_definitions_by_container_with_http_info(id, opts)
      return data
    end

    # Retrieves process definitions that belong to given container and applies pagination
    # 
    # @param id container id that process definitions should be filtered by
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page optional pagination - at which page to start, defaults to 0 (meaning first)
    # @option opts [Integer] :page_size optional pagination - size of the result, defaults to 10
    # @option opts [String] :sort optional sort column, no default
    # @option opts [BOOLEAN] :sort_order optional sort direction (asc, desc) - defaults to asc
    # @return [Array<(CaseInstanceList, Fixnum, Hash)>] CaseInstanceList data, response status code and response headers
    def get_process_definitions_by_container_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: QueriesCaseDefinitionsAndInstancesCaseManagementApi.get_process_definitions_by_container ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling QueriesCaseDefinitionsAndInstancesCaseManagementApi.get_process_definitions_by_container"
      end
      # resource path
      local_var_path = "/server/queries/cases/{id}/processes".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'pageSize'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'sortOrder'] = opts[:'sort_order'] if !opts[:'sort_order'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CaseInstanceList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QueriesCaseDefinitionsAndInstancesCaseManagementApi#get_process_definitions_by_container\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end

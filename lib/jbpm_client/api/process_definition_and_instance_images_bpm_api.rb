=begin
#jbpm

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 7.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1

=end

require "uri"

module JBPMAPIClient
  class ProcessDefinitionAndInstanceImagesBPMApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Retrieves process definition image
    # 
    # @param id container id that process definition belongs to
    # @param p_id identifier of the process definition that image should be loaded for
    # @param [Hash] opts the optional parameters
    # @return [String]
    def get_process_image(id, p_id, opts = {})
      data, _status_code, _headers = get_process_image_with_http_info(id, p_id, opts)
      return data
    end

    # Retrieves process definition image
    # 
    # @param id container id that process definition belongs to
    # @param p_id identifier of the process definition that image should be loaded for
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def get_process_image_with_http_info(id, p_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ProcessDefinitionAndInstanceImagesBPMApi.get_process_image ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ProcessDefinitionAndInstanceImagesBPMApi.get_process_image"
      end
      # verify the required parameter 'p_id' is set
      if @api_client.config.client_side_validation && p_id.nil?
        fail ArgumentError, "Missing the required parameter 'p_id' when calling ProcessDefinitionAndInstanceImagesBPMApi.get_process_image"
      end
      # resource path
      local_var_path = "/server/containers/{id}/images/processes/{pId}".sub('{' + 'id' + '}', id.to_s).sub('{' + 'pId' + '}', p_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/svg+xml'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProcessDefinitionAndInstanceImagesBPMApi#get_process_image\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves process instance image
    # 
    # @param id container id that process instance belongs to
    # @param p_instance_id identifier of the process instance that image should be loaded for
    # @param [Hash] opts the optional parameters
    # @return [String]
    def get_process_instance_image(id, p_instance_id, opts = {})
      data, _status_code, _headers = get_process_instance_image_with_http_info(id, p_instance_id, opts)
      return data
    end

    # Retrieves process instance image
    # 
    # @param id container id that process instance belongs to
    # @param p_instance_id identifier of the process instance that image should be loaded for
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def get_process_instance_image_with_http_info(id, p_instance_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ProcessDefinitionAndInstanceImagesBPMApi.get_process_instance_image ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ProcessDefinitionAndInstanceImagesBPMApi.get_process_instance_image"
      end
      # verify the required parameter 'p_instance_id' is set
      if @api_client.config.client_side_validation && p_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'p_instance_id' when calling ProcessDefinitionAndInstanceImagesBPMApi.get_process_instance_image"
      end
      # resource path
      local_var_path = "/server/containers/{id}/images/processes/instances/{pInstanceId}".sub('{' + 'id' + '}', id.to_s).sub('{' + 'pInstanceId' + '}', p_instance_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/svg+xml'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProcessDefinitionAndInstanceImagesBPMApi#get_process_instance_image\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end

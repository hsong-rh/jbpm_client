=begin
#jbpm

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 7.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1

=end

require "uri"

module JBPMAPIClient
  class UserTasksAdministrationBPMApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Acknowledges given execution error
    # 
    # @param id container id that error belongs to
    # @param error_id identifier of the execution error to be acknowledged
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def acknowledge_task_error(id, error_id, opts = {})
      acknowledge_task_error_with_http_info(id, error_id, opts)
      return nil
    end

    # Acknowledges given execution error
    # 
    # @param id container id that error belongs to
    # @param error_id identifier of the execution error to be acknowledged
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def acknowledge_task_error_with_http_info(id, error_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UserTasksAdministrationBPMApi.acknowledge_task_error ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UserTasksAdministrationBPMApi.acknowledge_task_error"
      end
      # verify the required parameter 'error_id' is set
      if @api_client.config.client_side_validation && error_id.nil?
        fail ArgumentError, "Missing the required parameter 'error_id' when calling UserTasksAdministrationBPMApi.acknowledge_task_error"
      end
      # resource path
      local_var_path = "/server/admin/containers/{id}/tasks/errors/{errorId}".sub('{' + 'id' + '}', id.to_s).sub('{' + 'errorId' + '}', error_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserTasksAdministrationBPMApi#acknowledge_task_error\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Acknowledges given execution errors
    # 
    # @param id container id that errors belong to
    # @param error_id list of identifiers of execution errors to be acknowledged
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def acknowledge_task_errors(id, error_id, opts = {})
      acknowledge_task_errors_with_http_info(id, error_id, opts)
      return nil
    end

    # Acknowledges given execution errors
    # 
    # @param id container id that errors belong to
    # @param error_id list of identifiers of execution errors to be acknowledged
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def acknowledge_task_errors_with_http_info(id, error_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UserTasksAdministrationBPMApi.acknowledge_task_errors ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UserTasksAdministrationBPMApi.acknowledge_task_errors"
      end
      # verify the required parameter 'error_id' is set
      if @api_client.config.client_side_validation && error_id.nil?
        fail ArgumentError, "Missing the required parameter 'error_id' when calling UserTasksAdministrationBPMApi.acknowledge_task_errors"
      end
      # resource path
      local_var_path = "/server/admin/containers/{id}/tasks/errors".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'errorId'] = @api_client.build_collection_param(error_id, :multi)

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserTasksAdministrationBPMApi#acknowledge_task_errors\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Adds business admins to given task instance, optionally removing existing ones
    # 
    # @param id container id that task instance belongs to
    # @param t_instance_id identifier of task instance to be updated
    # @param body list of users/groups to be added as business admins, as OrgEntities type
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :remove optional flag that indicates if existing business admins should be removed, defaults to false (default to false)
    # @return [nil]
    def add_admins(id, t_instance_id, body, opts = {})
      add_admins_with_http_info(id, t_instance_id, body, opts)
      return nil
    end

    # Adds business admins to given task instance, optionally removing existing ones
    # 
    # @param id container id that task instance belongs to
    # @param t_instance_id identifier of task instance to be updated
    # @param body list of users/groups to be added as business admins, as OrgEntities type
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :remove optional flag that indicates if existing business admins should be removed, defaults to false
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def add_admins_with_http_info(id, t_instance_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UserTasksAdministrationBPMApi.add_admins ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UserTasksAdministrationBPMApi.add_admins"
      end
      # verify the required parameter 't_instance_id' is set
      if @api_client.config.client_side_validation && t_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 't_instance_id' when calling UserTasksAdministrationBPMApi.add_admins"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling UserTasksAdministrationBPMApi.add_admins"
      end
      # resource path
      local_var_path = "/server/admin/containers/{id}/tasks/{tInstanceId}/admins".sub('{' + 'id' + '}', id.to_s).sub('{' + 'tInstanceId' + '}', t_instance_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'remove'] = opts[:'remove'] if !opts[:'remove'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserTasksAdministrationBPMApi#add_admins\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Adds excluded owners to given task instance, optionally removing existing ones
    # 
    # @param id container id that task instance belongs to
    # @param t_instance_id identifier of task instance to be updated
    # @param body list of users/groups to be added as excluded owners, as OrgEntities type
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :remove optional flag that indicates if existing excluded owners should be removed, defaults to false (default to false)
    # @return [nil]
    def add_excluded_owners(id, t_instance_id, body, opts = {})
      add_excluded_owners_with_http_info(id, t_instance_id, body, opts)
      return nil
    end

    # Adds excluded owners to given task instance, optionally removing existing ones
    # 
    # @param id container id that task instance belongs to
    # @param t_instance_id identifier of task instance to be updated
    # @param body list of users/groups to be added as excluded owners, as OrgEntities type
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :remove optional flag that indicates if existing excluded owners should be removed, defaults to false
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def add_excluded_owners_with_http_info(id, t_instance_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UserTasksAdministrationBPMApi.add_excluded_owners ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UserTasksAdministrationBPMApi.add_excluded_owners"
      end
      # verify the required parameter 't_instance_id' is set
      if @api_client.config.client_side_validation && t_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 't_instance_id' when calling UserTasksAdministrationBPMApi.add_excluded_owners"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling UserTasksAdministrationBPMApi.add_excluded_owners"
      end
      # resource path
      local_var_path = "/server/admin/containers/{id}/tasks/{tInstanceId}/exl-owners".sub('{' + 'id' + '}', id.to_s).sub('{' + 'tInstanceId' + '}', t_instance_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'remove'] = opts[:'remove'] if !opts[:'remove'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserTasksAdministrationBPMApi#add_excluded_owners\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Adds potential owners to given task instance, optionally removing existing ones
    # 
    # @param id container id that task instance belongs to
    # @param t_instance_id identifier of task instance to be updated
    # @param body list of users/groups to be added as potential owners, as OrgEntities type
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :remove optional flag that indicates if existing potential owners should be removed, defaults to false (default to false)
    # @return [nil]
    def add_potential_owners(id, t_instance_id, body, opts = {})
      add_potential_owners_with_http_info(id, t_instance_id, body, opts)
      return nil
    end

    # Adds potential owners to given task instance, optionally removing existing ones
    # 
    # @param id container id that task instance belongs to
    # @param t_instance_id identifier of task instance to be updated
    # @param body list of users/groups to be added as potential owners, as OrgEntities type
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :remove optional flag that indicates if existing potential owners should be removed, defaults to false
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def add_potential_owners_with_http_info(id, t_instance_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UserTasksAdministrationBPMApi.add_potential_owners ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UserTasksAdministrationBPMApi.add_potential_owners"
      end
      # verify the required parameter 't_instance_id' is set
      if @api_client.config.client_side_validation && t_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 't_instance_id' when calling UserTasksAdministrationBPMApi.add_potential_owners"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling UserTasksAdministrationBPMApi.add_potential_owners"
      end
      # resource path
      local_var_path = "/server/admin/containers/{id}/tasks/{tInstanceId}/pot-owners".sub('{' + 'id' + '}', id.to_s).sub('{' + 'tInstanceId' + '}', t_instance_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'remove'] = opts[:'remove'] if !opts[:'remove'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserTasksAdministrationBPMApi#add_potential_owners\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Adds task inputs to given task instance
    # 
    # @param id container id that task instance belongs to
    # @param t_instance_id identifier of task instance to be updated
    # @param body map of data to be set as task inputs, as Map
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def add_task_inputs(id, t_instance_id, body, opts = {})
      add_task_inputs_with_http_info(id, t_instance_id, body, opts)
      return nil
    end

    # Adds task inputs to given task instance
    # 
    # @param id container id that task instance belongs to
    # @param t_instance_id identifier of task instance to be updated
    # @param body map of data to be set as task inputs, as Map
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def add_task_inputs_with_http_info(id, t_instance_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UserTasksAdministrationBPMApi.add_task_inputs ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UserTasksAdministrationBPMApi.add_task_inputs"
      end
      # verify the required parameter 't_instance_id' is set
      if @api_client.config.client_side_validation && t_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 't_instance_id' when calling UserTasksAdministrationBPMApi.add_task_inputs"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling UserTasksAdministrationBPMApi.add_task_inputs"
      end
      # resource path
      local_var_path = "/server/admin/containers/{id}/tasks/{tInstanceId}/contents/input".sub('{' + 'id' + '}', id.to_s).sub('{' + 'tInstanceId' + '}', t_instance_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserTasksAdministrationBPMApi#add_task_inputs\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Cancels notification for given task instance
    # 
    # @param id container id that task instance belongs to
    # @param t_instance_id identifier of task instance to be updated
    # @param notification_id identifier of notification to be canceled
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def cancel_notification(id, t_instance_id, notification_id, opts = {})
      cancel_notification_with_http_info(id, t_instance_id, notification_id, opts)
      return nil
    end

    # Cancels notification for given task instance
    # 
    # @param id container id that task instance belongs to
    # @param t_instance_id identifier of task instance to be updated
    # @param notification_id identifier of notification to be canceled
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def cancel_notification_with_http_info(id, t_instance_id, notification_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UserTasksAdministrationBPMApi.cancel_notification ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UserTasksAdministrationBPMApi.cancel_notification"
      end
      # verify the required parameter 't_instance_id' is set
      if @api_client.config.client_side_validation && t_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 't_instance_id' when calling UserTasksAdministrationBPMApi.cancel_notification"
      end
      # verify the required parameter 'notification_id' is set
      if @api_client.config.client_side_validation && notification_id.nil?
        fail ArgumentError, "Missing the required parameter 'notification_id' when calling UserTasksAdministrationBPMApi.cancel_notification"
      end
      # resource path
      local_var_path = "/server/admin/containers/{id}/tasks/{tInstanceId}/notifications/{notificationId}".sub('{' + 'id' + '}', id.to_s).sub('{' + 'tInstanceId' + '}', t_instance_id.to_s).sub('{' + 'notificationId' + '}', notification_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserTasksAdministrationBPMApi#cancel_notification\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Cancels reassignment for given task instance
    # 
    # @param id container id that task instance belongs to
    # @param t_instance_id identifier of task instance to be updated
    # @param reassignment_id identifier of reassignment to be canceled
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def cancel_reassignment(id, t_instance_id, reassignment_id, opts = {})
      cancel_reassignment_with_http_info(id, t_instance_id, reassignment_id, opts)
      return nil
    end

    # Cancels reassignment for given task instance
    # 
    # @param id container id that task instance belongs to
    # @param t_instance_id identifier of task instance to be updated
    # @param reassignment_id identifier of reassignment to be canceled
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def cancel_reassignment_with_http_info(id, t_instance_id, reassignment_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UserTasksAdministrationBPMApi.cancel_reassignment ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UserTasksAdministrationBPMApi.cancel_reassignment"
      end
      # verify the required parameter 't_instance_id' is set
      if @api_client.config.client_side_validation && t_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 't_instance_id' when calling UserTasksAdministrationBPMApi.cancel_reassignment"
      end
      # verify the required parameter 'reassignment_id' is set
      if @api_client.config.client_side_validation && reassignment_id.nil?
        fail ArgumentError, "Missing the required parameter 'reassignment_id' when calling UserTasksAdministrationBPMApi.cancel_reassignment"
      end
      # resource path
      local_var_path = "/server/admin/containers/{id}/tasks/{tInstanceId}/reassignments/{reassignmentId}".sub('{' + 'id' + '}', id.to_s).sub('{' + 'tInstanceId' + '}', t_instance_id.to_s).sub('{' + 'reassignmentId' + '}', reassignment_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserTasksAdministrationBPMApi#cancel_reassignment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves execution errors for task instance and container, applies pagination
    # 
    # @param id container id that task instance belongs to
    # @param t_instance_id identifier of the task instance that errors should be collected for
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :include_ack optional flag that indicates if acknowledged errors should also be collected, defaults to false (default to false)
    # @option opts [Integer] :page optional pagination - at which page to start, defaults to 0 (meaning first) (default to 0)
    # @option opts [Integer] :page_size optional pagination - size of the result, defaults to 10 (default to 10)
    # @option opts [String] :sort optional sort column, no default
    # @option opts [BOOLEAN] :sort_order optional sort direction (asc, desc) - defaults to asc (default to true)
    # @return [ExecutionErrorList]
    def get_execution_errors_by_task(id, t_instance_id, opts = {})
      data, _status_code, _headers = get_execution_errors_by_task_with_http_info(id, t_instance_id, opts)
      return data
    end

    # Retrieves execution errors for task instance and container, applies pagination
    # 
    # @param id container id that task instance belongs to
    # @param t_instance_id identifier of the task instance that errors should be collected for
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :include_ack optional flag that indicates if acknowledged errors should also be collected, defaults to false
    # @option opts [Integer] :page optional pagination - at which page to start, defaults to 0 (meaning first)
    # @option opts [Integer] :page_size optional pagination - size of the result, defaults to 10
    # @option opts [String] :sort optional sort column, no default
    # @option opts [BOOLEAN] :sort_order optional sort direction (asc, desc) - defaults to asc
    # @return [Array<(ExecutionErrorList, Fixnum, Hash)>] ExecutionErrorList data, response status code and response headers
    def get_execution_errors_by_task_with_http_info(id, t_instance_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UserTasksAdministrationBPMApi.get_execution_errors_by_task ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UserTasksAdministrationBPMApi.get_execution_errors_by_task"
      end
      # verify the required parameter 't_instance_id' is set
      if @api_client.config.client_side_validation && t_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 't_instance_id' when calling UserTasksAdministrationBPMApi.get_execution_errors_by_task"
      end
      # resource path
      local_var_path = "/server/admin/containers/{id}/tasks/{tInstanceId}/errors".sub('{' + 'id' + '}', id.to_s).sub('{' + 'tInstanceId' + '}', t_instance_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'includeAck'] = opts[:'include_ack'] if !opts[:'include_ack'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'pageSize'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'sortOrder'] = opts[:'sort_order'] if !opts[:'sort_order'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ExecutionErrorList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserTasksAdministrationBPMApi#get_execution_errors_by_task\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve execution error by its identifier
    # 
    # @param id container id that error belongs to
    # @param error_id identifier of the execution error to load
    # @param [Hash] opts the optional parameters
    # @return [ExecutionError]
    def get_task_error_by_id(id, error_id, opts = {})
      data, _status_code, _headers = get_task_error_by_id_with_http_info(id, error_id, opts)
      return data
    end

    # Retrieve execution error by its identifier
    # 
    # @param id container id that error belongs to
    # @param error_id identifier of the execution error to load
    # @param [Hash] opts the optional parameters
    # @return [Array<(ExecutionError, Fixnum, Hash)>] ExecutionError data, response status code and response headers
    def get_task_error_by_id_with_http_info(id, error_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UserTasksAdministrationBPMApi.get_task_error_by_id ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UserTasksAdministrationBPMApi.get_task_error_by_id"
      end
      # verify the required parameter 'error_id' is set
      if @api_client.config.client_side_validation && error_id.nil?
        fail ArgumentError, "Missing the required parameter 'error_id' when calling UserTasksAdministrationBPMApi.get_task_error_by_id"
      end
      # resource path
      local_var_path = "/server/admin/containers/{id}/tasks/errors/{errorId}".sub('{' + 'id' + '}', id.to_s).sub('{' + 'errorId' + '}', error_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ExecutionError')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserTasksAdministrationBPMApi#get_task_error_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves execution errors for container, allows to filter by task name and/or process id, applies pagination
    # 
    # @param id container id that task instance belongs to
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :include_ack optional flag that indicates if acknowledged errors should also be collected, defaults to false (default to false)
    # @option opts [String] :name optional name of the task to filter by
    # @option opts [String] :process optional process id that the task belongs to to filter by
    # @option opts [Integer] :page optional pagination - at which page to start, defaults to 0 (meaning first) (default to 0)
    # @option opts [Integer] :page_size optional pagination - size of the result, defaults to 10 (default to 10)
    # @option opts [String] :sort optional sort column, no default
    # @option opts [BOOLEAN] :sort_order optional sort direction (asc, desc) - defaults to asc (default to true)
    # @return [ExecutionErrorList]
    def get_task_errors(id, opts = {})
      data, _status_code, _headers = get_task_errors_with_http_info(id, opts)
      return data
    end

    # Retrieves execution errors for container, allows to filter by task name and/or process id, applies pagination
    # 
    # @param id container id that task instance belongs to
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :include_ack optional flag that indicates if acknowledged errors should also be collected, defaults to false
    # @option opts [String] :name optional name of the task to filter by
    # @option opts [String] :process optional process id that the task belongs to to filter by
    # @option opts [Integer] :page optional pagination - at which page to start, defaults to 0 (meaning first)
    # @option opts [Integer] :page_size optional pagination - size of the result, defaults to 10
    # @option opts [String] :sort optional sort column, no default
    # @option opts [BOOLEAN] :sort_order optional sort direction (asc, desc) - defaults to asc
    # @return [Array<(ExecutionErrorList, Fixnum, Hash)>] ExecutionErrorList data, response status code and response headers
    def get_task_errors_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UserTasksAdministrationBPMApi.get_task_errors ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UserTasksAdministrationBPMApi.get_task_errors"
      end
      # resource path
      local_var_path = "/server/admin/containers/{id}/tasks/errors".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'includeAck'] = opts[:'include_ack'] if !opts[:'include_ack'].nil?
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?
      query_params[:'process'] = opts[:'process'] if !opts[:'process'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'pageSize'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'sortOrder'] = opts[:'sort_order'] if !opts[:'sort_order'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ExecutionErrorList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserTasksAdministrationBPMApi#get_task_errors\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves notifications for given task
    # 
    # @param id container id that task instance belongs to
    # @param t_instance_id identifier of task instance to be updated
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :active_only optional flag that indicates if active only notifications should be collected, defaults to true (default to true)
    # @return [TaskNotificationList]
    def get_task_notifications(id, t_instance_id, opts = {})
      data, _status_code, _headers = get_task_notifications_with_http_info(id, t_instance_id, opts)
      return data
    end

    # Retrieves notifications for given task
    # 
    # @param id container id that task instance belongs to
    # @param t_instance_id identifier of task instance to be updated
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :active_only optional flag that indicates if active only notifications should be collected, defaults to true
    # @return [Array<(TaskNotificationList, Fixnum, Hash)>] TaskNotificationList data, response status code and response headers
    def get_task_notifications_with_http_info(id, t_instance_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UserTasksAdministrationBPMApi.get_task_notifications ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UserTasksAdministrationBPMApi.get_task_notifications"
      end
      # verify the required parameter 't_instance_id' is set
      if @api_client.config.client_side_validation && t_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 't_instance_id' when calling UserTasksAdministrationBPMApi.get_task_notifications"
      end
      # resource path
      local_var_path = "/server/admin/containers/{id}/tasks/{tInstanceId}/notifications".sub('{' + 'id' + '}', id.to_s).sub('{' + 'tInstanceId' + '}', t_instance_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'activeOnly'] = opts[:'active_only'] if !opts[:'active_only'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TaskNotificationList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserTasksAdministrationBPMApi#get_task_notifications\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves reassignments for given task
    # 
    # @param id container id that task instance belongs to
    # @param t_instance_id identifier of task instance to be updated
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :active_only optional flag that indicates if active only reassignmnets should be collected, defaults to true (default to true)
    # @return [TaskReassignmentList]
    def get_task_reassignments(id, t_instance_id, opts = {})
      data, _status_code, _headers = get_task_reassignments_with_http_info(id, t_instance_id, opts)
      return data
    end

    # Retrieves reassignments for given task
    # 
    # @param id container id that task instance belongs to
    # @param t_instance_id identifier of task instance to be updated
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :active_only optional flag that indicates if active only reassignmnets should be collected, defaults to true
    # @return [Array<(TaskReassignmentList, Fixnum, Hash)>] TaskReassignmentList data, response status code and response headers
    def get_task_reassignments_with_http_info(id, t_instance_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UserTasksAdministrationBPMApi.get_task_reassignments ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UserTasksAdministrationBPMApi.get_task_reassignments"
      end
      # verify the required parameter 't_instance_id' is set
      if @api_client.config.client_side_validation && t_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 't_instance_id' when calling UserTasksAdministrationBPMApi.get_task_reassignments"
      end
      # resource path
      local_var_path = "/server/admin/containers/{id}/tasks/{tInstanceId}/reassignments".sub('{' + 'id' + '}', id.to_s).sub('{' + 'tInstanceId' + '}', t_instance_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'activeOnly'] = opts[:'active_only'] if !opts[:'active_only'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TaskReassignmentList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserTasksAdministrationBPMApi#get_task_reassignments\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Schedules new notification for given task instance
    # 
    # @param id container id that task instance belongs to
    # @param t_instance_id identifier of task instance to be updated
    # @param expires_at time expression for notification
    # @param body email notification details, as EmailNotification type
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :when_not_started optional flag that indicates the type of notification, either whenNotStarted or whenNotCompleted must be set (default to false)
    # @option opts [BOOLEAN] :when_not_completed optional flag that indicates the type of notification, either whenNotStarted or whenNotCompleted must be set (default to false)
    # @return [Integer]
    def notify(id, t_instance_id, expires_at, body, opts = {})
      data, _status_code, _headers = notify_with_http_info(id, t_instance_id, expires_at, body, opts)
      return data
    end

    # Schedules new notification for given task instance
    # 
    # @param id container id that task instance belongs to
    # @param t_instance_id identifier of task instance to be updated
    # @param expires_at time expression for notification
    # @param body email notification details, as EmailNotification type
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :when_not_started optional flag that indicates the type of notification, either whenNotStarted or whenNotCompleted must be set
    # @option opts [BOOLEAN] :when_not_completed optional flag that indicates the type of notification, either whenNotStarted or whenNotCompleted must be set
    # @return [Array<(Integer, Fixnum, Hash)>] Integer data, response status code and response headers
    def notify_with_http_info(id, t_instance_id, expires_at, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UserTasksAdministrationBPMApi.notify ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UserTasksAdministrationBPMApi.notify"
      end
      # verify the required parameter 't_instance_id' is set
      if @api_client.config.client_side_validation && t_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 't_instance_id' when calling UserTasksAdministrationBPMApi.notify"
      end
      # verify the required parameter 'expires_at' is set
      if @api_client.config.client_side_validation && expires_at.nil?
        fail ArgumentError, "Missing the required parameter 'expires_at' when calling UserTasksAdministrationBPMApi.notify"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling UserTasksAdministrationBPMApi.notify"
      end
      # resource path
      local_var_path = "/server/admin/containers/{id}/tasks/{tInstanceId}/notifications".sub('{' + 'id' + '}', id.to_s).sub('{' + 'tInstanceId' + '}', t_instance_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'expiresAt'] = expires_at
      query_params[:'whenNotStarted'] = opts[:'when_not_started'] if !opts[:'when_not_started'].nil?
      query_params[:'whenNotCompleted'] = opts[:'when_not_completed'] if !opts[:'when_not_completed'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Integer')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserTasksAdministrationBPMApi#notify\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Schedules new reassign of given task instance
    # 
    # @param id container id that task instance belongs to
    # @param t_instance_id identifier of task instance to be updated
    # @param expires_at time expression for reassignmnet
    # @param body list of users/groups that task should be reassined to, as OrgEntities type
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :when_not_started optional flag that indicates the type of reassignment, either whenNotStarted or whenNotCompleted must be set (default to false)
    # @option opts [BOOLEAN] :when_not_completed optional flag that indicates the type of reassignment, either whenNotStarted or whenNotCompleted must be set (default to false)
    # @return [Integer]
    def reassign(id, t_instance_id, expires_at, body, opts = {})
      data, _status_code, _headers = reassign_with_http_info(id, t_instance_id, expires_at, body, opts)
      return data
    end

    # Schedules new reassign of given task instance
    # 
    # @param id container id that task instance belongs to
    # @param t_instance_id identifier of task instance to be updated
    # @param expires_at time expression for reassignmnet
    # @param body list of users/groups that task should be reassined to, as OrgEntities type
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :when_not_started optional flag that indicates the type of reassignment, either whenNotStarted or whenNotCompleted must be set
    # @option opts [BOOLEAN] :when_not_completed optional flag that indicates the type of reassignment, either whenNotStarted or whenNotCompleted must be set
    # @return [Array<(Integer, Fixnum, Hash)>] Integer data, response status code and response headers
    def reassign_with_http_info(id, t_instance_id, expires_at, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UserTasksAdministrationBPMApi.reassign ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UserTasksAdministrationBPMApi.reassign"
      end
      # verify the required parameter 't_instance_id' is set
      if @api_client.config.client_side_validation && t_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 't_instance_id' when calling UserTasksAdministrationBPMApi.reassign"
      end
      # verify the required parameter 'expires_at' is set
      if @api_client.config.client_side_validation && expires_at.nil?
        fail ArgumentError, "Missing the required parameter 'expires_at' when calling UserTasksAdministrationBPMApi.reassign"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling UserTasksAdministrationBPMApi.reassign"
      end
      # resource path
      local_var_path = "/server/admin/containers/{id}/tasks/{tInstanceId}/reassignments".sub('{' + 'id' + '}', id.to_s).sub('{' + 'tInstanceId' + '}', t_instance_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'expiresAt'] = expires_at
      query_params[:'whenNotStarted'] = opts[:'when_not_started'] if !opts[:'when_not_started'].nil?
      query_params[:'whenNotCompleted'] = opts[:'when_not_completed'] if !opts[:'when_not_completed'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Integer')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserTasksAdministrationBPMApi#reassign\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Removes business admin groups from given task instance
    # 
    # @param id container id that task instance belongs to
    # @param t_instance_id identifier of task instance to be updated
    # @param entity_id list of groups to be removed from business admin list
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def remove_admins_groups(id, t_instance_id, entity_id, opts = {})
      remove_admins_groups_with_http_info(id, t_instance_id, entity_id, opts)
      return nil
    end

    # Removes business admin groups from given task instance
    # 
    # @param id container id that task instance belongs to
    # @param t_instance_id identifier of task instance to be updated
    # @param entity_id list of groups to be removed from business admin list
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def remove_admins_groups_with_http_info(id, t_instance_id, entity_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UserTasksAdministrationBPMApi.remove_admins_groups ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UserTasksAdministrationBPMApi.remove_admins_groups"
      end
      # verify the required parameter 't_instance_id' is set
      if @api_client.config.client_side_validation && t_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 't_instance_id' when calling UserTasksAdministrationBPMApi.remove_admins_groups"
      end
      # verify the required parameter 'entity_id' is set
      if @api_client.config.client_side_validation && entity_id.nil?
        fail ArgumentError, "Missing the required parameter 'entity_id' when calling UserTasksAdministrationBPMApi.remove_admins_groups"
      end
      # resource path
      local_var_path = "/server/admin/containers/{id}/tasks/{tInstanceId}/admins/groups/{entityId}".sub('{' + 'id' + '}', id.to_s).sub('{' + 'tInstanceId' + '}', t_instance_id.to_s).sub('{' + 'entityId' + '}', entity_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserTasksAdministrationBPMApi#remove_admins_groups\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Removes business admins from given task instance
    # 
    # @param id container id that task instance belongs to
    # @param t_instance_id identifier of task instance to be updated
    # @param entity_id list of users to be removed from business admin list
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def remove_admins_users(id, t_instance_id, entity_id, opts = {})
      remove_admins_users_with_http_info(id, t_instance_id, entity_id, opts)
      return nil
    end

    # Removes business admins from given task instance
    # 
    # @param id container id that task instance belongs to
    # @param t_instance_id identifier of task instance to be updated
    # @param entity_id list of users to be removed from business admin list
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def remove_admins_users_with_http_info(id, t_instance_id, entity_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UserTasksAdministrationBPMApi.remove_admins_users ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UserTasksAdministrationBPMApi.remove_admins_users"
      end
      # verify the required parameter 't_instance_id' is set
      if @api_client.config.client_side_validation && t_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 't_instance_id' when calling UserTasksAdministrationBPMApi.remove_admins_users"
      end
      # verify the required parameter 'entity_id' is set
      if @api_client.config.client_side_validation && entity_id.nil?
        fail ArgumentError, "Missing the required parameter 'entity_id' when calling UserTasksAdministrationBPMApi.remove_admins_users"
      end
      # resource path
      local_var_path = "/server/admin/containers/{id}/tasks/{tInstanceId}/admins/users/{entityId}".sub('{' + 'id' + '}', id.to_s).sub('{' + 'tInstanceId' + '}', t_instance_id.to_s).sub('{' + 'entityId' + '}', entity_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserTasksAdministrationBPMApi#remove_admins_users\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Removes excluded owners groups from given task instance
    # 
    # @param id container id that task instance belongs to
    # @param t_instance_id identifier of task instance to be updated
    # @param entity_id list of groups to be removed from excluded owners list
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def remove_excluded_owners_groups(id, t_instance_id, entity_id, opts = {})
      remove_excluded_owners_groups_with_http_info(id, t_instance_id, entity_id, opts)
      return nil
    end

    # Removes excluded owners groups from given task instance
    # 
    # @param id container id that task instance belongs to
    # @param t_instance_id identifier of task instance to be updated
    # @param entity_id list of groups to be removed from excluded owners list
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def remove_excluded_owners_groups_with_http_info(id, t_instance_id, entity_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UserTasksAdministrationBPMApi.remove_excluded_owners_groups ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UserTasksAdministrationBPMApi.remove_excluded_owners_groups"
      end
      # verify the required parameter 't_instance_id' is set
      if @api_client.config.client_side_validation && t_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 't_instance_id' when calling UserTasksAdministrationBPMApi.remove_excluded_owners_groups"
      end
      # verify the required parameter 'entity_id' is set
      if @api_client.config.client_side_validation && entity_id.nil?
        fail ArgumentError, "Missing the required parameter 'entity_id' when calling UserTasksAdministrationBPMApi.remove_excluded_owners_groups"
      end
      # resource path
      local_var_path = "/server/admin/containers/{id}/tasks/{tInstanceId}/exl-owners/groups/{entityId}".sub('{' + 'id' + '}', id.to_s).sub('{' + 'tInstanceId' + '}', t_instance_id.to_s).sub('{' + 'entityId' + '}', entity_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserTasksAdministrationBPMApi#remove_excluded_owners_groups\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Removes excluded owners from given task instance
    # 
    # @param id container id that task instance belongs to
    # @param t_instance_id identifier of task instance to be updated
    # @param entity_id list of users to be removed from excluded owners list
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def remove_excluded_owners_users(id, t_instance_id, entity_id, opts = {})
      remove_excluded_owners_users_with_http_info(id, t_instance_id, entity_id, opts)
      return nil
    end

    # Removes excluded owners from given task instance
    # 
    # @param id container id that task instance belongs to
    # @param t_instance_id identifier of task instance to be updated
    # @param entity_id list of users to be removed from excluded owners list
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def remove_excluded_owners_users_with_http_info(id, t_instance_id, entity_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UserTasksAdministrationBPMApi.remove_excluded_owners_users ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UserTasksAdministrationBPMApi.remove_excluded_owners_users"
      end
      # verify the required parameter 't_instance_id' is set
      if @api_client.config.client_side_validation && t_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 't_instance_id' when calling UserTasksAdministrationBPMApi.remove_excluded_owners_users"
      end
      # verify the required parameter 'entity_id' is set
      if @api_client.config.client_side_validation && entity_id.nil?
        fail ArgumentError, "Missing the required parameter 'entity_id' when calling UserTasksAdministrationBPMApi.remove_excluded_owners_users"
      end
      # resource path
      local_var_path = "/server/admin/containers/{id}/tasks/{tInstanceId}/exl-owners/users/{entityId}".sub('{' + 'id' + '}', id.to_s).sub('{' + 'tInstanceId' + '}', t_instance_id.to_s).sub('{' + 'entityId' + '}', entity_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserTasksAdministrationBPMApi#remove_excluded_owners_users\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Removes potential owner groups from given task instance
    # 
    # @param id container id that task instance belongs to
    # @param t_instance_id identifier of task instance to be updated
    # @param entity_id list of groups to be removed from potantial owners list
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def remove_potential_owners_groups(id, t_instance_id, entity_id, opts = {})
      remove_potential_owners_groups_with_http_info(id, t_instance_id, entity_id, opts)
      return nil
    end

    # Removes potential owner groups from given task instance
    # 
    # @param id container id that task instance belongs to
    # @param t_instance_id identifier of task instance to be updated
    # @param entity_id list of groups to be removed from potantial owners list
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def remove_potential_owners_groups_with_http_info(id, t_instance_id, entity_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UserTasksAdministrationBPMApi.remove_potential_owners_groups ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UserTasksAdministrationBPMApi.remove_potential_owners_groups"
      end
      # verify the required parameter 't_instance_id' is set
      if @api_client.config.client_side_validation && t_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 't_instance_id' when calling UserTasksAdministrationBPMApi.remove_potential_owners_groups"
      end
      # verify the required parameter 'entity_id' is set
      if @api_client.config.client_side_validation && entity_id.nil?
        fail ArgumentError, "Missing the required parameter 'entity_id' when calling UserTasksAdministrationBPMApi.remove_potential_owners_groups"
      end
      # resource path
      local_var_path = "/server/admin/containers/{id}/tasks/{tInstanceId}/pot-owners/groups/{entityId}".sub('{' + 'id' + '}', id.to_s).sub('{' + 'tInstanceId' + '}', t_instance_id.to_s).sub('{' + 'entityId' + '}', entity_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserTasksAdministrationBPMApi#remove_potential_owners_groups\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Removes potential owners from given task instance
    # 
    # @param id container id that task instance belongs to
    # @param t_instance_id identifier of task instance to be updated
    # @param entity_id list of users to be removed from potantial owners list
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def remove_potential_owners_users(id, t_instance_id, entity_id, opts = {})
      remove_potential_owners_users_with_http_info(id, t_instance_id, entity_id, opts)
      return nil
    end

    # Removes potential owners from given task instance
    # 
    # @param id container id that task instance belongs to
    # @param t_instance_id identifier of task instance to be updated
    # @param entity_id list of users to be removed from potantial owners list
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def remove_potential_owners_users_with_http_info(id, t_instance_id, entity_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UserTasksAdministrationBPMApi.remove_potential_owners_users ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UserTasksAdministrationBPMApi.remove_potential_owners_users"
      end
      # verify the required parameter 't_instance_id' is set
      if @api_client.config.client_side_validation && t_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 't_instance_id' when calling UserTasksAdministrationBPMApi.remove_potential_owners_users"
      end
      # verify the required parameter 'entity_id' is set
      if @api_client.config.client_side_validation && entity_id.nil?
        fail ArgumentError, "Missing the required parameter 'entity_id' when calling UserTasksAdministrationBPMApi.remove_potential_owners_users"
      end
      # resource path
      local_var_path = "/server/admin/containers/{id}/tasks/{tInstanceId}/pot-owners/users/{entityId}".sub('{' + 'id' + '}', id.to_s).sub('{' + 'tInstanceId' + '}', t_instance_id.to_s).sub('{' + 'entityId' + '}', entity_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserTasksAdministrationBPMApi#remove_potential_owners_users\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Removes task inputs referenced by names from given task instance
    # 
    # @param id container id that task instance belongs to
    # @param t_instance_id identifier of task instance to be updated
    # @param name one or more names of task inputs to be removed
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def remove_task_inputs(id, t_instance_id, name, opts = {})
      remove_task_inputs_with_http_info(id, t_instance_id, name, opts)
      return nil
    end

    # Removes task inputs referenced by names from given task instance
    # 
    # @param id container id that task instance belongs to
    # @param t_instance_id identifier of task instance to be updated
    # @param name one or more names of task inputs to be removed
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def remove_task_inputs_with_http_info(id, t_instance_id, name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UserTasksAdministrationBPMApi.remove_task_inputs ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UserTasksAdministrationBPMApi.remove_task_inputs"
      end
      # verify the required parameter 't_instance_id' is set
      if @api_client.config.client_side_validation && t_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 't_instance_id' when calling UserTasksAdministrationBPMApi.remove_task_inputs"
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling UserTasksAdministrationBPMApi.remove_task_inputs"
      end
      # resource path
      local_var_path = "/server/admin/containers/{id}/tasks/{tInstanceId}/contents/input".sub('{' + 'id' + '}', id.to_s).sub('{' + 'tInstanceId' + '}', t_instance_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'name'] = @api_client.build_collection_param(name, :multi)

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserTasksAdministrationBPMApi#remove_task_inputs\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Removes task outputs referenced by names from given task instance
    # 
    # @param id container id that task instance belongs to
    # @param t_instance_id identifier of task instance to be updated
    # @param name one or more names of task outputs to be removed
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def remove_task_outputs(id, t_instance_id, name, opts = {})
      remove_task_outputs_with_http_info(id, t_instance_id, name, opts)
      return nil
    end

    # Removes task outputs referenced by names from given task instance
    # 
    # @param id container id that task instance belongs to
    # @param t_instance_id identifier of task instance to be updated
    # @param name one or more names of task outputs to be removed
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def remove_task_outputs_with_http_info(id, t_instance_id, name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UserTasksAdministrationBPMApi.remove_task_outputs ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UserTasksAdministrationBPMApi.remove_task_outputs"
      end
      # verify the required parameter 't_instance_id' is set
      if @api_client.config.client_side_validation && t_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 't_instance_id' when calling UserTasksAdministrationBPMApi.remove_task_outputs"
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling UserTasksAdministrationBPMApi.remove_task_outputs"
      end
      # resource path
      local_var_path = "/server/admin/containers/{id}/tasks/{tInstanceId}/contents/output".sub('{' + 'id' + '}', id.to_s).sub('{' + 'tInstanceId' + '}', t_instance_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'name'] = @api_client.build_collection_param(name, :multi)

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserTasksAdministrationBPMApi#remove_task_outputs\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end

=begin
#jbpm

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 7.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1

=end

require "uri"

module JBPMAPIClient
  class AdministrationOfCasesCaseManagementApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Retrieves case instances without authentication checks and applies pagination
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :status optional case instance status (open, closed, canceled) - defaults ot open (1) only
    # @option opts [Integer] :page optional pagination - at which page to start, defaults to 0 (meaning first) (default to 0)
    # @option opts [Integer] :page_size optional pagination - size of the result, defaults to 10 (default to 10)
    # @option opts [String] :sort optional sort column, no default
    # @option opts [BOOLEAN] :sort_order optional sort direction (asc, desc) - defaults to asc (default to true)
    # @return [CaseInstanceList]
    def get_admin_case_instances(opts = {})
      data, _status_code, _headers = get_admin_case_instances_with_http_info(opts)
      return data
    end

    # Retrieves case instances without authentication checks and applies pagination
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :status optional case instance status (open, closed, canceled) - defaults ot open (1) only
    # @option opts [Integer] :page optional pagination - at which page to start, defaults to 0 (meaning first)
    # @option opts [Integer] :page_size optional pagination - size of the result, defaults to 10
    # @option opts [String] :sort optional sort column, no default
    # @option opts [BOOLEAN] :sort_order optional sort direction (asc, desc) - defaults to asc
    # @return [Array<(CaseInstanceList, Fixnum, Hash)>] CaseInstanceList data, response status code and response headers
    def get_admin_case_instances_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AdministrationOfCasesCaseManagementApi.get_admin_case_instances ..."
      end
      if @api_client.config.client_side_validation && opts[:'status'] && !opts[:'status'].all?{|item| ['open', 'closed', 'cancelled'].include?(item)}
        fail ArgumentError, 'invalid value for "status", must include one of open, closed, cancelled'
      end
      # resource path
      local_var_path = "/server/admin/cases/instances"

      # query parameters
      query_params = {}
      query_params[:'status'] = @api_client.build_collection_param(opts[:'status'], :multi) if !opts[:'status'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'pageSize'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'sortOrder'] = opts[:'sort_order'] if !opts[:'sort_order'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['jbpm_auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CaseInstanceList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdministrationOfCasesCaseManagementApi#get_admin_case_instances\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Migrates case instance to new container and case definition with required process mapping to migrate all process instances belonging to a case instance with optional node mapping
    # 
    # @param id container id that case instance belongs to
    # @param case_id identifier of case instance to be migrated
    # @param target_container_id container id that new case definition should be migrated to to
    # @param [Hash] opts the optional parameters
    # @option opts [String] :body process and node mapping - unique ids of old definition to new definition given as Map of Maps - ProcessMapping should provide map of process definitions (mandatory), NodeMapping should provide map of node mappings (optional)
    # @return [CaseMigrationReportInstance]
    def migrate_case_instance(id, case_id, target_container_id, opts = {})
      data, _status_code, _headers = migrate_case_instance_with_http_info(id, case_id, target_container_id, opts)
      return data
    end

    # Migrates case instance to new container and case definition with required process mapping to migrate all process instances belonging to a case instance with optional node mapping
    # 
    # @param id container id that case instance belongs to
    # @param case_id identifier of case instance to be migrated
    # @param target_container_id container id that new case definition should be migrated to to
    # @param [Hash] opts the optional parameters
    # @option opts [String] :body process and node mapping - unique ids of old definition to new definition given as Map of Maps - ProcessMapping should provide map of process definitions (mandatory), NodeMapping should provide map of node mappings (optional)
    # @return [Array<(CaseMigrationReportInstance, Fixnum, Hash)>] CaseMigrationReportInstance data, response status code and response headers
    def migrate_case_instance_with_http_info(id, case_id, target_container_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AdministrationOfCasesCaseManagementApi.migrate_case_instance ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AdministrationOfCasesCaseManagementApi.migrate_case_instance"
      end
      # verify the required parameter 'case_id' is set
      if @api_client.config.client_side_validation && case_id.nil?
        fail ArgumentError, "Missing the required parameter 'case_id' when calling AdministrationOfCasesCaseManagementApi.migrate_case_instance"
      end
      # verify the required parameter 'target_container_id' is set
      if @api_client.config.client_side_validation && target_container_id.nil?
        fail ArgumentError, "Missing the required parameter 'target_container_id' when calling AdministrationOfCasesCaseManagementApi.migrate_case_instance"
      end
      # resource path
      local_var_path = "/server/admin/containers/{id}/cases/instances/{caseId}".sub('{' + 'id' + '}', id.to_s).sub('{' + 'caseId' + '}', case_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'targetContainerId'] = target_container_id

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = ['jbpm_auth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CaseMigrationReportInstance')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdministrationOfCasesCaseManagementApi#migrate_case_instance\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end

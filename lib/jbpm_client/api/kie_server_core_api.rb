=begin
#jbpm

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 7.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1

=end

require "uri"

module JBPMAPIClient
  class KIEServerCoreApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Creates (deploys) new KIE container to this server
    # 
    # @param id Container id to be assigned to deployed KIE Container
    # @param body KIE Container resource to be deployed as KieContainerResource
    # @param [Hash] opts the optional parameters
    # @return [Response]
    def create_container(id, body, opts = {})
      data, _status_code, _headers = create_container_with_http_info(id, body, opts)
      return data
    end

    # Creates (deploys) new KIE container to this server
    # 
    # @param id Container id to be assigned to deployed KIE Container
    # @param body KIE Container resource to be deployed as KieContainerResource
    # @param [Hash] opts the optional parameters
    # @return [Array<(Response, Fixnum, Hash)>] Response data, response status code and response headers
    def create_container_with_http_info(id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: KIEServerCoreApi.create_container ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling KIEServerCoreApi.create_container"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling KIEServerCoreApi.create_container"
      end
      # resource path
      local_var_path = "/server/containers/{id}".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml', 'application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/xml', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Response')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: KIEServerCoreApi#create_container\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Disposes (undeploys) container with given id
    # 
    # @param id Container id to be disposed (undeployed)
    # @param [Hash] opts the optional parameters
    # @return [Response]
    def dispose_container(id, opts = {})
      data, _status_code, _headers = dispose_container_with_http_info(id, opts)
      return data
    end

    # Disposes (undeploys) container with given id
    # 
    # @param id Container id to be disposed (undeployed)
    # @param [Hash] opts the optional parameters
    # @return [Array<(Response, Fixnum, Hash)>] Response data, response status code and response headers
    def dispose_container_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: KIEServerCoreApi.dispose_container ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling KIEServerCoreApi.dispose_container"
      end
      # resource path
      local_var_path = "/server/containers/{id}".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['jbpm_auth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Response')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: KIEServerCoreApi#dispose_container\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves container with given id
    # 
    # @param id Container id to be retrieved
    # @param [Hash] opts the optional parameters
    # @return [Response]
    def get_container_info(id, opts = {})
      data, _status_code, _headers = get_container_info_with_http_info(id, opts)
      return data
    end

    # Retrieves container with given id
    # 
    # @param id Container id to be retrieved
    # @param [Hash] opts the optional parameters
    # @return [Array<(Response, Fixnum, Hash)>] Response data, response status code and response headers
    def get_container_info_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: KIEServerCoreApi.get_container_info ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling KIEServerCoreApi.get_container_info"
      end
      # resource path
      local_var_path = "/server/containers/{id}".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Response')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: KIEServerCoreApi#get_container_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves KIE Server information - id, name, location, capabilities, messages
    # 
    # @param [Hash] opts the optional parameters
    # @return [Response]
    def get_info(opts = {})
      data, _status_code, _headers = get_info_with_http_info(opts)
      return data
    end

    # Retrieves KIE Server information - id, name, location, capabilities, messages
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Response, Fixnum, Hash)>] Response data, response status code and response headers
    def get_info_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: KIEServerCoreApi.get_info ..."
      end
      # resource path
      local_var_path = "/server"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Response')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: KIEServerCoreApi#get_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves release id of the KIE container with given id
    # 
    # @param id Container id that release id should be loaded from
    # @param [Hash] opts the optional parameters
    # @return [Response]
    def get_release_id(id, opts = {})
      data, _status_code, _headers = get_release_id_with_http_info(id, opts)
      return data
    end

    # Retrieves release id of the KIE container with given id
    # 
    # @param id Container id that release id should be loaded from
    # @param [Hash] opts the optional parameters
    # @return [Array<(Response, Fixnum, Hash)>] Response data, response status code and response headers
    def get_release_id_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: KIEServerCoreApi.get_release_id ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling KIEServerCoreApi.get_release_id"
      end
      # resource path
      local_var_path = "/server/containers/{id}/release-id".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Response')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: KIEServerCoreApi#get_release_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves scanner information for given container
    # 
    # @param id Container id for scanner to be loaded
    # @param [Hash] opts the optional parameters
    # @return [Response]
    def get_scanner_info(id, opts = {})
      data, _status_code, _headers = get_scanner_info_with_http_info(id, opts)
      return data
    end

    # Retrieves scanner information for given container
    # 
    # @param id Container id for scanner to be loaded
    # @param [Hash] opts the optional parameters
    # @return [Array<(Response, Fixnum, Hash)>] Response data, response status code and response headers
    def get_scanner_info_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: KIEServerCoreApi.get_scanner_info ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling KIEServerCoreApi.get_scanner_info"
      end
      # resource path
      local_var_path = "/server/containers/{id}/scanner".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Response')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: KIEServerCoreApi#get_scanner_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves server state - configuration that the server is currently running with
    # 
    # @param [Hash] opts the optional parameters
    # @return [Response]
    def get_server_state(opts = {})
      data, _status_code, _headers = get_server_state_with_http_info(opts)
      return data
    end

    # Retrieves server state - configuration that the server is currently running with
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Response, Fixnum, Hash)>] Response data, response status code and response headers
    def get_server_state_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: KIEServerCoreApi.get_server_state ..."
      end
      # resource path
      local_var_path = "/server/state"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['jbpm_auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Response')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: KIEServerCoreApi#get_server_state\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Liveness check for KIE Server that validates both kie server and all extensions, optionally produces report
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :report optional report flag to return detailed report of the check, defaults to false (default to false)
    # @return [Array<KieMessage>]
    def healthcheck(opts = {})
      data, _status_code, _headers = healthcheck_with_http_info(opts)
      return data
    end

    # Liveness check for KIE Server that validates both kie server and all extensions, optionally produces report
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :report optional report flag to return detailed report of the check, defaults to false
    # @return [Array<(Array<KieMessage>, Fixnum, Hash)>] Array<KieMessage> data, response status code and response headers
    def healthcheck_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: KIEServerCoreApi.healthcheck ..."
      end
      # resource path
      local_var_path = "/server/healthcheck"

      # query parameters
      query_params = {}
      query_params[:'report'] = opts[:'report'] if !opts[:'report'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<KieMessage>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: KIEServerCoreApi#healthcheck\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves containers deployed to this server, optionally filtered by group, artifact, version or status
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :group_id optional groupId to filter containers by
    # @option opts [String] :artifact_id optional artifactId to filter containers by
    # @option opts [String] :version optional version to filter containers by
    # @option opts [String] :status optional status to filter containers by
    # @return [Response]
    def list_containers(opts = {})
      data, _status_code, _headers = list_containers_with_http_info(opts)
      return data
    end

    # Retrieves containers deployed to this server, optionally filtered by group, artifact, version or status
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :group_id optional groupId to filter containers by
    # @option opts [String] :artifact_id optional artifactId to filter containers by
    # @option opts [String] :version optional version to filter containers by
    # @option opts [String] :status optional status to filter containers by
    # @return [Array<(Response, Fixnum, Hash)>] Response data, response status code and response headers
    def list_containers_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: KIEServerCoreApi.list_containers ..."
      end
      # resource path
      local_var_path = "/server/containers"

      # query parameters
      query_params = {}
      query_params[:'groupId'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'artifactId'] = opts[:'artifact_id'] if !opts[:'artifact_id'].nil?
      query_params[:'version'] = opts[:'version'] if !opts[:'version'].nil?
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['jbpm_auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Response')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: KIEServerCoreApi#list_containers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Readiness check for KIE Server that indicates that server is fully booted and ready to accept requests
    # 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def readycheck(opts = {})
      readycheck_with_http_info(opts)
      return nil
    end

    # Readiness check for KIE Server that indicates that server is fully booted and ready to accept requests
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def readycheck_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: KIEServerCoreApi.readycheck ..."
      end
      # resource path
      local_var_path = "/server/readycheck"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['jbpm_auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: KIEServerCoreApi#readycheck\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Updates release id of the KIE container with given id to provided release id
    # 
    # @param id Container id that release id should be upgraded
    # @param body Release Id to be upgraded to as ReleaseId type
    # @param [Hash] opts the optional parameters
    # @return [Response]
    def update_release_id(id, body, opts = {})
      data, _status_code, _headers = update_release_id_with_http_info(id, body, opts)
      return data
    end

    # Updates release id of the KIE container with given id to provided release id
    # 
    # @param id Container id that release id should be upgraded
    # @param body Release Id to be upgraded to as ReleaseId type
    # @param [Hash] opts the optional parameters
    # @return [Array<(Response, Fixnum, Hash)>] Response data, response status code and response headers
    def update_release_id_with_http_info(id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: KIEServerCoreApi.update_release_id ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling KIEServerCoreApi.update_release_id"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling KIEServerCoreApi.update_release_id"
      end
      # resource path
      local_var_path = "/server/containers/{id}/release-id".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml', 'application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/xml', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Response')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: KIEServerCoreApi#update_release_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Updates scanner for given container
    # 
    # @param id Container id for scanner to be updated
    # @param body Scanner information given as KieScannerResource type
    # @param [Hash] opts the optional parameters
    # @return [Response]
    def update_scanner(id, body, opts = {})
      data, _status_code, _headers = update_scanner_with_http_info(id, body, opts)
      return data
    end

    # Updates scanner for given container
    # 
    # @param id Container id for scanner to be updated
    # @param body Scanner information given as KieScannerResource type
    # @param [Hash] opts the optional parameters
    # @return [Array<(Response, Fixnum, Hash)>] Response data, response status code and response headers
    def update_scanner_with_http_info(id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: KIEServerCoreApi.update_scanner ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling KIEServerCoreApi.update_scanner"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling KIEServerCoreApi.update_scanner"
      end
      # resource path
      local_var_path = "/server/containers/{id}/scanner".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml', 'application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/xml', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Response')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: KIEServerCoreApi#update_scanner\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end

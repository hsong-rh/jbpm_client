=begin
#jbpm

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 7.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1

=end

require "uri"

module JBPMAPIClient
  class CaseInstancesCaseManagementApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Adds new comment to given case instance
    # 
    # @param id container id that case instance belongs to
    # @param case_id identifier of the case instance
    # @param body actual content of the comment to be added as String
    # @param [Hash] opts the optional parameters
    # @option opts [String] :author optional user id to be used instead of authenticated user - only when bypass authenticated user is enabled
    # @option opts [Array<String>] :restricted_to optional role name(s) that given comment should be restricted to
    # @return [nil]
    def add_comment(id, case_id, body, opts = {})
      add_comment_with_http_info(id, case_id, body, opts)
      return nil
    end

    # Adds new comment to given case instance
    # 
    # @param id container id that case instance belongs to
    # @param case_id identifier of the case instance
    # @param body actual content of the comment to be added as String
    # @param [Hash] opts the optional parameters
    # @option opts [String] :author optional user id to be used instead of authenticated user - only when bypass authenticated user is enabled
    # @option opts [Array<String>] :restricted_to optional role name(s) that given comment should be restricted to
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def add_comment_with_http_info(id, case_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CaseInstancesCaseManagementApi.add_comment ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling CaseInstancesCaseManagementApi.add_comment"
      end
      # verify the required parameter 'case_id' is set
      if @api_client.config.client_side_validation && case_id.nil?
        fail ArgumentError, "Missing the required parameter 'case_id' when calling CaseInstancesCaseManagementApi.add_comment"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling CaseInstancesCaseManagementApi.add_comment"
      end
      # resource path
      local_var_path = "/server/containers/{id}/cases/instances/{caseId}/comments".sub('{' + 'id' + '}', id.to_s).sub('{' + 'caseId' + '}', case_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'author'] = opts[:'author'] if !opts[:'author'].nil?
      query_params[:'restrictedTo'] = @api_client.build_collection_param(opts[:'restricted_to'], :multi) if !opts[:'restricted_to'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CaseInstancesCaseManagementApi#add_comment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Adds dynamic subprocess identified by process id to case instance
    # 
    # @param id container id that case instance belongs to
    # @param case_id identifier of the case instance
    # @param p_id process id of the subprocess to be added
    # @param body data for dynamic subprocess
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def add_dynamic_process_to_case(id, case_id, p_id, body, opts = {})
      add_dynamic_process_to_case_with_http_info(id, case_id, p_id, body, opts)
      return nil
    end

    # Adds dynamic subprocess identified by process id to case instance
    # 
    # @param id container id that case instance belongs to
    # @param case_id identifier of the case instance
    # @param p_id process id of the subprocess to be added
    # @param body data for dynamic subprocess
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def add_dynamic_process_to_case_with_http_info(id, case_id, p_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CaseInstancesCaseManagementApi.add_dynamic_process_to_case ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling CaseInstancesCaseManagementApi.add_dynamic_process_to_case"
      end
      # verify the required parameter 'case_id' is set
      if @api_client.config.client_side_validation && case_id.nil?
        fail ArgumentError, "Missing the required parameter 'case_id' when calling CaseInstancesCaseManagementApi.add_dynamic_process_to_case"
      end
      # verify the required parameter 'p_id' is set
      if @api_client.config.client_side_validation && p_id.nil?
        fail ArgumentError, "Missing the required parameter 'p_id' when calling CaseInstancesCaseManagementApi.add_dynamic_process_to_case"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling CaseInstancesCaseManagementApi.add_dynamic_process_to_case"
      end
      # resource path
      local_var_path = "/server/containers/{id}/cases/instances/{caseId}/processes/{pId}".sub('{' + 'id' + '}', id.to_s).sub('{' + 'caseId' + '}', case_id.to_s).sub('{' + 'pId' + '}', p_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CaseInstancesCaseManagementApi#add_dynamic_process_to_case\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Adds dynamic subprocess identified by process id to stage within case instance
    # 
    # @param id container id that case instance belongs to
    # @param case_id identifier of the case instance
    # @param case_stage_id identifier of the stage within case instance where dynamic subprocess should be added
    # @param p_id process id of the subprocess to be added
    # @param body data for dynamic subprocess
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def add_dynamic_stage_process_to_case(id, case_id, case_stage_id, p_id, body, opts = {})
      add_dynamic_stage_process_to_case_with_http_info(id, case_id, case_stage_id, p_id, body, opts)
      return nil
    end

    # Adds dynamic subprocess identified by process id to stage within case instance
    # 
    # @param id container id that case instance belongs to
    # @param case_id identifier of the case instance
    # @param case_stage_id identifier of the stage within case instance where dynamic subprocess should be added
    # @param p_id process id of the subprocess to be added
    # @param body data for dynamic subprocess
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def add_dynamic_stage_process_to_case_with_http_info(id, case_id, case_stage_id, p_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CaseInstancesCaseManagementApi.add_dynamic_stage_process_to_case ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling CaseInstancesCaseManagementApi.add_dynamic_stage_process_to_case"
      end
      # verify the required parameter 'case_id' is set
      if @api_client.config.client_side_validation && case_id.nil?
        fail ArgumentError, "Missing the required parameter 'case_id' when calling CaseInstancesCaseManagementApi.add_dynamic_stage_process_to_case"
      end
      # verify the required parameter 'case_stage_id' is set
      if @api_client.config.client_side_validation && case_stage_id.nil?
        fail ArgumentError, "Missing the required parameter 'case_stage_id' when calling CaseInstancesCaseManagementApi.add_dynamic_stage_process_to_case"
      end
      # verify the required parameter 'p_id' is set
      if @api_client.config.client_side_validation && p_id.nil?
        fail ArgumentError, "Missing the required parameter 'p_id' when calling CaseInstancesCaseManagementApi.add_dynamic_stage_process_to_case"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling CaseInstancesCaseManagementApi.add_dynamic_stage_process_to_case"
      end
      # resource path
      local_var_path = "/server/containers/{id}/cases/instances/{caseId}/stages/{caseStageId}/processes/{pId}".sub('{' + 'id' + '}', id.to_s).sub('{' + 'caseId' + '}', case_id.to_s).sub('{' + 'caseStageId' + '}', case_stage_id.to_s).sub('{' + 'pId' + '}', p_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CaseInstancesCaseManagementApi#add_dynamic_stage_process_to_case\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Adds dynamic task (user or service depending on the payload) to given stage within case instance
    # 
    # @param id container id that case instance belongs to
    # @param case_id identifier of the case instance
    # @param case_stage_id identifier of the stage within case instance where dynamic task should be added
    # @param body data for dynamic task (it represents task specification that drives the selection of the type of task)
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def add_dynamic_stage_task_to_case(id, case_id, case_stage_id, body, opts = {})
      add_dynamic_stage_task_to_case_with_http_info(id, case_id, case_stage_id, body, opts)
      return nil
    end

    # Adds dynamic task (user or service depending on the payload) to given stage within case instance
    # 
    # @param id container id that case instance belongs to
    # @param case_id identifier of the case instance
    # @param case_stage_id identifier of the stage within case instance where dynamic task should be added
    # @param body data for dynamic task (it represents task specification that drives the selection of the type of task)
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def add_dynamic_stage_task_to_case_with_http_info(id, case_id, case_stage_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CaseInstancesCaseManagementApi.add_dynamic_stage_task_to_case ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling CaseInstancesCaseManagementApi.add_dynamic_stage_task_to_case"
      end
      # verify the required parameter 'case_id' is set
      if @api_client.config.client_side_validation && case_id.nil?
        fail ArgumentError, "Missing the required parameter 'case_id' when calling CaseInstancesCaseManagementApi.add_dynamic_stage_task_to_case"
      end
      # verify the required parameter 'case_stage_id' is set
      if @api_client.config.client_side_validation && case_stage_id.nil?
        fail ArgumentError, "Missing the required parameter 'case_stage_id' when calling CaseInstancesCaseManagementApi.add_dynamic_stage_task_to_case"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling CaseInstancesCaseManagementApi.add_dynamic_stage_task_to_case"
      end
      # resource path
      local_var_path = "/server/containers/{id}/cases/instances/{caseId}/stages/{caseStageId}/tasks".sub('{' + 'id' + '}', id.to_s).sub('{' + 'caseId' + '}', case_id.to_s).sub('{' + 'caseStageId' + '}', case_stage_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CaseInstancesCaseManagementApi#add_dynamic_stage_task_to_case\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Adds dynamic task (user or service depending on the payload) to case instance
    # 
    # @param id container id that case instance belongs to
    # @param case_id identifier of the case instance
    # @param body data for dynamic task (it represents task specification that drives the selection of the type of task)
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def add_dynamic_task_to_case(id, case_id, body, opts = {})
      add_dynamic_task_to_case_with_http_info(id, case_id, body, opts)
      return nil
    end

    # Adds dynamic task (user or service depending on the payload) to case instance
    # 
    # @param id container id that case instance belongs to
    # @param case_id identifier of the case instance
    # @param body data for dynamic task (it represents task specification that drives the selection of the type of task)
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def add_dynamic_task_to_case_with_http_info(id, case_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CaseInstancesCaseManagementApi.add_dynamic_task_to_case ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling CaseInstancesCaseManagementApi.add_dynamic_task_to_case"
      end
      # verify the required parameter 'case_id' is set
      if @api_client.config.client_side_validation && case_id.nil?
        fail ArgumentError, "Missing the required parameter 'case_id' when calling CaseInstancesCaseManagementApi.add_dynamic_task_to_case"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling CaseInstancesCaseManagementApi.add_dynamic_task_to_case"
      end
      # resource path
      local_var_path = "/server/containers/{id}/cases/instances/{caseId}/tasks".sub('{' + 'id' + '}', id.to_s).sub('{' + 'caseId' + '}', case_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CaseInstancesCaseManagementApi#add_dynamic_task_to_case\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Adds new role assignment for given case, it can be either user or group based assignment
    # 
    # @param id container id that case instance belongs to
    # @param case_id identifier of the case instance
    # @param case_role_name name of the case role the assignment should be set
    # @param user user to be aded to case role for given case instance
    # @param group group to be aded to case role for given case instance
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def add_role_assignment(id, case_id, case_role_name, user, group, opts = {})
      add_role_assignment_with_http_info(id, case_id, case_role_name, user, group, opts)
      return nil
    end

    # Adds new role assignment for given case, it can be either user or group based assignment
    # 
    # @param id container id that case instance belongs to
    # @param case_id identifier of the case instance
    # @param case_role_name name of the case role the assignment should be set
    # @param user user to be aded to case role for given case instance
    # @param group group to be aded to case role for given case instance
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def add_role_assignment_with_http_info(id, case_id, case_role_name, user, group, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CaseInstancesCaseManagementApi.add_role_assignment ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling CaseInstancesCaseManagementApi.add_role_assignment"
      end
      # verify the required parameter 'case_id' is set
      if @api_client.config.client_side_validation && case_id.nil?
        fail ArgumentError, "Missing the required parameter 'case_id' when calling CaseInstancesCaseManagementApi.add_role_assignment"
      end
      # verify the required parameter 'case_role_name' is set
      if @api_client.config.client_side_validation && case_role_name.nil?
        fail ArgumentError, "Missing the required parameter 'case_role_name' when calling CaseInstancesCaseManagementApi.add_role_assignment"
      end
      # verify the required parameter 'user' is set
      if @api_client.config.client_side_validation && user.nil?
        fail ArgumentError, "Missing the required parameter 'user' when calling CaseInstancesCaseManagementApi.add_role_assignment"
      end
      # verify the required parameter 'group' is set
      if @api_client.config.client_side_validation && group.nil?
        fail ArgumentError, "Missing the required parameter 'group' when calling CaseInstancesCaseManagementApi.add_role_assignment"
      end
      # resource path
      local_var_path = "/server/containers/{id}/cases/instances/{caseId}/roles/{caseRoleName}".sub('{' + 'id' + '}', id.to_s).sub('{' + 'caseId' + '}', case_id.to_s).sub('{' + 'caseRoleName' + '}', case_role_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'user'] = user
      query_params[:'group'] = group

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CaseInstancesCaseManagementApi#add_role_assignment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Cancels case instance with given identifier (case id) and has optional flag to permanently destroy the case instance
    # 
    # @param id container id that case instance belongs to
    # @param case_id identifier of the case instance
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :destroy allows to destroy (permanently) case instance as part of the cancel operation, defaults to false (default to false)
    # @return [nil]
    def cancel_case_instance(id, case_id, opts = {})
      cancel_case_instance_with_http_info(id, case_id, opts)
      return nil
    end

    # Cancels case instance with given identifier (case id) and has optional flag to permanently destroy the case instance
    # 
    # @param id container id that case instance belongs to
    # @param case_id identifier of the case instance
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :destroy allows to destroy (permanently) case instance as part of the cancel operation, defaults to false
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def cancel_case_instance_with_http_info(id, case_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CaseInstancesCaseManagementApi.cancel_case_instance ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling CaseInstancesCaseManagementApi.cancel_case_instance"
      end
      # verify the required parameter 'case_id' is set
      if @api_client.config.client_side_validation && case_id.nil?
        fail ArgumentError, "Missing the required parameter 'case_id' when calling CaseInstancesCaseManagementApi.cancel_case_instance"
      end
      # resource path
      local_var_path = "/server/containers/{id}/cases/instances/{caseId}".sub('{' + 'id' + '}', id.to_s).sub('{' + 'caseId' + '}', case_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'destroy'] = opts[:'destroy'] if !opts[:'destroy'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CaseInstancesCaseManagementApi#cancel_case_instance\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Closes case instance with given identifier (case id) optionally with comment
    # 
    # @param id container id that case instance belongs to
    # @param case_id identifier of the case instance
    # @param [Hash] opts the optional parameters
    # @option opts [String] :body optional comment when closing a case instance as String
    # @return [nil]
    def close_case_instance(id, case_id, opts = {})
      close_case_instance_with_http_info(id, case_id, opts)
      return nil
    end

    # Closes case instance with given identifier (case id) optionally with comment
    # 
    # @param id container id that case instance belongs to
    # @param case_id identifier of the case instance
    # @param [Hash] opts the optional parameters
    # @option opts [String] :body optional comment when closing a case instance as String
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def close_case_instance_with_http_info(id, case_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CaseInstancesCaseManagementApi.close_case_instance ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling CaseInstancesCaseManagementApi.close_case_instance"
      end
      # verify the required parameter 'case_id' is set
      if @api_client.config.client_side_validation && case_id.nil?
        fail ArgumentError, "Missing the required parameter 'case_id' when calling CaseInstancesCaseManagementApi.close_case_instance"
      end
      # resource path
      local_var_path = "/server/containers/{id}/cases/instances/{caseId}".sub('{' + 'id' + '}', id.to_s).sub('{' + 'caseId' + '}', case_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CaseInstancesCaseManagementApi#close_case_instance\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Removes data items identified by name(s) from case instance's case file
    # 
    # @param id container id that case instance belongs to
    # @param case_id identifier of the case instance
    # @param data_id one or more names of the data items to be removed from case file
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_case_instance_data(id, case_id, data_id, opts = {})
      delete_case_instance_data_with_http_info(id, case_id, data_id, opts)
      return nil
    end

    # Removes data items identified by name(s) from case instance&#39;s case file
    # 
    # @param id container id that case instance belongs to
    # @param case_id identifier of the case instance
    # @param data_id one or more names of the data items to be removed from case file
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_case_instance_data_with_http_info(id, case_id, data_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CaseInstancesCaseManagementApi.delete_case_instance_data ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling CaseInstancesCaseManagementApi.delete_case_instance_data"
      end
      # verify the required parameter 'case_id' is set
      if @api_client.config.client_side_validation && case_id.nil?
        fail ArgumentError, "Missing the required parameter 'case_id' when calling CaseInstancesCaseManagementApi.delete_case_instance_data"
      end
      # verify the required parameter 'data_id' is set
      if @api_client.config.client_side_validation && data_id.nil?
        fail ArgumentError, "Missing the required parameter 'data_id' when calling CaseInstancesCaseManagementApi.delete_case_instance_data"
      end
      # resource path
      local_var_path = "/server/containers/{id}/cases/instances/{caseId}/caseFile".sub('{' + 'id' + '}', id.to_s).sub('{' + 'caseId' + '}', case_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'dataId'] = @api_client.build_collection_param(data_id, :multi)

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CaseInstancesCaseManagementApi#delete_case_instance_data\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves case definition for given container only, applies pagination
    # 
    # @param id container id that should be used to filter case definitions
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page optional pagination - at which page to start, defaults to 0 (meaning first) (default to 0)
    # @option opts [Integer] :page_size optional pagination - size of the result, defaults to 10 (default to 10)
    # @option opts [String] :sort optional sort column, no default
    # @option opts [BOOLEAN] :sort_order optional sort direction (asc, desc) - defaults to asc (default to true)
    # @return [CaseDefinitionList]
    def get_case_definitions_by_container(id, opts = {})
      data, _status_code, _headers = get_case_definitions_by_container_with_http_info(id, opts)
      return data
    end

    # Retrieves case definition for given container only, applies pagination
    # 
    # @param id container id that should be used to filter case definitions
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page optional pagination - at which page to start, defaults to 0 (meaning first)
    # @option opts [Integer] :page_size optional pagination - size of the result, defaults to 10
    # @option opts [String] :sort optional sort column, no default
    # @option opts [BOOLEAN] :sort_order optional sort direction (asc, desc) - defaults to asc
    # @return [Array<(CaseDefinitionList, Fixnum, Hash)>] CaseDefinitionList data, response status code and response headers
    def get_case_definitions_by_container_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CaseInstancesCaseManagementApi.get_case_definitions_by_container ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling CaseInstancesCaseManagementApi.get_case_definitions_by_container"
      end
      # resource path
      local_var_path = "/server/containers/{id}/cases/definitions".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'pageSize'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'sortOrder'] = opts[:'sort_order'] if !opts[:'sort_order'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CaseDefinitionList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CaseInstancesCaseManagementApi#get_case_definitions_by_container\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves case definition for given container and case definition id
    # 
    # @param id container id that should be used to filter case definitions
    # @param case_def_id case definition id that should be loaded
    # @param [Hash] opts the optional parameters
    # @return [CaseDefinition]
    def get_case_definitions_by_definition(id, case_def_id, opts = {})
      data, _status_code, _headers = get_case_definitions_by_definition_with_http_info(id, case_def_id, opts)
      return data
    end

    # Retrieves case definition for given container and case definition id
    # 
    # @param id container id that should be used to filter case definitions
    # @param case_def_id case definition id that should be loaded
    # @param [Hash] opts the optional parameters
    # @return [Array<(CaseDefinition, Fixnum, Hash)>] CaseDefinition data, response status code and response headers
    def get_case_definitions_by_definition_with_http_info(id, case_def_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CaseInstancesCaseManagementApi.get_case_definitions_by_definition ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling CaseInstancesCaseManagementApi.get_case_definitions_by_definition"
      end
      # verify the required parameter 'case_def_id' is set
      if @api_client.config.client_side_validation && case_def_id.nil?
        fail ArgumentError, "Missing the required parameter 'case_def_id' when calling CaseInstancesCaseManagementApi.get_case_definitions_by_definition"
      end
      # resource path
      local_var_path = "/server/containers/{id}/cases/definitions/{caseDefId}".sub('{' + 'id' + '}', id.to_s).sub('{' + 'caseDefId' + '}', case_def_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['jbpm_auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CaseDefinition')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CaseInstancesCaseManagementApi#get_case_definitions_by_definition\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves active case instance by given identifier (case id) with optionally loading data, roles, milestones and stages
    # 
    # @param id container id that case instance belongs to
    # @param case_id identifier of the case instance
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :with_data optional flag to load data when loading case instance (default to false)
    # @option opts [BOOLEAN] :with_roles optional flag to load roles when loading case instance (default to false)
    # @option opts [BOOLEAN] :with_milestones optional flag to load milestones when loading case instance (default to false)
    # @option opts [BOOLEAN] :with_stages optional flag to load stages when loading case instance (default to false)
    # @return [CaseInstance]
    def get_case_instance(id, case_id, opts = {})
      data, _status_code, _headers = get_case_instance_with_http_info(id, case_id, opts)
      return data
    end

    # Retrieves active case instance by given identifier (case id) with optionally loading data, roles, milestones and stages
    # 
    # @param id container id that case instance belongs to
    # @param case_id identifier of the case instance
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :with_data optional flag to load data when loading case instance
    # @option opts [BOOLEAN] :with_roles optional flag to load roles when loading case instance
    # @option opts [BOOLEAN] :with_milestones optional flag to load milestones when loading case instance
    # @option opts [BOOLEAN] :with_stages optional flag to load stages when loading case instance
    # @return [Array<(CaseInstance, Fixnum, Hash)>] CaseInstance data, response status code and response headers
    def get_case_instance_with_http_info(id, case_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CaseInstancesCaseManagementApi.get_case_instance ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling CaseInstancesCaseManagementApi.get_case_instance"
      end
      # verify the required parameter 'case_id' is set
      if @api_client.config.client_side_validation && case_id.nil?
        fail ArgumentError, "Missing the required parameter 'case_id' when calling CaseInstancesCaseManagementApi.get_case_instance"
      end
      # resource path
      local_var_path = "/server/containers/{id}/cases/instances/{caseId}".sub('{' + 'id' + '}', id.to_s).sub('{' + 'caseId' + '}', case_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'withData'] = opts[:'with_data'] if !opts[:'with_data'].nil?
      query_params[:'withRoles'] = opts[:'with_roles'] if !opts[:'with_roles'].nil?
      query_params[:'withMilestones'] = opts[:'with_milestones'] if !opts[:'with_milestones'].nil?
      query_params[:'withStages'] = opts[:'with_stages'] if !opts[:'with_stages'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CaseInstance')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CaseInstancesCaseManagementApi#get_case_instance\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves node instances from case instance
    # 
    # @param id container id that case instance belongs to
    # @param case_id identifier of the case instance
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :completed optional flag that allows to control which node instances to load - active or completed, defaults to false loading only active ones (default to false)
    # @option opts [Integer] :page optional pagination - at which page to start, defaults to 0 (meaning first) (default to 0)
    # @option opts [Integer] :page_size optional pagination - size of the result, defaults to 10 (default to 10)
    # @return [NodeInstanceList]
    def get_case_instance_active_nodes(id, case_id, opts = {})
      data, _status_code, _headers = get_case_instance_active_nodes_with_http_info(id, case_id, opts)
      return data
    end

    # Retrieves node instances from case instance
    # 
    # @param id container id that case instance belongs to
    # @param case_id identifier of the case instance
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :completed optional flag that allows to control which node instances to load - active or completed, defaults to false loading only active ones
    # @option opts [Integer] :page optional pagination - at which page to start, defaults to 0 (meaning first)
    # @option opts [Integer] :page_size optional pagination - size of the result, defaults to 10
    # @return [Array<(NodeInstanceList, Fixnum, Hash)>] NodeInstanceList data, response status code and response headers
    def get_case_instance_active_nodes_with_http_info(id, case_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CaseInstancesCaseManagementApi.get_case_instance_active_nodes ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling CaseInstancesCaseManagementApi.get_case_instance_active_nodes"
      end
      # verify the required parameter 'case_id' is set
      if @api_client.config.client_side_validation && case_id.nil?
        fail ArgumentError, "Missing the required parameter 'case_id' when calling CaseInstancesCaseManagementApi.get_case_instance_active_nodes"
      end
      # resource path
      local_var_path = "/server/containers/{id}/cases/instances/{caseId}/nodes/instances".sub('{' + 'id' + '}', id.to_s).sub('{' + 'caseId' + '}', case_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'completed'] = opts[:'completed'] if !opts[:'completed'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'pageSize'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'NodeInstanceList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CaseInstancesCaseManagementApi#get_case_instance_active_nodes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves adhoc fragments from case instance
    # 
    # @param id container id that case instance belongs to
    # @param case_id identifier of the case instance
    # @param [Hash] opts the optional parameters
    # @return [CaseAdhocFragmentList]
    def get_case_instance_ad_hoc_fragments(id, case_id, opts = {})
      data, _status_code, _headers = get_case_instance_ad_hoc_fragments_with_http_info(id, case_id, opts)
      return data
    end

    # Retrieves adhoc fragments from case instance
    # 
    # @param id container id that case instance belongs to
    # @param case_id identifier of the case instance
    # @param [Hash] opts the optional parameters
    # @return [Array<(CaseAdhocFragmentList, Fixnum, Hash)>] CaseAdhocFragmentList data, response status code and response headers
    def get_case_instance_ad_hoc_fragments_with_http_info(id, case_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CaseInstancesCaseManagementApi.get_case_instance_ad_hoc_fragments ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling CaseInstancesCaseManagementApi.get_case_instance_ad_hoc_fragments"
      end
      # verify the required parameter 'case_id' is set
      if @api_client.config.client_side_validation && case_id.nil?
        fail ArgumentError, "Missing the required parameter 'case_id' when calling CaseInstancesCaseManagementApi.get_case_instance_ad_hoc_fragments"
      end
      # resource path
      local_var_path = "/server/containers/{id}/cases/instances/{caseId}/adhocfragments".sub('{' + 'id' + '}', id.to_s).sub('{' + 'caseId' + '}', case_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CaseAdhocFragmentList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CaseInstancesCaseManagementApi#get_case_instance_ad_hoc_fragments\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves comments from case instance
    # 
    # @param id container id that case instance belongs to
    # @param case_id identifier of the case instance
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort optional sort column, no default
    # @option opts [Integer] :page optional pagination - at which page to start, defaults to 0 (meaning first) (default to 0)
    # @option opts [Integer] :page_size optional pagination - size of the result, defaults to 10 (default to 10)
    # @return [CaseCommentList]
    def get_case_instance_comments(id, case_id, opts = {})
      data, _status_code, _headers = get_case_instance_comments_with_http_info(id, case_id, opts)
      return data
    end

    # Retrieves comments from case instance
    # 
    # @param id container id that case instance belongs to
    # @param case_id identifier of the case instance
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort optional sort column, no default
    # @option opts [Integer] :page optional pagination - at which page to start, defaults to 0 (meaning first)
    # @option opts [Integer] :page_size optional pagination - size of the result, defaults to 10
    # @return [Array<(CaseCommentList, Fixnum, Hash)>] CaseCommentList data, response status code and response headers
    def get_case_instance_comments_with_http_info(id, case_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CaseInstancesCaseManagementApi.get_case_instance_comments ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling CaseInstancesCaseManagementApi.get_case_instance_comments"
      end
      # verify the required parameter 'case_id' is set
      if @api_client.config.client_side_validation && case_id.nil?
        fail ArgumentError, "Missing the required parameter 'case_id' when calling CaseInstancesCaseManagementApi.get_case_instance_comments"
      end
      # resource path
      local_var_path = "/server/containers/{id}/cases/instances/{caseId}/comments".sub('{' + 'id' + '}', id.to_s).sub('{' + 'caseId' + '}', case_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'pageSize'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CaseCommentList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CaseInstancesCaseManagementApi#get_case_instance_comments\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves case instance data as map where key is the name of data item and value is actual instance of the data item from case file
    # 
    # @param id container id that case instance belongs to
    # @param case_id identifier of the case instance
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :name optional name(s) of the data items to retrieve
    # @return [Hash<String, Object>]
    def get_case_instance_data(id, case_id, opts = {})
      data, _status_code, _headers = get_case_instance_data_with_http_info(id, case_id, opts)
      return data
    end

    # Retrieves case instance data as map where key is the name of data item and value is actual instance of the data item from case file
    # 
    # @param id container id that case instance belongs to
    # @param case_id identifier of the case instance
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :name optional name(s) of the data items to retrieve
    # @return [Array<(Hash<String, Object>, Fixnum, Hash)>] Hash<String, Object> data, response status code and response headers
    def get_case_instance_data_with_http_info(id, case_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CaseInstancesCaseManagementApi.get_case_instance_data ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling CaseInstancesCaseManagementApi.get_case_instance_data"
      end
      # verify the required parameter 'case_id' is set
      if @api_client.config.client_side_validation && case_id.nil?
        fail ArgumentError, "Missing the required parameter 'case_id' when calling CaseInstancesCaseManagementApi.get_case_instance_data"
      end
      # resource path
      local_var_path = "/server/containers/{id}/cases/instances/{caseId}/caseFile".sub('{' + 'id' + '}', id.to_s).sub('{' + 'caseId' + '}', case_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'name'] = @api_client.build_collection_param(opts[:'name'], :multi) if !opts[:'name'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Hash<String, Object>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CaseInstancesCaseManagementApi#get_case_instance_data\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves case instance data by data item name
    # 
    # @param id container id that case instance belongs to
    # @param case_id identifier of the case instance
    # @param data_id name of the data item within case file to retrieve
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def get_case_instance_data_by_name(id, case_id, data_id, opts = {})
      data, _status_code, _headers = get_case_instance_data_by_name_with_http_info(id, case_id, data_id, opts)
      return data
    end

    # Retrieves case instance data by data item name
    # 
    # @param id container id that case instance belongs to
    # @param case_id identifier of the case instance
    # @param data_id name of the data item within case file to retrieve
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Fixnum, Hash)>] Object data, response status code and response headers
    def get_case_instance_data_by_name_with_http_info(id, case_id, data_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CaseInstancesCaseManagementApi.get_case_instance_data_by_name ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling CaseInstancesCaseManagementApi.get_case_instance_data_by_name"
      end
      # verify the required parameter 'case_id' is set
      if @api_client.config.client_side_validation && case_id.nil?
        fail ArgumentError, "Missing the required parameter 'case_id' when calling CaseInstancesCaseManagementApi.get_case_instance_data_by_name"
      end
      # verify the required parameter 'data_id' is set
      if @api_client.config.client_side_validation && data_id.nil?
        fail ArgumentError, "Missing the required parameter 'data_id' when calling CaseInstancesCaseManagementApi.get_case_instance_data_by_name"
      end
      # resource path
      local_var_path = "/server/containers/{id}/cases/instances/{caseId}/caseFile/{dataId}".sub('{' + 'id' + '}', id.to_s).sub('{' + 'caseId' + '}', case_id.to_s).sub('{' + 'dataId' + '}', data_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Object')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CaseInstancesCaseManagementApi#get_case_instance_data_by_name\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves milestones from case instance
    # 
    # @param id container id that case instance belongs to
    # @param case_id identifier of the case instance
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :achieved_only optional flag that allows to control which milestones to load - achieved only or actives ones too, defaults to true (default to true)
    # @option opts [Integer] :page optional pagination - at which page to start, defaults to 0 (meaning first) (default to 0)
    # @option opts [Integer] :page_size optional pagination - size of the result, defaults to 10 (default to 10)
    # @return [CaseMilestoneList]
    def get_case_instance_milestones(id, case_id, opts = {})
      data, _status_code, _headers = get_case_instance_milestones_with_http_info(id, case_id, opts)
      return data
    end

    # Retrieves milestones from case instance
    # 
    # @param id container id that case instance belongs to
    # @param case_id identifier of the case instance
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :achieved_only optional flag that allows to control which milestones to load - achieved only or actives ones too, defaults to true
    # @option opts [Integer] :page optional pagination - at which page to start, defaults to 0 (meaning first)
    # @option opts [Integer] :page_size optional pagination - size of the result, defaults to 10
    # @return [Array<(CaseMilestoneList, Fixnum, Hash)>] CaseMilestoneList data, response status code and response headers
    def get_case_instance_milestones_with_http_info(id, case_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CaseInstancesCaseManagementApi.get_case_instance_milestones ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling CaseInstancesCaseManagementApi.get_case_instance_milestones"
      end
      # verify the required parameter 'case_id' is set
      if @api_client.config.client_side_validation && case_id.nil?
        fail ArgumentError, "Missing the required parameter 'case_id' when calling CaseInstancesCaseManagementApi.get_case_instance_milestones"
      end
      # resource path
      local_var_path = "/server/containers/{id}/cases/instances/{caseId}/milestones".sub('{' + 'id' + '}', id.to_s).sub('{' + 'caseId' + '}', case_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'achievedOnly'] = opts[:'achieved_only'] if !opts[:'achieved_only'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'pageSize'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CaseMilestoneList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CaseInstancesCaseManagementApi#get_case_instance_milestones\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves process instances that compose complete case instance
    # 
    # @param id container id that case instance belongs to
    # @param case_id identifier of the case instance
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Integer>] :status optional process instance status (active, completed, aborted) - defaults ot active (1) only
    # @option opts [Integer] :page optional pagination - at which page to start, defaults to 0 (meaning first) (default to 0)
    # @option opts [Integer] :page_size optional pagination - size of the result, defaults to 10 (default to 10)
    # @option opts [String] :sort optional sort column, no default
    # @option opts [BOOLEAN] :sort_order optional sort direction (asc, desc) - defaults to asc (default to true)
    # @return [ProcessInstanceList]
    def get_case_instance_process_instance(id, case_id, opts = {})
      data, _status_code, _headers = get_case_instance_process_instance_with_http_info(id, case_id, opts)
      return data
    end

    # Retrieves process instances that compose complete case instance
    # 
    # @param id container id that case instance belongs to
    # @param case_id identifier of the case instance
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Integer>] :status optional process instance status (active, completed, aborted) - defaults ot active (1) only
    # @option opts [Integer] :page optional pagination - at which page to start, defaults to 0 (meaning first)
    # @option opts [Integer] :page_size optional pagination - size of the result, defaults to 10
    # @option opts [String] :sort optional sort column, no default
    # @option opts [BOOLEAN] :sort_order optional sort direction (asc, desc) - defaults to asc
    # @return [Array<(ProcessInstanceList, Fixnum, Hash)>] ProcessInstanceList data, response status code and response headers
    def get_case_instance_process_instance_with_http_info(id, case_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CaseInstancesCaseManagementApi.get_case_instance_process_instance ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling CaseInstancesCaseManagementApi.get_case_instance_process_instance"
      end
      # verify the required parameter 'case_id' is set
      if @api_client.config.client_side_validation && case_id.nil?
        fail ArgumentError, "Missing the required parameter 'case_id' when calling CaseInstancesCaseManagementApi.get_case_instance_process_instance"
      end
      if @api_client.config.client_side_validation && opts[:'status'] && !opts[:'status'].all?{|item| ['1', '2', '3'].include?(item)}
        fail ArgumentError, 'invalid value for "status", must include one of 1, 2, 3'
      end
      # resource path
      local_var_path = "/server/containers/{id}/cases/instances/{caseId}/processes/instances".sub('{' + 'id' + '}', id.to_s).sub('{' + 'caseId' + '}', case_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'status'] = @api_client.build_collection_param(opts[:'status'], :multi) if !opts[:'status'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'pageSize'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'sortOrder'] = opts[:'sort_order'] if !opts[:'sort_order'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ProcessInstanceList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CaseInstancesCaseManagementApi#get_case_instance_process_instance\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves role assignments from case instance
    # 
    # @param id container id that case instance belongs to
    # @param case_id identifier of the case instance
    # @param [Hash] opts the optional parameters
    # @return [CaseRoleAssignmentList]
    def get_case_instance_role_assignments(id, case_id, opts = {})
      data, _status_code, _headers = get_case_instance_role_assignments_with_http_info(id, case_id, opts)
      return data
    end

    # Retrieves role assignments from case instance
    # 
    # @param id container id that case instance belongs to
    # @param case_id identifier of the case instance
    # @param [Hash] opts the optional parameters
    # @return [Array<(CaseRoleAssignmentList, Fixnum, Hash)>] CaseRoleAssignmentList data, response status code and response headers
    def get_case_instance_role_assignments_with_http_info(id, case_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CaseInstancesCaseManagementApi.get_case_instance_role_assignments ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling CaseInstancesCaseManagementApi.get_case_instance_role_assignments"
      end
      # verify the required parameter 'case_id' is set
      if @api_client.config.client_side_validation && case_id.nil?
        fail ArgumentError, "Missing the required parameter 'case_id' when calling CaseInstancesCaseManagementApi.get_case_instance_role_assignments"
      end
      # resource path
      local_var_path = "/server/containers/{id}/cases/instances/{caseId}/roles".sub('{' + 'id' + '}', id.to_s).sub('{' + 'caseId' + '}', case_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CaseRoleAssignmentList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CaseInstancesCaseManagementApi#get_case_instance_role_assignments\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves stages from case instance
    # 
    # @param id container id that case instance belongs to
    # @param case_id identifier of the case instance
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :active_only optional flag that allows to control which stages to load - active only or completed ones too, defaults to true (default to true)
    # @option opts [Integer] :page optional pagination - at which page to start, defaults to 0 (meaning first) (default to 0)
    # @option opts [Integer] :page_size optional pagination - size of the result, defaults to 10 (default to 10)
    # @return [CaseStageList]
    def get_case_instance_stages(id, case_id, opts = {})
      data, _status_code, _headers = get_case_instance_stages_with_http_info(id, case_id, opts)
      return data
    end

    # Retrieves stages from case instance
    # 
    # @param id container id that case instance belongs to
    # @param case_id identifier of the case instance
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :active_only optional flag that allows to control which stages to load - active only or completed ones too, defaults to true
    # @option opts [Integer] :page optional pagination - at which page to start, defaults to 0 (meaning first)
    # @option opts [Integer] :page_size optional pagination - size of the result, defaults to 10
    # @return [Array<(CaseStageList, Fixnum, Hash)>] CaseStageList data, response status code and response headers
    def get_case_instance_stages_with_http_info(id, case_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CaseInstancesCaseManagementApi.get_case_instance_stages ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling CaseInstancesCaseManagementApi.get_case_instance_stages"
      end
      # verify the required parameter 'case_id' is set
      if @api_client.config.client_side_validation && case_id.nil?
        fail ArgumentError, "Missing the required parameter 'case_id' when calling CaseInstancesCaseManagementApi.get_case_instance_stages"
      end
      # resource path
      local_var_path = "/server/containers/{id}/cases/instances/{caseId}/stages".sub('{' + 'id' + '}', id.to_s).sub('{' + 'caseId' + '}', case_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'activeOnly'] = opts[:'active_only'] if !opts[:'active_only'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'pageSize'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CaseStageList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CaseInstancesCaseManagementApi#get_case_instance_stages\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves case instances for given container only, allows to filter by case instance status and applies pagination
    # 
    # @param id container id that should be used to filter case instances
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :status optional case instance status (open, closed, canceled) - defaults ot open (1) only
    # @option opts [Integer] :page optional pagination - at which page to start, defaults to 0 (meaning first) (default to 0)
    # @option opts [Integer] :page_size optional pagination - size of the result, defaults to 10 (default to 10)
    # @option opts [String] :sort optional sort column, no default
    # @option opts [BOOLEAN] :sort_order optional sort direction (asc, desc) - defaults to asc (default to true)
    # @return [CaseInstanceList]
    def get_case_instances_by_container(id, opts = {})
      data, _status_code, _headers = get_case_instances_by_container_with_http_info(id, opts)
      return data
    end

    # Retrieves case instances for given container only, allows to filter by case instance status and applies pagination
    # 
    # @param id container id that should be used to filter case instances
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :status optional case instance status (open, closed, canceled) - defaults ot open (1) only
    # @option opts [Integer] :page optional pagination - at which page to start, defaults to 0 (meaning first)
    # @option opts [Integer] :page_size optional pagination - size of the result, defaults to 10
    # @option opts [String] :sort optional sort column, no default
    # @option opts [BOOLEAN] :sort_order optional sort direction (asc, desc) - defaults to asc
    # @return [Array<(CaseInstanceList, Fixnum, Hash)>] CaseInstanceList data, response status code and response headers
    def get_case_instances_by_container_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CaseInstancesCaseManagementApi.get_case_instances_by_container ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling CaseInstancesCaseManagementApi.get_case_instances_by_container"
      end
      if @api_client.config.client_side_validation && opts[:'status'] && !opts[:'status'].all?{|item| ['open', 'closed', 'cancelled'].include?(item)}
        fail ArgumentError, 'invalid value for "status", must include one of open, closed, cancelled'
      end
      # resource path
      local_var_path = "/server/containers/{id}/cases/instances".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'status'] = @api_client.build_collection_param(opts[:'status'], :multi) if !opts[:'status'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'pageSize'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'sortOrder'] = opts[:'sort_order'] if !opts[:'sort_order'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CaseInstanceList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CaseInstancesCaseManagementApi#get_case_instances_by_container\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves case instances for given case definition only, allows to filter by case instance status and applies pagination
    # 
    # @param id container id that should be used to filter case instances
    # @param case_def_id case definition id that should be used to filter case instances
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :status optional case instance status (open, closed, canceled) - defaults ot open (1) only
    # @option opts [Integer] :page optional pagination - at which page to start, defaults to 0 (meaning first) (default to 0)
    # @option opts [Integer] :page_size optional pagination - size of the result, defaults to 10 (default to 10)
    # @option opts [String] :sort optional sort column, no default
    # @option opts [BOOLEAN] :sort_order optional sort direction (asc, desc) - defaults to asc (default to true)
    # @return [CaseInstanceList]
    def get_case_instances_by_definition(id, case_def_id, opts = {})
      data, _status_code, _headers = get_case_instances_by_definition_with_http_info(id, case_def_id, opts)
      return data
    end

    # Retrieves case instances for given case definition only, allows to filter by case instance status and applies pagination
    # 
    # @param id container id that should be used to filter case instances
    # @param case_def_id case definition id that should be used to filter case instances
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :status optional case instance status (open, closed, canceled) - defaults ot open (1) only
    # @option opts [Integer] :page optional pagination - at which page to start, defaults to 0 (meaning first)
    # @option opts [Integer] :page_size optional pagination - size of the result, defaults to 10
    # @option opts [String] :sort optional sort column, no default
    # @option opts [BOOLEAN] :sort_order optional sort direction (asc, desc) - defaults to asc
    # @return [Array<(CaseInstanceList, Fixnum, Hash)>] CaseInstanceList data, response status code and response headers
    def get_case_instances_by_definition_with_http_info(id, case_def_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CaseInstancesCaseManagementApi.get_case_instances_by_definition ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling CaseInstancesCaseManagementApi.get_case_instances_by_definition"
      end
      # verify the required parameter 'case_def_id' is set
      if @api_client.config.client_side_validation && case_def_id.nil?
        fail ArgumentError, "Missing the required parameter 'case_def_id' when calling CaseInstancesCaseManagementApi.get_case_instances_by_definition"
      end
      if @api_client.config.client_side_validation && opts[:'status'] && !opts[:'status'].all?{|item| ['open', 'closed', 'cancelled'].include?(item)}
        fail ArgumentError, 'invalid value for "status", must include one of open, closed, cancelled'
      end
      # resource path
      local_var_path = "/server/containers/{id}/cases/{caseDefId}/instances".sub('{' + 'id' + '}', id.to_s).sub('{' + 'caseDefId' + '}', case_def_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'status'] = @api_client.build_collection_param(opts[:'status'], :multi) if !opts[:'status'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'pageSize'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'sortOrder'] = opts[:'sort_order'] if !opts[:'sort_order'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CaseInstanceList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CaseInstancesCaseManagementApi#get_case_instances_by_definition\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Puts new data (map of variables) into case instance's case file
    # 
    # @param id container id that case instance belongs to
    # @param case_id identifier of the case instance
    # @param body map of data to be placed in case file as Map
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :restricted_to optional role name(s) that given data should be restricted to
    # @return [nil]
    def put_case_instance_data(id, case_id, body, opts = {})
      put_case_instance_data_with_http_info(id, case_id, body, opts)
      return nil
    end

    # Puts new data (map of variables) into case instance&#39;s case file
    # 
    # @param id container id that case instance belongs to
    # @param case_id identifier of the case instance
    # @param body map of data to be placed in case file as Map
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :restricted_to optional role name(s) that given data should be restricted to
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def put_case_instance_data_with_http_info(id, case_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CaseInstancesCaseManagementApi.put_case_instance_data ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling CaseInstancesCaseManagementApi.put_case_instance_data"
      end
      # verify the required parameter 'case_id' is set
      if @api_client.config.client_side_validation && case_id.nil?
        fail ArgumentError, "Missing the required parameter 'case_id' when calling CaseInstancesCaseManagementApi.put_case_instance_data"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling CaseInstancesCaseManagementApi.put_case_instance_data"
      end
      # resource path
      local_var_path = "/server/containers/{id}/cases/instances/{caseId}/caseFile".sub('{' + 'id' + '}', id.to_s).sub('{' + 'caseId' + '}', case_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'restrictedTo'] = @api_client.build_collection_param(opts[:'restricted_to'], :multi) if !opts[:'restricted_to'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CaseInstancesCaseManagementApi#put_case_instance_data\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Puts new data (single data identified by name) into case instance's case file
    # 
    # @param id container id that case instance belongs to
    # @param case_id identifier of the case instance
    # @param data_id name of the data item to be added to case file
    # @param body data to be placed in case file, any type can be provided
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :restricted_to optional role name(s) that given data should be restricted to
    # @return [nil]
    def put_case_instance_data_by_name(id, case_id, data_id, body, opts = {})
      put_case_instance_data_by_name_with_http_info(id, case_id, data_id, body, opts)
      return nil
    end

    # Puts new data (single data identified by name) into case instance&#39;s case file
    # 
    # @param id container id that case instance belongs to
    # @param case_id identifier of the case instance
    # @param data_id name of the data item to be added to case file
    # @param body data to be placed in case file, any type can be provided
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :restricted_to optional role name(s) that given data should be restricted to
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def put_case_instance_data_by_name_with_http_info(id, case_id, data_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CaseInstancesCaseManagementApi.put_case_instance_data_by_name ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling CaseInstancesCaseManagementApi.put_case_instance_data_by_name"
      end
      # verify the required parameter 'case_id' is set
      if @api_client.config.client_side_validation && case_id.nil?
        fail ArgumentError, "Missing the required parameter 'case_id' when calling CaseInstancesCaseManagementApi.put_case_instance_data_by_name"
      end
      # verify the required parameter 'data_id' is set
      if @api_client.config.client_side_validation && data_id.nil?
        fail ArgumentError, "Missing the required parameter 'data_id' when calling CaseInstancesCaseManagementApi.put_case_instance_data_by_name"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling CaseInstancesCaseManagementApi.put_case_instance_data_by_name"
      end
      # resource path
      local_var_path = "/server/containers/{id}/cases/instances/{caseId}/caseFile/{dataId}".sub('{' + 'id' + '}', id.to_s).sub('{' + 'caseId' + '}', case_id.to_s).sub('{' + 'dataId' + '}', data_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'restrictedTo'] = @api_client.build_collection_param(opts[:'restricted_to'], :multi) if !opts[:'restricted_to'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CaseInstancesCaseManagementApi#put_case_instance_data_by_name\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Removes given comment from case instance
    # 
    # @param id container id that case instance belongs to
    # @param case_id identifier of the case instance
    # @param case_comment_id identifier of the comment to be removed
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def remove_comment(id, case_id, case_comment_id, opts = {})
      remove_comment_with_http_info(id, case_id, case_comment_id, opts)
      return nil
    end

    # Removes given comment from case instance
    # 
    # @param id container id that case instance belongs to
    # @param case_id identifier of the case instance
    # @param case_comment_id identifier of the comment to be removed
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def remove_comment_with_http_info(id, case_id, case_comment_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CaseInstancesCaseManagementApi.remove_comment ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling CaseInstancesCaseManagementApi.remove_comment"
      end
      # verify the required parameter 'case_id' is set
      if @api_client.config.client_side_validation && case_id.nil?
        fail ArgumentError, "Missing the required parameter 'case_id' when calling CaseInstancesCaseManagementApi.remove_comment"
      end
      # verify the required parameter 'case_comment_id' is set
      if @api_client.config.client_side_validation && case_comment_id.nil?
        fail ArgumentError, "Missing the required parameter 'case_comment_id' when calling CaseInstancesCaseManagementApi.remove_comment"
      end
      # resource path
      local_var_path = "/server/containers/{id}/cases/instances/{caseId}/comments/{caseCommentId}".sub('{' + 'id' + '}', id.to_s).sub('{' + 'caseId' + '}', case_id.to_s).sub('{' + 'caseCommentId' + '}', case_comment_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CaseInstancesCaseManagementApi#remove_comment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Removes role assignment from user or group for given case instance
    # 
    # @param id container id that case instance belongs to
    # @param case_id identifier of the case instance
    # @param case_role_name name of the case role the assignment should be removed
    # @param user user to be removed from case role for given case instance
    # @param group group to be removed from case role for given case instance
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def remove_role_assignment(id, case_id, case_role_name, user, group, opts = {})
      remove_role_assignment_with_http_info(id, case_id, case_role_name, user, group, opts)
      return nil
    end

    # Removes role assignment from user or group for given case instance
    # 
    # @param id container id that case instance belongs to
    # @param case_id identifier of the case instance
    # @param case_role_name name of the case role the assignment should be removed
    # @param user user to be removed from case role for given case instance
    # @param group group to be removed from case role for given case instance
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def remove_role_assignment_with_http_info(id, case_id, case_role_name, user, group, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CaseInstancesCaseManagementApi.remove_role_assignment ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling CaseInstancesCaseManagementApi.remove_role_assignment"
      end
      # verify the required parameter 'case_id' is set
      if @api_client.config.client_side_validation && case_id.nil?
        fail ArgumentError, "Missing the required parameter 'case_id' when calling CaseInstancesCaseManagementApi.remove_role_assignment"
      end
      # verify the required parameter 'case_role_name' is set
      if @api_client.config.client_side_validation && case_role_name.nil?
        fail ArgumentError, "Missing the required parameter 'case_role_name' when calling CaseInstancesCaseManagementApi.remove_role_assignment"
      end
      # verify the required parameter 'user' is set
      if @api_client.config.client_side_validation && user.nil?
        fail ArgumentError, "Missing the required parameter 'user' when calling CaseInstancesCaseManagementApi.remove_role_assignment"
      end
      # verify the required parameter 'group' is set
      if @api_client.config.client_side_validation && group.nil?
        fail ArgumentError, "Missing the required parameter 'group' when calling CaseInstancesCaseManagementApi.remove_role_assignment"
      end
      # resource path
      local_var_path = "/server/containers/{id}/cases/instances/{caseId}/roles/{caseRoleName}".sub('{' + 'id' + '}', id.to_s).sub('{' + 'caseId' + '}', case_id.to_s).sub('{' + 'caseRoleName' + '}', case_role_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'user'] = user
      query_params[:'group'] = group

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CaseInstancesCaseManagementApi#remove_role_assignment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Reopens case instance with given identifier (case id) by initiating given case definition
    # 
    # @param id container id where the case definition resides
    # @param case_def_id case definition id that new instance should be created from
    # @param case_id identifier of the case instance
    # @param [Hash] opts the optional parameters
    # @option opts [String] :body optional CaseFile with variables and/or case role assignments
    # @return [nil]
    def reopen_case(id, case_def_id, case_id, opts = {})
      reopen_case_with_http_info(id, case_def_id, case_id, opts)
      return nil
    end

    # Reopens case instance with given identifier (case id) by initiating given case definition
    # 
    # @param id container id where the case definition resides
    # @param case_def_id case definition id that new instance should be created from
    # @param case_id identifier of the case instance
    # @param [Hash] opts the optional parameters
    # @option opts [String] :body optional CaseFile with variables and/or case role assignments
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def reopen_case_with_http_info(id, case_def_id, case_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CaseInstancesCaseManagementApi.reopen_case ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling CaseInstancesCaseManagementApi.reopen_case"
      end
      # verify the required parameter 'case_def_id' is set
      if @api_client.config.client_side_validation && case_def_id.nil?
        fail ArgumentError, "Missing the required parameter 'case_def_id' when calling CaseInstancesCaseManagementApi.reopen_case"
      end
      # verify the required parameter 'case_id' is set
      if @api_client.config.client_side_validation && case_id.nil?
        fail ArgumentError, "Missing the required parameter 'case_id' when calling CaseInstancesCaseManagementApi.reopen_case"
      end
      # resource path
      local_var_path = "/server/containers/{id}/cases/{caseDefId}/instances/{caseId}".sub('{' + 'id' + '}', id.to_s).sub('{' + 'caseDefId' + '}', case_def_id.to_s).sub('{' + 'caseId' + '}', case_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CaseInstancesCaseManagementApi#reopen_case\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Starts new case instance of given case definition within given container with optional initial CaseFile (that provides variables and case role assignment)
    # 
    # @param id container id where the case definition resides
    # @param case_def_id case definition id that new instance should be created from
    # @param [Hash] opts the optional parameters
    # @option opts [String] :body optional CaseFile with variables and/or case role assignments
    # @return [String]
    def start_case(id, case_def_id, opts = {})
      data, _status_code, _headers = start_case_with_http_info(id, case_def_id, opts)
      return data
    end

    # Starts new case instance of given case definition within given container with optional initial CaseFile (that provides variables and case role assignment)
    # 
    # @param id container id where the case definition resides
    # @param case_def_id case definition id that new instance should be created from
    # @param [Hash] opts the optional parameters
    # @option opts [String] :body optional CaseFile with variables and/or case role assignments
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def start_case_with_http_info(id, case_def_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CaseInstancesCaseManagementApi.start_case ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling CaseInstancesCaseManagementApi.start_case"
      end
      # verify the required parameter 'case_def_id' is set
      if @api_client.config.client_side_validation && case_def_id.nil?
        fail ArgumentError, "Missing the required parameter 'case_def_id' when calling CaseInstancesCaseManagementApi.start_case"
      end
      # resource path
      local_var_path = "/server/containers/{id}/cases/{caseDefId}/instances".sub('{' + 'id' + '}', id.to_s).sub('{' + 'caseDefId' + '}', case_def_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CaseInstancesCaseManagementApi#start_case\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Triggers ad hoc fragment in case instance with optional data
    # 
    # @param id container id that case instance belongs to
    # @param case_id identifier of the case instance
    # @param node_name name of the adhoc fragment to be triggered
    # @param [Hash] opts the optional parameters
    # @option opts [String] :body optional data to be given when triggering adhoc fragment
    # @return [nil]
    def trigger_ad_hoc_node(id, case_id, node_name, opts = {})
      trigger_ad_hoc_node_with_http_info(id, case_id, node_name, opts)
      return nil
    end

    # Triggers ad hoc fragment in case instance with optional data
    # 
    # @param id container id that case instance belongs to
    # @param case_id identifier of the case instance
    # @param node_name name of the adhoc fragment to be triggered
    # @param [Hash] opts the optional parameters
    # @option opts [String] :body optional data to be given when triggering adhoc fragment
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def trigger_ad_hoc_node_with_http_info(id, case_id, node_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CaseInstancesCaseManagementApi.trigger_ad_hoc_node ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling CaseInstancesCaseManagementApi.trigger_ad_hoc_node"
      end
      # verify the required parameter 'case_id' is set
      if @api_client.config.client_side_validation && case_id.nil?
        fail ArgumentError, "Missing the required parameter 'case_id' when calling CaseInstancesCaseManagementApi.trigger_ad_hoc_node"
      end
      # verify the required parameter 'node_name' is set
      if @api_client.config.client_side_validation && node_name.nil?
        fail ArgumentError, "Missing the required parameter 'node_name' when calling CaseInstancesCaseManagementApi.trigger_ad_hoc_node"
      end
      # resource path
      local_var_path = "/server/containers/{id}/cases/instances/{caseId}/tasks/{nodeName}".sub('{' + 'id' + '}', id.to_s).sub('{' + 'caseId' + '}', case_id.to_s).sub('{' + 'nodeName' + '}', node_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CaseInstancesCaseManagementApi#trigger_ad_hoc_node\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Triggers ad hoc fragment in stage within case instance with optional data
    # 
    # @param id container id that case instance belongs to
    # @param case_id identifier of the case instance
    # @param case_stage_id identifier of the stage within case instance where adhoc fragment should be triggered
    # @param node_name name of the adhoc fragment to be triggered
    # @param [Hash] opts the optional parameters
    # @option opts [String] :body optional data to be given when triggering adhoc fragment
    # @return [nil]
    def trigger_ad_hoc_node_in_stage(id, case_id, case_stage_id, node_name, opts = {})
      trigger_ad_hoc_node_in_stage_with_http_info(id, case_id, case_stage_id, node_name, opts)
      return nil
    end

    # Triggers ad hoc fragment in stage within case instance with optional data
    # 
    # @param id container id that case instance belongs to
    # @param case_id identifier of the case instance
    # @param case_stage_id identifier of the stage within case instance where adhoc fragment should be triggered
    # @param node_name name of the adhoc fragment to be triggered
    # @param [Hash] opts the optional parameters
    # @option opts [String] :body optional data to be given when triggering adhoc fragment
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def trigger_ad_hoc_node_in_stage_with_http_info(id, case_id, case_stage_id, node_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CaseInstancesCaseManagementApi.trigger_ad_hoc_node_in_stage ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling CaseInstancesCaseManagementApi.trigger_ad_hoc_node_in_stage"
      end
      # verify the required parameter 'case_id' is set
      if @api_client.config.client_side_validation && case_id.nil?
        fail ArgumentError, "Missing the required parameter 'case_id' when calling CaseInstancesCaseManagementApi.trigger_ad_hoc_node_in_stage"
      end
      # verify the required parameter 'case_stage_id' is set
      if @api_client.config.client_side_validation && case_stage_id.nil?
        fail ArgumentError, "Missing the required parameter 'case_stage_id' when calling CaseInstancesCaseManagementApi.trigger_ad_hoc_node_in_stage"
      end
      # verify the required parameter 'node_name' is set
      if @api_client.config.client_side_validation && node_name.nil?
        fail ArgumentError, "Missing the required parameter 'node_name' when calling CaseInstancesCaseManagementApi.trigger_ad_hoc_node_in_stage"
      end
      # resource path
      local_var_path = "/server/containers/{id}/cases/instances/{caseId}/stages/{caseStageId}/tasks/{nodeName}".sub('{' + 'id' + '}', id.to_s).sub('{' + 'caseId' + '}', case_id.to_s).sub('{' + 'caseStageId' + '}', case_stage_id.to_s).sub('{' + 'nodeName' + '}', node_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CaseInstancesCaseManagementApi#trigger_ad_hoc_node_in_stage\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Updates comment within case instance
    # 
    # @param id container id that case instance belongs to
    # @param case_id identifier of the case instance
    # @param case_comment_id identifier of the comment to be updated
    # @param body actual content of the comment to be updated to as String
    # @param [Hash] opts the optional parameters
    # @option opts [String] :author optional user id to be used instead of authenticated user - only when bypass authenticated user is enabled
    # @option opts [Array<String>] :restricted_to optional role name(s) that given comment should be restricted to
    # @return [nil]
    def update_comment(id, case_id, case_comment_id, body, opts = {})
      update_comment_with_http_info(id, case_id, case_comment_id, body, opts)
      return nil
    end

    # Updates comment within case instance
    # 
    # @param id container id that case instance belongs to
    # @param case_id identifier of the case instance
    # @param case_comment_id identifier of the comment to be updated
    # @param body actual content of the comment to be updated to as String
    # @param [Hash] opts the optional parameters
    # @option opts [String] :author optional user id to be used instead of authenticated user - only when bypass authenticated user is enabled
    # @option opts [Array<String>] :restricted_to optional role name(s) that given comment should be restricted to
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def update_comment_with_http_info(id, case_id, case_comment_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CaseInstancesCaseManagementApi.update_comment ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling CaseInstancesCaseManagementApi.update_comment"
      end
      # verify the required parameter 'case_id' is set
      if @api_client.config.client_side_validation && case_id.nil?
        fail ArgumentError, "Missing the required parameter 'case_id' when calling CaseInstancesCaseManagementApi.update_comment"
      end
      # verify the required parameter 'case_comment_id' is set
      if @api_client.config.client_side_validation && case_comment_id.nil?
        fail ArgumentError, "Missing the required parameter 'case_comment_id' when calling CaseInstancesCaseManagementApi.update_comment"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling CaseInstancesCaseManagementApi.update_comment"
      end
      # resource path
      local_var_path = "/server/containers/{id}/cases/instances/{caseId}/comments/{caseCommentId}".sub('{' + 'id' + '}', id.to_s).sub('{' + 'caseId' + '}', case_id.to_s).sub('{' + 'caseCommentId' + '}', case_comment_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'author'] = opts[:'author'] if !opts[:'author'].nil?
      query_params[:'restrictedTo'] = @api_client.build_collection_param(opts[:'restricted_to'], :multi) if !opts[:'restricted_to'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CaseInstancesCaseManagementApi#update_comment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end

=begin
#jbpm

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 7.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1

=end

require "uri"

module JBPMAPIClient
  class QueriesProcessesNodesVariablesAndTasksBPMApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Retrieves tasks with applied pagination
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :user optional user id to be used instead of authenticated user - only when bypass authenticated user is enabled
    # @option opts [Integer] :page optional pagination - at which page to start, defaults to 0 (meaning first) (default to 0)
    # @option opts [Integer] :page_size optional pagination - size of the result, defaults to 10 (default to 10)
    # @option opts [String] :sort optional sort column, no default
    # @option opts [BOOLEAN] :sort_order optional sort direction (asc, desc) - defaults to asc (default to true)
    # @return [TaskSummaryList]
    def get_all_audit_task(opts = {})
      data, _status_code, _headers = get_all_audit_task_with_http_info(opts)
      return data
    end

    # Retrieves tasks with applied pagination
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :user optional user id to be used instead of authenticated user - only when bypass authenticated user is enabled
    # @option opts [Integer] :page optional pagination - at which page to start, defaults to 0 (meaning first)
    # @option opts [Integer] :page_size optional pagination - size of the result, defaults to 10
    # @option opts [String] :sort optional sort column, no default
    # @option opts [BOOLEAN] :sort_order optional sort direction (asc, desc) - defaults to asc
    # @return [Array<(TaskSummaryList, Fixnum, Hash)>] TaskSummaryList data, response status code and response headers
    def get_all_audit_task_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: QueriesProcessesNodesVariablesAndTasksBPMApi.get_all_audit_task ..."
      end
      # resource path
      local_var_path = "/server/queries/tasks/instances"

      # query parameters
      query_params = {}
      query_params[:'user'] = opts[:'user'] if !opts[:'user'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'pageSize'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'sortOrder'] = opts[:'sort_order'] if !opts[:'sort_order'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TaskSummaryList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QueriesProcessesNodesVariablesAndTasksBPMApi#get_all_audit_task\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves node instance for given process instance id and work item id
    # 
    # @param p_instance_id process instance id that work item belongs to
    # @param work_item_id work item id to retrieve node instance for
    # @param [Hash] opts the optional parameters
    # @return [NodeInstance]
    def get_node_instance_for_work_item(p_instance_id, work_item_id, opts = {})
      data, _status_code, _headers = get_node_instance_for_work_item_with_http_info(p_instance_id, work_item_id, opts)
      return data
    end

    # Retrieves node instance for given process instance id and work item id
    # 
    # @param p_instance_id process instance id that work item belongs to
    # @param work_item_id work item id to retrieve node instance for
    # @param [Hash] opts the optional parameters
    # @return [Array<(NodeInstance, Fixnum, Hash)>] NodeInstance data, response status code and response headers
    def get_node_instance_for_work_item_with_http_info(p_instance_id, work_item_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: QueriesProcessesNodesVariablesAndTasksBPMApi.get_node_instance_for_work_item ..."
      end
      # verify the required parameter 'p_instance_id' is set
      if @api_client.config.client_side_validation && p_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'p_instance_id' when calling QueriesProcessesNodesVariablesAndTasksBPMApi.get_node_instance_for_work_item"
      end
      # verify the required parameter 'work_item_id' is set
      if @api_client.config.client_side_validation && work_item_id.nil?
        fail ArgumentError, "Missing the required parameter 'work_item_id' when calling QueriesProcessesNodesVariablesAndTasksBPMApi.get_node_instance_for_work_item"
      end
      # resource path
      local_var_path = "/server/queries/processes/instances/{pInstanceId}/wi-nodes/instances/{workItemId}".sub('{' + 'pInstanceId' + '}', p_instance_id.to_s).sub('{' + 'workItemId' + '}', work_item_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'NodeInstance')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QueriesProcessesNodesVariablesAndTasksBPMApi#get_node_instance_for_work_item\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves process definitions that belong to given container
    # 
    # @param id container id to filter process definitions
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page optional pagination - at which page to start, defaults to 0 (meaning first) (default to 0)
    # @option opts [Integer] :page_size optional pagination - size of the result, defaults to 10 (default to 10)
    # @option opts [String] :sort optional sort column, no default
    # @option opts [BOOLEAN] :sort_order optional sort direction (asc, desc) - defaults to asc (default to true)
    # @return [ProcessDefinitions]
    def get_process_definitions_by_deployment_id(id, opts = {})
      data, _status_code, _headers = get_process_definitions_by_deployment_id_with_http_info(id, opts)
      return data
    end

    # Retrieves process definitions that belong to given container
    # 
    # @param id container id to filter process definitions
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page optional pagination - at which page to start, defaults to 0 (meaning first)
    # @option opts [Integer] :page_size optional pagination - size of the result, defaults to 10
    # @option opts [String] :sort optional sort column, no default
    # @option opts [BOOLEAN] :sort_order optional sort direction (asc, desc) - defaults to asc
    # @return [Array<(ProcessDefinitions, Fixnum, Hash)>] ProcessDefinitions data, response status code and response headers
    def get_process_definitions_by_deployment_id_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: QueriesProcessesNodesVariablesAndTasksBPMApi.get_process_definitions_by_deployment_id ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling QueriesProcessesNodesVariablesAndTasksBPMApi.get_process_definitions_by_deployment_id"
      end
      # resource path
      local_var_path = "/server/queries/containers/{id}/processes/definitions".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'pageSize'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'sortOrder'] = opts[:'sort_order'] if !opts[:'sort_order'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['jbpm_auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ProcessDefinitions')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QueriesProcessesNodesVariablesAndTasksBPMApi#get_process_definitions_by_deployment_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves process instance by exactly matched correlation key
    # 
    # @param correlation_key correlation key associated with process instance
    # @param [Hash] opts the optional parameters
    # @return [ProcessInstance]
    def get_process_instance_by_correlation_key(correlation_key, opts = {})
      data, _status_code, _headers = get_process_instance_by_correlation_key_with_http_info(correlation_key, opts)
      return data
    end

    # Retrieves process instance by exactly matched correlation key
    # 
    # @param correlation_key correlation key associated with process instance
    # @param [Hash] opts the optional parameters
    # @return [Array<(ProcessInstance, Fixnum, Hash)>] ProcessInstance data, response status code and response headers
    def get_process_instance_by_correlation_key_with_http_info(correlation_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: QueriesProcessesNodesVariablesAndTasksBPMApi.get_process_instance_by_correlation_key ..."
      end
      # verify the required parameter 'correlation_key' is set
      if @api_client.config.client_side_validation && correlation_key.nil?
        fail ArgumentError, "Missing the required parameter 'correlation_key' when calling QueriesProcessesNodesVariablesAndTasksBPMApi.get_process_instance_by_correlation_key"
      end
      # resource path
      local_var_path = "/server/queries/processes/instance/correlation/{correlationKey}".sub('{' + 'correlationKey' + '}', correlation_key.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ProcessInstance')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QueriesProcessesNodesVariablesAndTasksBPMApi#get_process_instance_by_correlation_key\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves process instance for given process instance id and optionally loads its variables
    # 
    # @param p_instance_id process instance id to retrieve process instance
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :with_vars load process instance variables or not, defaults to false
    # @return [ProcessInstance]
    def get_process_instance_by_id(p_instance_id, opts = {})
      data, _status_code, _headers = get_process_instance_by_id_with_http_info(p_instance_id, opts)
      return data
    end

    # Retrieves process instance for given process instance id and optionally loads its variables
    # 
    # @param p_instance_id process instance id to retrieve process instance
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :with_vars load process instance variables or not, defaults to false
    # @return [Array<(ProcessInstance, Fixnum, Hash)>] ProcessInstance data, response status code and response headers
    def get_process_instance_by_id_with_http_info(p_instance_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: QueriesProcessesNodesVariablesAndTasksBPMApi.get_process_instance_by_id ..."
      end
      # verify the required parameter 'p_instance_id' is set
      if @api_client.config.client_side_validation && p_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'p_instance_id' when calling QueriesProcessesNodesVariablesAndTasksBPMApi.get_process_instance_by_id"
      end
      # resource path
      local_var_path = "/server/queries/processes/instances/{pInstanceId}".sub('{' + 'pInstanceId' + '}', p_instance_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'withVars'] = opts[:'with_vars'] if !opts[:'with_vars'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ProcessInstance')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QueriesProcessesNodesVariablesAndTasksBPMApi#get_process_instance_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves process instances filtered by by variable or by variable and its value. Applies pagination by default and allows to specify sorting
    # 
    # @param var_name variable name to filter process instance
    # @param [Hash] opts the optional parameters
    # @option opts [String] :var_value variable value to filter process instance, optional when filtering by name only required when filtering by name and value
    # @option opts [Array<Integer>] :status optional process instance status (active, completed, aborted) - defaults ot active (1) only
    # @option opts [Integer] :page optional pagination - at which page to start, defaults to 0 (meaning first) (default to 0)
    # @option opts [Integer] :page_size optional pagination - size of the result, defaults to 10 (default to 10)
    # @option opts [String] :sort optional sort column, no default
    # @option opts [BOOLEAN] :sort_order optional sort direction (asc, desc) - defaults to asc (default to true)
    # @return [ProcessInstanceList]
    def get_process_instance_by_variables(var_name, opts = {})
      data, _status_code, _headers = get_process_instance_by_variables_with_http_info(var_name, opts)
      return data
    end

    # Retrieves process instances filtered by by variable or by variable and its value. Applies pagination by default and allows to specify sorting
    # 
    # @param var_name variable name to filter process instance
    # @param [Hash] opts the optional parameters
    # @option opts [String] :var_value variable value to filter process instance, optional when filtering by name only required when filtering by name and value
    # @option opts [Array<Integer>] :status optional process instance status (active, completed, aborted) - defaults ot active (1) only
    # @option opts [Integer] :page optional pagination - at which page to start, defaults to 0 (meaning first)
    # @option opts [Integer] :page_size optional pagination - size of the result, defaults to 10
    # @option opts [String] :sort optional sort column, no default
    # @option opts [BOOLEAN] :sort_order optional sort direction (asc, desc) - defaults to asc
    # @return [Array<(ProcessInstanceList, Fixnum, Hash)>] ProcessInstanceList data, response status code and response headers
    def get_process_instance_by_variables_with_http_info(var_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: QueriesProcessesNodesVariablesAndTasksBPMApi.get_process_instance_by_variables ..."
      end
      # verify the required parameter 'var_name' is set
      if @api_client.config.client_side_validation && var_name.nil?
        fail ArgumentError, "Missing the required parameter 'var_name' when calling QueriesProcessesNodesVariablesAndTasksBPMApi.get_process_instance_by_variables"
      end
      if @api_client.config.client_side_validation && opts[:'status'] && !opts[:'status'].all?{|item| ['1', '2', '3'].include?(item)}
        fail ArgumentError, 'invalid value for "status", must include one of 1, 2, 3'
      end
      # resource path
      local_var_path = "/server/queries/processes/instances/variables/{varName}".sub('{' + 'varName' + '}', var_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'varValue'] = opts[:'var_value'] if !opts[:'var_value'].nil?
      query_params[:'status'] = @api_client.build_collection_param(opts[:'status'], :multi) if !opts[:'status'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'pageSize'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'sortOrder'] = opts[:'sort_order'] if !opts[:'sort_order'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ProcessInstanceList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QueriesProcessesNodesVariablesAndTasksBPMApi#get_process_instance_by_variables\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves node instances for given process instance. Depending on provided query parameters (activeOnly or completedOnly) will return active and/or completes nodes
    # 
    # @param p_instance_id process instance id to to retrive history for
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :active_only include active nodes only
    # @option opts [BOOLEAN] :completed_only include completed nodes only
    # @option opts [Integer] :page optional pagination - at which page to start, defaults to 0 (meaning first) (default to 0)
    # @option opts [Integer] :page_size optional pagination - size of the result, defaults to 10 (default to 10)
    # @return [NodeInstanceList]
    def get_process_instance_history(p_instance_id, opts = {})
      data, _status_code, _headers = get_process_instance_history_with_http_info(p_instance_id, opts)
      return data
    end

    # Retrieves node instances for given process instance. Depending on provided query parameters (activeOnly or completedOnly) will return active and/or completes nodes
    # 
    # @param p_instance_id process instance id to to retrive history for
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :active_only include active nodes only
    # @option opts [BOOLEAN] :completed_only include completed nodes only
    # @option opts [Integer] :page optional pagination - at which page to start, defaults to 0 (meaning first)
    # @option opts [Integer] :page_size optional pagination - size of the result, defaults to 10
    # @return [Array<(NodeInstanceList, Fixnum, Hash)>] NodeInstanceList data, response status code and response headers
    def get_process_instance_history_with_http_info(p_instance_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: QueriesProcessesNodesVariablesAndTasksBPMApi.get_process_instance_history ..."
      end
      # verify the required parameter 'p_instance_id' is set
      if @api_client.config.client_side_validation && p_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'p_instance_id' when calling QueriesProcessesNodesVariablesAndTasksBPMApi.get_process_instance_history"
      end
      # resource path
      local_var_path = "/server/queries/processes/instances/{pInstanceId}/nodes/instances".sub('{' + 'pInstanceId' + '}', p_instance_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'activeOnly'] = opts[:'active_only'] if !opts[:'active_only'].nil?
      query_params[:'completedOnly'] = opts[:'completed_only'] if !opts[:'completed_only'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'pageSize'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'NodeInstanceList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QueriesProcessesNodesVariablesAndTasksBPMApi#get_process_instance_history\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves process instances filtered by status, initiator, processName - depending what query parameters are given. Applies pagination by default and allows to specify sorting
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Integer>] :status optional process instance status (active, completed, aborted) - defaults ot active (1) only
    # @option opts [String] :initiator optional process instance initiator - user who started process instance to filter process instances
    # @option opts [String] :process_name optional process name to filter process instances
    # @option opts [Integer] :page optional pagination - at which page to start, defaults to 0 (meaning first) (default to 0)
    # @option opts [Integer] :page_size optional pagination - size of the result, defaults to 10 (default to 10)
    # @option opts [String] :sort optional sort column, no default
    # @option opts [BOOLEAN] :sort_order optional sort direction (asc, desc) - defaults to asc (default to true)
    # @return [ProcessInstanceList]
    def get_process_instances(opts = {})
      data, _status_code, _headers = get_process_instances_with_http_info(opts)
      return data
    end

    # Retrieves process instances filtered by status, initiator, processName - depending what query parameters are given. Applies pagination by default and allows to specify sorting
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Integer>] :status optional process instance status (active, completed, aborted) - defaults ot active (1) only
    # @option opts [String] :initiator optional process instance initiator - user who started process instance to filter process instances
    # @option opts [String] :process_name optional process name to filter process instances
    # @option opts [Integer] :page optional pagination - at which page to start, defaults to 0 (meaning first)
    # @option opts [Integer] :page_size optional pagination - size of the result, defaults to 10
    # @option opts [String] :sort optional sort column, no default
    # @option opts [BOOLEAN] :sort_order optional sort direction (asc, desc) - defaults to asc
    # @return [Array<(ProcessInstanceList, Fixnum, Hash)>] ProcessInstanceList data, response status code and response headers
    def get_process_instances_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: QueriesProcessesNodesVariablesAndTasksBPMApi.get_process_instances ..."
      end
      if @api_client.config.client_side_validation && opts[:'status'] && !opts[:'status'].all?{|item| ['1', '2', '3'].include?(item)}
        fail ArgumentError, 'invalid value for "status", must include one of 1, 2, 3'
      end
      # resource path
      local_var_path = "/server/queries/processes/instances"

      # query parameters
      query_params = {}
      query_params[:'status'] = @api_client.build_collection_param(opts[:'status'], :multi) if !opts[:'status'].nil?
      query_params[:'initiator'] = opts[:'initiator'] if !opts[:'initiator'].nil?
      query_params[:'processName'] = opts[:'process_name'] if !opts[:'process_name'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'pageSize'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'sortOrder'] = opts[:'sort_order'] if !opts[:'sort_order'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ProcessInstanceList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QueriesProcessesNodesVariablesAndTasksBPMApi#get_process_instances\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves process instances filtered by correlation key, retrieves all process instances that match correlationkey*. Applies pagination by default and allows to specify sorting
    # 
    # @param correlation_key correlation key to filter process instance, can be given as partial correlation key like in starts with approach
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page optional pagination - at which page to start, defaults to 0 (meaning first) (default to 0)
    # @option opts [Integer] :page_size optional pagination - size of the result, defaults to 10 (default to 10)
    # @option opts [String] :sort optional sort column, no default
    # @option opts [BOOLEAN] :sort_order optional sort direction (asc, desc) - defaults to asc (default to true)
    # @return [ProcessInstanceList]
    def get_process_instances_by_correlation_key(correlation_key, opts = {})
      data, _status_code, _headers = get_process_instances_by_correlation_key_with_http_info(correlation_key, opts)
      return data
    end

    # Retrieves process instances filtered by correlation key, retrieves all process instances that match correlationkey*. Applies pagination by default and allows to specify sorting
    # 
    # @param correlation_key correlation key to filter process instance, can be given as partial correlation key like in starts with approach
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page optional pagination - at which page to start, defaults to 0 (meaning first)
    # @option opts [Integer] :page_size optional pagination - size of the result, defaults to 10
    # @option opts [String] :sort optional sort column, no default
    # @option opts [BOOLEAN] :sort_order optional sort direction (asc, desc) - defaults to asc
    # @return [Array<(ProcessInstanceList, Fixnum, Hash)>] ProcessInstanceList data, response status code and response headers
    def get_process_instances_by_correlation_key_with_http_info(correlation_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: QueriesProcessesNodesVariablesAndTasksBPMApi.get_process_instances_by_correlation_key ..."
      end
      # verify the required parameter 'correlation_key' is set
      if @api_client.config.client_side_validation && correlation_key.nil?
        fail ArgumentError, "Missing the required parameter 'correlation_key' when calling QueriesProcessesNodesVariablesAndTasksBPMApi.get_process_instances_by_correlation_key"
      end
      # resource path
      local_var_path = "/server/queries/processes/instances/correlation/{correlationKey}".sub('{' + 'correlationKey' + '}', correlation_key.to_s)

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'pageSize'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'sortOrder'] = opts[:'sort_order'] if !opts[:'sort_order'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ProcessInstanceList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QueriesProcessesNodesVariablesAndTasksBPMApi#get_process_instances_by_correlation_key\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves process instances filtered by container. Applies pagination by default and allows to specify sorting
    # 
    # @param id container id to filter process instance
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Integer>] :status optional process instance status (active, completed, aborted) - defaults ot active (1) only
    # @option opts [Integer] :page optional pagination - at which page to start, defaults to 0 (meaning first) (default to 0)
    # @option opts [Integer] :page_size optional pagination - size of the result, defaults to 10 (default to 10)
    # @option opts [String] :sort optional sort column, no default
    # @option opts [BOOLEAN] :sort_order optional sort direction (asc, desc) - defaults to asc (default to true)
    # @return [ProcessInstanceList]
    def get_process_instances_by_deployment_id(id, opts = {})
      data, _status_code, _headers = get_process_instances_by_deployment_id_with_http_info(id, opts)
      return data
    end

    # Retrieves process instances filtered by container. Applies pagination by default and allows to specify sorting
    # 
    # @param id container id to filter process instance
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Integer>] :status optional process instance status (active, completed, aborted) - defaults ot active (1) only
    # @option opts [Integer] :page optional pagination - at which page to start, defaults to 0 (meaning first)
    # @option opts [Integer] :page_size optional pagination - size of the result, defaults to 10
    # @option opts [String] :sort optional sort column, no default
    # @option opts [BOOLEAN] :sort_order optional sort direction (asc, desc) - defaults to asc
    # @return [Array<(ProcessInstanceList, Fixnum, Hash)>] ProcessInstanceList data, response status code and response headers
    def get_process_instances_by_deployment_id_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: QueriesProcessesNodesVariablesAndTasksBPMApi.get_process_instances_by_deployment_id ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling QueriesProcessesNodesVariablesAndTasksBPMApi.get_process_instances_by_deployment_id"
      end
      if @api_client.config.client_side_validation && opts[:'status'] && !opts[:'status'].all?{|item| ['1', '2', '3'].include?(item)}
        fail ArgumentError, 'invalid value for "status", must include one of 1, 2, 3'
      end
      # resource path
      local_var_path = "/server/queries/containers/{id}/process/instances".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'status'] = @api_client.build_collection_param(opts[:'status'], :multi) if !opts[:'status'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'pageSize'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'sortOrder'] = opts[:'sort_order'] if !opts[:'sort_order'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ProcessInstanceList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QueriesProcessesNodesVariablesAndTasksBPMApi#get_process_instances_by_deployment_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves process instances filtered by process id. Applies pagination by default and allows to specify sorting
    # 
    # @param p_id process id to filter process instance
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Integer>] :status optional process instance status (active, completed, aborted) - defaults ot active (1) only
    # @option opts [String] :initiator optinal process instance initiator - user who started process instance to filtr process instances
    # @option opts [Integer] :page optional pagination - at which page to start, defaults to 0 (meaning first) (default to 0)
    # @option opts [Integer] :page_size optional pagination - size of the result, defaults to 10 (default to 10)
    # @option opts [String] :sort optional sort column, no default
    # @option opts [BOOLEAN] :sort_order optional sort direction (asc, desc) - defaults to asc (default to true)
    # @return [ProcessInstanceList]
    def get_process_instances_by_process_id(p_id, opts = {})
      data, _status_code, _headers = get_process_instances_by_process_id_with_http_info(p_id, opts)
      return data
    end

    # Retrieves process instances filtered by process id. Applies pagination by default and allows to specify sorting
    # 
    # @param p_id process id to filter process instance
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Integer>] :status optional process instance status (active, completed, aborted) - defaults ot active (1) only
    # @option opts [String] :initiator optinal process instance initiator - user who started process instance to filtr process instances
    # @option opts [Integer] :page optional pagination - at which page to start, defaults to 0 (meaning first)
    # @option opts [Integer] :page_size optional pagination - size of the result, defaults to 10
    # @option opts [String] :sort optional sort column, no default
    # @option opts [BOOLEAN] :sort_order optional sort direction (asc, desc) - defaults to asc
    # @return [Array<(ProcessInstanceList, Fixnum, Hash)>] ProcessInstanceList data, response status code and response headers
    def get_process_instances_by_process_id_with_http_info(p_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: QueriesProcessesNodesVariablesAndTasksBPMApi.get_process_instances_by_process_id ..."
      end
      # verify the required parameter 'p_id' is set
      if @api_client.config.client_side_validation && p_id.nil?
        fail ArgumentError, "Missing the required parameter 'p_id' when calling QueriesProcessesNodesVariablesAndTasksBPMApi.get_process_instances_by_process_id"
      end
      if @api_client.config.client_side_validation && opts[:'status'] && !opts[:'status'].all?{|item| ['1', '2', '3'].include?(item)}
        fail ArgumentError, 'invalid value for "status", must include one of 1, 2, 3'
      end
      # resource path
      local_var_path = "/server/queries/processes/{pId}/instances".sub('{' + 'pId' + '}', p_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'status'] = @api_client.build_collection_param(opts[:'status'], :multi) if !opts[:'status'].nil?
      query_params[:'initiator'] = opts[:'initiator'] if !opts[:'initiator'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'pageSize'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'sortOrder'] = opts[:'sort_order'] if !opts[:'sort_order'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ProcessInstanceList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QueriesProcessesNodesVariablesAndTasksBPMApi#get_process_instances_by_process_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves process definition that belong to given container and has matching process id
    # 
    # @param id container id that process definition belongs to
    # @param p_id process id to load process definition
    # @param [Hash] opts the optional parameters
    # @return [ProcessDefinition]
    def get_processes_by_deployment_id_process_id(id, p_id, opts = {})
      data, _status_code, _headers = get_processes_by_deployment_id_process_id_with_http_info(id, p_id, opts)
      return data
    end

    # Retrieves process definition that belong to given container and has matching process id
    # 
    # @param id container id that process definition belongs to
    # @param p_id process id to load process definition
    # @param [Hash] opts the optional parameters
    # @return [Array<(ProcessDefinition, Fixnum, Hash)>] ProcessDefinition data, response status code and response headers
    def get_processes_by_deployment_id_process_id_with_http_info(id, p_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: QueriesProcessesNodesVariablesAndTasksBPMApi.get_processes_by_deployment_id_process_id ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling QueriesProcessesNodesVariablesAndTasksBPMApi.get_processes_by_deployment_id_process_id"
      end
      # verify the required parameter 'p_id' is set
      if @api_client.config.client_side_validation && p_id.nil?
        fail ArgumentError, "Missing the required parameter 'p_id' when calling QueriesProcessesNodesVariablesAndTasksBPMApi.get_processes_by_deployment_id_process_id"
      end
      # resource path
      local_var_path = "/server/queries/containers/{id}/processes/definitions/{pId}".sub('{' + 'id' + '}', id.to_s).sub('{' + 'pId' + '}', p_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['jbpm_auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ProcessDefinition')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QueriesProcessesNodesVariablesAndTasksBPMApi#get_processes_by_deployment_id_process_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves process definitions filtered by process id or name
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter process id or name to filter process definitions
    # @option opts [Integer] :page optional pagination - at which page to start, defaults to 0 (meaning first) (default to 0)
    # @option opts [Integer] :page_size optional pagination - size of the result, defaults to 10 (default to 10)
    # @option opts [String] :sort optional sort column, no default
    # @option opts [BOOLEAN] :sort_order optional sort direction (asc, desc) - defaults to asc (default to true)
    # @return [ProcessDefinitions]
    def get_processes_by_filter(opts = {})
      data, _status_code, _headers = get_processes_by_filter_with_http_info(opts)
      return data
    end

    # Retrieves process definitions filtered by process id or name
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter process id or name to filter process definitions
    # @option opts [Integer] :page optional pagination - at which page to start, defaults to 0 (meaning first)
    # @option opts [Integer] :page_size optional pagination - size of the result, defaults to 10
    # @option opts [String] :sort optional sort column, no default
    # @option opts [BOOLEAN] :sort_order optional sort direction (asc, desc) - defaults to asc
    # @return [Array<(ProcessDefinitions, Fixnum, Hash)>] ProcessDefinitions data, response status code and response headers
    def get_processes_by_filter_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: QueriesProcessesNodesVariablesAndTasksBPMApi.get_processes_by_filter ..."
      end
      # resource path
      local_var_path = "/server/queries/processes/definitions"

      # query parameters
      query_params = {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'pageSize'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'sortOrder'] = opts[:'sort_order'] if !opts[:'sort_order'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ProcessDefinitions')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QueriesProcessesNodesVariablesAndTasksBPMApi#get_processes_by_filter\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves process definitions filtered by process id
    # 
    # @param p_id process id to load process definition
    # @param [Hash] opts the optional parameters
    # @return [ProcessDefinitions]
    def get_processes_by_id(p_id, opts = {})
      data, _status_code, _headers = get_processes_by_id_with_http_info(p_id, opts)
      return data
    end

    # Retrieves process definitions filtered by process id
    # 
    # @param p_id process id to load process definition
    # @param [Hash] opts the optional parameters
    # @return [Array<(ProcessDefinitions, Fixnum, Hash)>] ProcessDefinitions data, response status code and response headers
    def get_processes_by_id_with_http_info(p_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: QueriesProcessesNodesVariablesAndTasksBPMApi.get_processes_by_id ..."
      end
      # verify the required parameter 'p_id' is set
      if @api_client.config.client_side_validation && p_id.nil?
        fail ArgumentError, "Missing the required parameter 'p_id' when calling QueriesProcessesNodesVariablesAndTasksBPMApi.get_processes_by_id"
      end
      # resource path
      local_var_path = "/server/queries/processes/definitions/{pId}".sub('{' + 'pId' + '}', p_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ProcessDefinitions')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QueriesProcessesNodesVariablesAndTasksBPMApi#get_processes_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves task by task id
    # 
    # @param t_instance_id task id to load task instance
    # @param [Hash] opts the optional parameters
    # @return [TaskInstance]
    def get_task_by_id(t_instance_id, opts = {})
      data, _status_code, _headers = get_task_by_id_with_http_info(t_instance_id, opts)
      return data
    end

    # Retrieves task by task id
    # 
    # @param t_instance_id task id to load task instance
    # @param [Hash] opts the optional parameters
    # @return [Array<(TaskInstance, Fixnum, Hash)>] TaskInstance data, response status code and response headers
    def get_task_by_id_with_http_info(t_instance_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: QueriesProcessesNodesVariablesAndTasksBPMApi.get_task_by_id ..."
      end
      # verify the required parameter 't_instance_id' is set
      if @api_client.config.client_side_validation && t_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 't_instance_id' when calling QueriesProcessesNodesVariablesAndTasksBPMApi.get_task_by_id"
      end
      # resource path
      local_var_path = "/server/queries/tasks/instances/{tInstanceId}".sub('{' + 'tInstanceId' + '}', t_instance_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['jbpm_auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TaskInstance')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QueriesProcessesNodesVariablesAndTasksBPMApi#get_task_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves task by associated work item id
    # 
    # @param work_item_id work item id to load task associated with
    # @param [Hash] opts the optional parameters
    # @return [TaskInstance]
    def get_task_by_work_item_id(work_item_id, opts = {})
      data, _status_code, _headers = get_task_by_work_item_id_with_http_info(work_item_id, opts)
      return data
    end

    # Retrieves task by associated work item id
    # 
    # @param work_item_id work item id to load task associated with
    # @param [Hash] opts the optional parameters
    # @return [Array<(TaskInstance, Fixnum, Hash)>] TaskInstance data, response status code and response headers
    def get_task_by_work_item_id_with_http_info(work_item_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: QueriesProcessesNodesVariablesAndTasksBPMApi.get_task_by_work_item_id ..."
      end
      # verify the required parameter 'work_item_id' is set
      if @api_client.config.client_side_validation && work_item_id.nil?
        fail ArgumentError, "Missing the required parameter 'work_item_id' when calling QueriesProcessesNodesVariablesAndTasksBPMApi.get_task_by_work_item_id"
      end
      # resource path
      local_var_path = "/server/queries/tasks/instances/workitem/{workItemId}".sub('{' + 'workItemId' + '}', work_item_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TaskInstance')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QueriesProcessesNodesVariablesAndTasksBPMApi#get_task_by_work_item_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves task events for given task id and applies pagination
    # 
    # @param t_instance_id task id to load task events for
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page optional pagination - at which page to start, defaults to 0 (meaning first) (default to 0)
    # @option opts [Integer] :page_size optional pagination - size of the result, defaults to 10 (default to 10)
    # @option opts [String] :sort optional sort column, no default
    # @option opts [BOOLEAN] :sort_order optional sort direction (asc, desc) - defaults to asc (default to true)
    # @return [TaskEventInstanceList]
    def get_task_events(t_instance_id, opts = {})
      data, _status_code, _headers = get_task_events_with_http_info(t_instance_id, opts)
      return data
    end

    # Retrieves task events for given task id and applies pagination
    # 
    # @param t_instance_id task id to load task events for
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page optional pagination - at which page to start, defaults to 0 (meaning first)
    # @option opts [Integer] :page_size optional pagination - size of the result, defaults to 10
    # @option opts [String] :sort optional sort column, no default
    # @option opts [BOOLEAN] :sort_order optional sort direction (asc, desc) - defaults to asc
    # @return [Array<(TaskEventInstanceList, Fixnum, Hash)>] TaskEventInstanceList data, response status code and response headers
    def get_task_events_with_http_info(t_instance_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: QueriesProcessesNodesVariablesAndTasksBPMApi.get_task_events ..."
      end
      # verify the required parameter 't_instance_id' is set
      if @api_client.config.client_side_validation && t_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 't_instance_id' when calling QueriesProcessesNodesVariablesAndTasksBPMApi.get_task_events"
      end
      # resource path
      local_var_path = "/server/queries/tasks/instances/{tInstanceId}/events".sub('{' + 'tInstanceId' + '}', t_instance_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'pageSize'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'sortOrder'] = opts[:'sort_order'] if !opts[:'sort_order'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TaskEventInstanceList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QueriesProcessesNodesVariablesAndTasksBPMApi#get_task_events\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves tasks assigned as business administrator, optionally filters by status and applies pagination
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :status optional task status (Created, Ready, Reserved, InProgress, Suspended, Completed, Failed, Error, Exited, Obsolete)
    # @option opts [String] :user optional user id to be used instead of authenticated user - only when bypass authenticated user is enabled
    # @option opts [Integer] :page optional pagination - at which page to start, defaults to 0 (meaning first) (default to 0)
    # @option opts [Integer] :page_size optional pagination - size of the result, defaults to 10 (default to 10)
    # @option opts [String] :sort optional sort column, no default
    # @option opts [BOOLEAN] :sort_order optional sort direction (asc, desc) - defaults to asc (default to true)
    # @return [TaskSummaryList]
    def get_tasks_assigned_as_business_administrator_by_status(opts = {})
      data, _status_code, _headers = get_tasks_assigned_as_business_administrator_by_status_with_http_info(opts)
      return data
    end

    # Retrieves tasks assigned as business administrator, optionally filters by status and applies pagination
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :status optional task status (Created, Ready, Reserved, InProgress, Suspended, Completed, Failed, Error, Exited, Obsolete)
    # @option opts [String] :user optional user id to be used instead of authenticated user - only when bypass authenticated user is enabled
    # @option opts [Integer] :page optional pagination - at which page to start, defaults to 0 (meaning first)
    # @option opts [Integer] :page_size optional pagination - size of the result, defaults to 10
    # @option opts [String] :sort optional sort column, no default
    # @option opts [BOOLEAN] :sort_order optional sort direction (asc, desc) - defaults to asc
    # @return [Array<(TaskSummaryList, Fixnum, Hash)>] TaskSummaryList data, response status code and response headers
    def get_tasks_assigned_as_business_administrator_by_status_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: QueriesProcessesNodesVariablesAndTasksBPMApi.get_tasks_assigned_as_business_administrator_by_status ..."
      end
      if @api_client.config.client_side_validation && opts[:'status'] && !opts[:'status'].all?{|item| ['Created', 'Ready', 'Reserved', 'InProgress', 'Suspended', 'Completed', 'Failed', 'Error', 'Exited', 'Obsolete'].include?(item)}
        fail ArgumentError, 'invalid value for "status", must include one of Created, Ready, Reserved, InProgress, Suspended, Completed, Failed, Error, Exited, Obsolete'
      end
      # resource path
      local_var_path = "/server/queries/tasks/instances/admins"

      # query parameters
      query_params = {}
      query_params[:'status'] = @api_client.build_collection_param(opts[:'status'], :multi) if !opts[:'status'].nil?
      query_params[:'user'] = opts[:'user'] if !opts[:'user'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'pageSize'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'sortOrder'] = opts[:'sort_order'] if !opts[:'sort_order'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TaskSummaryList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QueriesProcessesNodesVariablesAndTasksBPMApi#get_tasks_assigned_as_business_administrator_by_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves tasks assigned as potential owner, optionally filters by status and given groups and applies pagination
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :status optional task status (Created, Ready, Reserved, InProgress, Suspended, Completed, Failed, Error, Exited, Obsolete)
    # @option opts [Array<String>] :groups optional group names to include in the query
    # @option opts [String] :user optional user id to be used instead of authenticated user - only when bypass authenticated user is enabled
    # @option opts [Integer] :page optional pagination - at which page to start, defaults to 0 (meaning first) (default to 0)
    # @option opts [Integer] :page_size optional pagination - size of the result, defaults to 10 (default to 10)
    # @option opts [String] :sort optional sort column, no default
    # @option opts [BOOLEAN] :sort_order optional sort direction (asc, desc) - defaults to asc (default to true)
    # @option opts [String] :filter optional custom filter for task data
    # @return [TaskSummaryList]
    def get_tasks_assigned_as_potential_owner(opts = {})
      data, _status_code, _headers = get_tasks_assigned_as_potential_owner_with_http_info(opts)
      return data
    end

    # Retrieves tasks assigned as potential owner, optionally filters by status and given groups and applies pagination
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :status optional task status (Created, Ready, Reserved, InProgress, Suspended, Completed, Failed, Error, Exited, Obsolete)
    # @option opts [Array<String>] :groups optional group names to include in the query
    # @option opts [String] :user optional user id to be used instead of authenticated user - only when bypass authenticated user is enabled
    # @option opts [Integer] :page optional pagination - at which page to start, defaults to 0 (meaning first)
    # @option opts [Integer] :page_size optional pagination - size of the result, defaults to 10
    # @option opts [String] :sort optional sort column, no default
    # @option opts [BOOLEAN] :sort_order optional sort direction (asc, desc) - defaults to asc
    # @option opts [String] :filter optional custom filter for task data
    # @return [Array<(TaskSummaryList, Fixnum, Hash)>] TaskSummaryList data, response status code and response headers
    def get_tasks_assigned_as_potential_owner_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: QueriesProcessesNodesVariablesAndTasksBPMApi.get_tasks_assigned_as_potential_owner ..."
      end
      if @api_client.config.client_side_validation && opts[:'status'] && !opts[:'status'].all?{|item| ['Created', 'Ready', 'Reserved', 'InProgress', 'Suspended', 'Completed', 'Failed', 'Error', 'Exited', 'Obsolete'].include?(item)}
        fail ArgumentError, 'invalid value for "status", must include one of Created, Ready, Reserved, InProgress, Suspended, Completed, Failed, Error, Exited, Obsolete'
      end
      # resource path
      local_var_path = "/server/queries/tasks/instances/pot-owners"

      # query parameters
      query_params = {}
      query_params[:'status'] = @api_client.build_collection_param(opts[:'status'], :multi) if !opts[:'status'].nil?
      query_params[:'groups'] = @api_client.build_collection_param(opts[:'groups'], :multi) if !opts[:'groups'].nil?
      query_params[:'user'] = opts[:'user'] if !opts[:'user'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'pageSize'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'sortOrder'] = opts[:'sort_order'] if !opts[:'sort_order'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['jbpm_auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TaskSummaryList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QueriesProcessesNodesVariablesAndTasksBPMApi#get_tasks_assigned_as_potential_owner\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves tasks associated with given process instance, optionally filters by status and applies pagination
    # 
    # @param p_instance_id process instance id to filter task instances
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :status optional task status (Created, Ready, Reserved, InProgress, Suspended, Completed, Failed, Error, Exited, Obsolete)
    # @option opts [Integer] :page optional pagination - at which page to start, defaults to 0 (meaning first) (default to 0)
    # @option opts [Integer] :page_size optional pagination - size of the result, defaults to 10 (default to 10)
    # @option opts [String] :sort optional sort column, no default
    # @option opts [BOOLEAN] :sort_order optional sort direction (asc, desc) - defaults to asc (default to true)
    # @return [TaskSummaryList]
    def get_tasks_by_status_by_process_instance_id(p_instance_id, opts = {})
      data, _status_code, _headers = get_tasks_by_status_by_process_instance_id_with_http_info(p_instance_id, opts)
      return data
    end

    # Retrieves tasks associated with given process instance, optionally filters by status and applies pagination
    # 
    # @param p_instance_id process instance id to filter task instances
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :status optional task status (Created, Ready, Reserved, InProgress, Suspended, Completed, Failed, Error, Exited, Obsolete)
    # @option opts [Integer] :page optional pagination - at which page to start, defaults to 0 (meaning first)
    # @option opts [Integer] :page_size optional pagination - size of the result, defaults to 10
    # @option opts [String] :sort optional sort column, no default
    # @option opts [BOOLEAN] :sort_order optional sort direction (asc, desc) - defaults to asc
    # @return [Array<(TaskSummaryList, Fixnum, Hash)>] TaskSummaryList data, response status code and response headers
    def get_tasks_by_status_by_process_instance_id_with_http_info(p_instance_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: QueriesProcessesNodesVariablesAndTasksBPMApi.get_tasks_by_status_by_process_instance_id ..."
      end
      # verify the required parameter 'p_instance_id' is set
      if @api_client.config.client_side_validation && p_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'p_instance_id' when calling QueriesProcessesNodesVariablesAndTasksBPMApi.get_tasks_by_status_by_process_instance_id"
      end
      if @api_client.config.client_side_validation && opts[:'status'] && !opts[:'status'].all?{|item| ['Created', 'Ready', 'Reserved', 'InProgress', 'Suspended', 'Completed', 'Failed', 'Error', 'Exited', 'Obsolete'].include?(item)}
        fail ArgumentError, 'invalid value for "status", must include one of Created, Ready, Reserved, InProgress, Suspended, Completed, Failed, Error, Exited, Obsolete'
      end
      # resource path
      local_var_path = "/server/queries/tasks/instances/process/{pInstanceId}".sub('{' + 'pInstanceId' + '}', p_instance_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'status'] = @api_client.build_collection_param(opts[:'status'], :multi) if !opts[:'status'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'pageSize'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'sortOrder'] = opts[:'sort_order'] if !opts[:'sort_order'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['jbpm_auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TaskSummaryList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QueriesProcessesNodesVariablesAndTasksBPMApi#get_tasks_by_status_by_process_instance_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves tasks by variable name and optionally by variable value, optionally filters by status and applies pagination
    # 
    # @param var_name name of the variable used to fiter tasks
    # @param [Hash] opts the optional parameters
    # @option opts [String] :var_value value of the variable used to fiter tasks, optional when filtering only by name, required when filtering by both name and value
    # @option opts [Array<String>] :status optional task status (Created, Ready, Reserved, InProgress, Suspended, Completed, Failed, Error, Exited, Obsolete)
    # @option opts [String] :user optional user id to be used instead of authenticated user - only when bypass authenticated user is enabled
    # @option opts [Integer] :page optional pagination - at which page to start, defaults to 0 (meaning first) (default to 0)
    # @option opts [Integer] :page_size optional pagination - size of the result, defaults to 10 (default to 10)
    # @option opts [String] :sort optional sort column, no default
    # @option opts [BOOLEAN] :sort_order optional sort direction (asc, desc) - defaults to asc (default to true)
    # @return [TaskSummaryList]
    def get_tasks_by_variables(var_name, opts = {})
      data, _status_code, _headers = get_tasks_by_variables_with_http_info(var_name, opts)
      return data
    end

    # Retrieves tasks by variable name and optionally by variable value, optionally filters by status and applies pagination
    # 
    # @param var_name name of the variable used to fiter tasks
    # @param [Hash] opts the optional parameters
    # @option opts [String] :var_value value of the variable used to fiter tasks, optional when filtering only by name, required when filtering by both name and value
    # @option opts [Array<String>] :status optional task status (Created, Ready, Reserved, InProgress, Suspended, Completed, Failed, Error, Exited, Obsolete)
    # @option opts [String] :user optional user id to be used instead of authenticated user - only when bypass authenticated user is enabled
    # @option opts [Integer] :page optional pagination - at which page to start, defaults to 0 (meaning first)
    # @option opts [Integer] :page_size optional pagination - size of the result, defaults to 10
    # @option opts [String] :sort optional sort column, no default
    # @option opts [BOOLEAN] :sort_order optional sort direction (asc, desc) - defaults to asc
    # @return [Array<(TaskSummaryList, Fixnum, Hash)>] TaskSummaryList data, response status code and response headers
    def get_tasks_by_variables_with_http_info(var_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: QueriesProcessesNodesVariablesAndTasksBPMApi.get_tasks_by_variables ..."
      end
      # verify the required parameter 'var_name' is set
      if @api_client.config.client_side_validation && var_name.nil?
        fail ArgumentError, "Missing the required parameter 'var_name' when calling QueriesProcessesNodesVariablesAndTasksBPMApi.get_tasks_by_variables"
      end
      if @api_client.config.client_side_validation && opts[:'status'] && !opts[:'status'].all?{|item| ['Created', 'Ready', 'Reserved', 'InProgress', 'Suspended', 'Completed', 'Failed', 'Error', 'Exited', 'Obsolete'].include?(item)}
        fail ArgumentError, 'invalid value for "status", must include one of Created, Ready, Reserved, InProgress, Suspended, Completed, Failed, Error, Exited, Obsolete'
      end
      # resource path
      local_var_path = "/server/queries/tasks/instances/variables/{varName}".sub('{' + 'varName' + '}', var_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'varValue'] = opts[:'var_value'] if !opts[:'var_value'].nil?
      query_params[:'status'] = @api_client.build_collection_param(opts[:'status'], :multi) if !opts[:'status'].nil?
      query_params[:'user'] = opts[:'user'] if !opts[:'user'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'pageSize'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'sortOrder'] = opts[:'sort_order'] if !opts[:'sort_order'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TaskSummaryList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QueriesProcessesNodesVariablesAndTasksBPMApi#get_tasks_by_variables\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves tasks owned, optionally filters by status and applies pagination
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :status optional task status (Created, Ready, Reserved, InProgress, Suspended, Completed, Failed, Error, Exited, Obsolete)
    # @option opts [String] :user optional user id to be used instead of authenticated user - only when bypass authenticated user is enabled
    # @option opts [Integer] :page optional pagination - at which page to start, defaults to 0 (meaning first) (default to 0)
    # @option opts [Integer] :page_size optional pagination - size of the result, defaults to 10 (default to 10)
    # @option opts [String] :sort optional sort column, no default
    # @option opts [BOOLEAN] :sort_order optional sort direction (asc, desc) - defaults to asc (default to true)
    # @return [TaskSummaryList]
    def get_tasks_owned_by_status(opts = {})
      data, _status_code, _headers = get_tasks_owned_by_status_with_http_info(opts)
      return data
    end

    # Retrieves tasks owned, optionally filters by status and applies pagination
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :status optional task status (Created, Ready, Reserved, InProgress, Suspended, Completed, Failed, Error, Exited, Obsolete)
    # @option opts [String] :user optional user id to be used instead of authenticated user - only when bypass authenticated user is enabled
    # @option opts [Integer] :page optional pagination - at which page to start, defaults to 0 (meaning first)
    # @option opts [Integer] :page_size optional pagination - size of the result, defaults to 10
    # @option opts [String] :sort optional sort column, no default
    # @option opts [BOOLEAN] :sort_order optional sort direction (asc, desc) - defaults to asc
    # @return [Array<(TaskSummaryList, Fixnum, Hash)>] TaskSummaryList data, response status code and response headers
    def get_tasks_owned_by_status_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: QueriesProcessesNodesVariablesAndTasksBPMApi.get_tasks_owned_by_status ..."
      end
      if @api_client.config.client_side_validation && opts[:'status'] && !opts[:'status'].all?{|item| ['Created', 'Ready', 'Reserved', 'InProgress', 'Suspended', 'Completed', 'Failed', 'Error', 'Exited', 'Obsolete'].include?(item)}
        fail ArgumentError, 'invalid value for "status", must include one of Created, Ready, Reserved, InProgress, Suspended, Completed, Failed, Error, Exited, Obsolete'
      end
      # resource path
      local_var_path = "/server/queries/tasks/instances/owners"

      # query parameters
      query_params = {}
      query_params[:'status'] = @api_client.build_collection_param(opts[:'status'], :multi) if !opts[:'status'].nil?
      query_params[:'user'] = opts[:'user'] if !opts[:'user'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'pageSize'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'sortOrder'] = opts[:'sort_order'] if !opts[:'sort_order'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TaskSummaryList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QueriesProcessesNodesVariablesAndTasksBPMApi#get_tasks_owned_by_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves variable history (from audit logs) for given variable name that belongs to process instance
    # 
    # @param p_instance_id process instance id to load variable history for
    # @param var_name variable name that history should be loaded for
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page optional pagination - at which page to start, defaults to 0 (meaning first) (default to 0)
    # @option opts [Integer] :page_size optional pagination - size of the result, defaults to 10 (default to 10)
    # @return [VariableInstanceList]
    def get_variable_history_by_instance_id(p_instance_id, var_name, opts = {})
      data, _status_code, _headers = get_variable_history_by_instance_id_with_http_info(p_instance_id, var_name, opts)
      return data
    end

    # Retrieves variable history (from audit logs) for given variable name that belongs to process instance
    # 
    # @param p_instance_id process instance id to load variable history for
    # @param var_name variable name that history should be loaded for
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page optional pagination - at which page to start, defaults to 0 (meaning first)
    # @option opts [Integer] :page_size optional pagination - size of the result, defaults to 10
    # @return [Array<(VariableInstanceList, Fixnum, Hash)>] VariableInstanceList data, response status code and response headers
    def get_variable_history_by_instance_id_with_http_info(p_instance_id, var_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: QueriesProcessesNodesVariablesAndTasksBPMApi.get_variable_history_by_instance_id ..."
      end
      # verify the required parameter 'p_instance_id' is set
      if @api_client.config.client_side_validation && p_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'p_instance_id' when calling QueriesProcessesNodesVariablesAndTasksBPMApi.get_variable_history_by_instance_id"
      end
      # verify the required parameter 'var_name' is set
      if @api_client.config.client_side_validation && var_name.nil?
        fail ArgumentError, "Missing the required parameter 'var_name' when calling QueriesProcessesNodesVariablesAndTasksBPMApi.get_variable_history_by_instance_id"
      end
      # resource path
      local_var_path = "/server/queries/processes/instances/{pInstanceId}/variables/instances/{varName}".sub('{' + 'pInstanceId' + '}', p_instance_id.to_s).sub('{' + 'varName' + '}', var_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'pageSize'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'VariableInstanceList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QueriesProcessesNodesVariablesAndTasksBPMApi#get_variable_history_by_instance_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves variables last value (from audit logs) for given process instance
    # 
    # @param p_instance_id process instance id to load variables current state (latest value) for
    # @param [Hash] opts the optional parameters
    # @return [VariableInstanceList]
    def get_variables_current_state_by_instance_id(p_instance_id, opts = {})
      data, _status_code, _headers = get_variables_current_state_by_instance_id_with_http_info(p_instance_id, opts)
      return data
    end

    # Retrieves variables last value (from audit logs) for given process instance
    # 
    # @param p_instance_id process instance id to load variables current state (latest value) for
    # @param [Hash] opts the optional parameters
    # @return [Array<(VariableInstanceList, Fixnum, Hash)>] VariableInstanceList data, response status code and response headers
    def get_variables_current_state_by_instance_id_with_http_info(p_instance_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: QueriesProcessesNodesVariablesAndTasksBPMApi.get_variables_current_state_by_instance_id ..."
      end
      # verify the required parameter 'p_instance_id' is set
      if @api_client.config.client_side_validation && p_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'p_instance_id' when calling QueriesProcessesNodesVariablesAndTasksBPMApi.get_variables_current_state_by_instance_id"
      end
      # resource path
      local_var_path = "/server/queries/processes/instances/{pInstanceId}/variables/instances".sub('{' + 'pInstanceId' + '}', p_instance_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'VariableInstanceList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QueriesProcessesNodesVariablesAndTasksBPMApi#get_variables_current_state_by_instance_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end

=begin
#jbpm

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 7.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1

=end

require "uri"

module JBPMAPIClient
  class ProcessInstancesAdministrationBPMApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Acknowledges given execution errors
    # 
    # @param id container id that errors belong to
    # @param error_id list of error identifiers to be acknowledged
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def acknowledge_errors(id, error_id, opts = {})
      acknowledge_errors_with_http_info(id, error_id, opts)
      return nil
    end

    # Acknowledges given execution errors
    # 
    # @param id container id that errors belong to
    # @param error_id list of error identifiers to be acknowledged
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def acknowledge_errors_with_http_info(id, error_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ProcessInstancesAdministrationBPMApi.acknowledge_errors ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ProcessInstancesAdministrationBPMApi.acknowledge_errors"
      end
      # verify the required parameter 'error_id' is set
      if @api_client.config.client_side_validation && error_id.nil?
        fail ArgumentError, "Missing the required parameter 'error_id' when calling ProcessInstancesAdministrationBPMApi.acknowledge_errors"
      end
      # resource path
      local_var_path = "/server/admin/containers/{id}/processes/errors".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'errorId'] = @api_client.build_collection_param(error_id, :multi)

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProcessInstancesAdministrationBPMApi#acknowledge_errors\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Acknowledge execution error by given id
    # 
    # @param id container id that error belongs to
    # @param error_id identifier of error to be acknowledged
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def acknowledge_process_error(id, error_id, opts = {})
      acknowledge_process_error_with_http_info(id, error_id, opts)
      return nil
    end

    # Acknowledge execution error by given id
    # 
    # @param id container id that error belongs to
    # @param error_id identifier of error to be acknowledged
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def acknowledge_process_error_with_http_info(id, error_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ProcessInstancesAdministrationBPMApi.acknowledge_process_error ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ProcessInstancesAdministrationBPMApi.acknowledge_process_error"
      end
      # verify the required parameter 'error_id' is set
      if @api_client.config.client_side_validation && error_id.nil?
        fail ArgumentError, "Missing the required parameter 'error_id' when calling ProcessInstancesAdministrationBPMApi.acknowledge_process_error"
      end
      # resource path
      local_var_path = "/server/admin/containers/{id}/processes/errors/{errorId}".sub('{' + 'id' + '}', id.to_s).sub('{' + 'errorId' + '}', error_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProcessInstancesAdministrationBPMApi#acknowledge_process_error\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Cancels given node instance within process instance and container
    # 
    # @param id container id that process instance belongs to
    # @param p_instance_id identifier of process instance that node instance belongs to
    # @param node_instance_id identifier of node instance that should be canceled
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def cancel_node_instance(id, p_instance_id, node_instance_id, opts = {})
      cancel_node_instance_with_http_info(id, p_instance_id, node_instance_id, opts)
      return nil
    end

    # Cancels given node instance within process instance and container
    # 
    # @param id container id that process instance belongs to
    # @param p_instance_id identifier of process instance that node instance belongs to
    # @param node_instance_id identifier of node instance that should be canceled
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def cancel_node_instance_with_http_info(id, p_instance_id, node_instance_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ProcessInstancesAdministrationBPMApi.cancel_node_instance ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ProcessInstancesAdministrationBPMApi.cancel_node_instance"
      end
      # verify the required parameter 'p_instance_id' is set
      if @api_client.config.client_side_validation && p_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'p_instance_id' when calling ProcessInstancesAdministrationBPMApi.cancel_node_instance"
      end
      # verify the required parameter 'node_instance_id' is set
      if @api_client.config.client_side_validation && node_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'node_instance_id' when calling ProcessInstancesAdministrationBPMApi.cancel_node_instance"
      end
      # resource path
      local_var_path = "/server/admin/containers/{id}/processes/instances/{pInstanceId}/nodeinstances/{nodeInstanceId}".sub('{' + 'id' + '}', id.to_s).sub('{' + 'pInstanceId' + '}', p_instance_id.to_s).sub('{' + 'nodeInstanceId' + '}', node_instance_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProcessInstancesAdministrationBPMApi#cancel_node_instance\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves all active node instances from process instance and container
    # 
    # @param id container id that process instance belongs to
    # @param p_instance_id identifier of process instance that active nodes instances should be collected for
    # @param [Hash] opts the optional parameters
    # @return [NodeInstanceList]
    def get_active_node_instances(id, p_instance_id, opts = {})
      data, _status_code, _headers = get_active_node_instances_with_http_info(id, p_instance_id, opts)
      return data
    end

    # Retrieves all active node instances from process instance and container
    # 
    # @param id container id that process instance belongs to
    # @param p_instance_id identifier of process instance that active nodes instances should be collected for
    # @param [Hash] opts the optional parameters
    # @return [Array<(NodeInstanceList, Fixnum, Hash)>] NodeInstanceList data, response status code and response headers
    def get_active_node_instances_with_http_info(id, p_instance_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ProcessInstancesAdministrationBPMApi.get_active_node_instances ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ProcessInstancesAdministrationBPMApi.get_active_node_instances"
      end
      # verify the required parameter 'p_instance_id' is set
      if @api_client.config.client_side_validation && p_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'p_instance_id' when calling ProcessInstancesAdministrationBPMApi.get_active_node_instances"
      end
      # resource path
      local_var_path = "/server/admin/containers/{id}/processes/instances/{pInstanceId}/nodeinstances".sub('{' + 'id' + '}', id.to_s).sub('{' + 'pInstanceId' + '}', p_instance_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'NodeInstanceList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProcessInstancesAdministrationBPMApi#get_active_node_instances\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves execution errors for container, applies pagination
    # 
    # @param id container id that errors belong to
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :include_ack optional flag that indicates if acknowledged errors should also be collected, defaults to false (default to false)
    # @option opts [Integer] :page optional pagination - at which page to start, defaults to 0 (meaning first) (default to 0)
    # @option opts [Integer] :page_size optional pagination - size of the result, defaults to 10 (default to 10)
    # @option opts [String] :sort optional sort column, no default
    # @option opts [BOOLEAN] :sort_order optional sort direction (asc, desc) - defaults to asc (default to true)
    # @return [NodeInstanceList]
    def get_execution_errors(id, opts = {})
      data, _status_code, _headers = get_execution_errors_with_http_info(id, opts)
      return data
    end

    # Retrieves execution errors for container, applies pagination
    # 
    # @param id container id that errors belong to
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :include_ack optional flag that indicates if acknowledged errors should also be collected, defaults to false
    # @option opts [Integer] :page optional pagination - at which page to start, defaults to 0 (meaning first)
    # @option opts [Integer] :page_size optional pagination - size of the result, defaults to 10
    # @option opts [String] :sort optional sort column, no default
    # @option opts [BOOLEAN] :sort_order optional sort direction (asc, desc) - defaults to asc
    # @return [Array<(NodeInstanceList, Fixnum, Hash)>] NodeInstanceList data, response status code and response headers
    def get_execution_errors_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ProcessInstancesAdministrationBPMApi.get_execution_errors ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ProcessInstancesAdministrationBPMApi.get_execution_errors"
      end
      # resource path
      local_var_path = "/server/admin/containers/{id}/processes/errors".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'includeAck'] = opts[:'include_ack'] if !opts[:'include_ack'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'pageSize'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'sortOrder'] = opts[:'sort_order'] if !opts[:'sort_order'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'NodeInstanceList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProcessInstancesAdministrationBPMApi#get_execution_errors\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves execution errors for process instance and container, applies pagination
    # 
    # @param id container id that process instance belongs to
    # @param p_instance_id identifier of process instance that errors should be collected for
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :include_ack optional flag that indicates if acknowledged errors should also be collected, defaults to false (default to false)
    # @option opts [String] :node optional name of the node in the process instance to filter by
    # @option opts [Integer] :page optional pagination - at which page to start, defaults to 0 (meaning first) (default to 0)
    # @option opts [Integer] :page_size optional pagination - size of the result, defaults to 10 (default to 10)
    # @option opts [String] :sort optional sort column, no default
    # @option opts [BOOLEAN] :sort_order optional sort direction (asc, desc) - defaults to asc (default to true)
    # @return [ExecutionErrorList]
    def get_execution_errors_by_process_instance(id, p_instance_id, opts = {})
      data, _status_code, _headers = get_execution_errors_by_process_instance_with_http_info(id, p_instance_id, opts)
      return data
    end

    # Retrieves execution errors for process instance and container, applies pagination
    # 
    # @param id container id that process instance belongs to
    # @param p_instance_id identifier of process instance that errors should be collected for
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :include_ack optional flag that indicates if acknowledged errors should also be collected, defaults to false
    # @option opts [String] :node optional name of the node in the process instance to filter by
    # @option opts [Integer] :page optional pagination - at which page to start, defaults to 0 (meaning first)
    # @option opts [Integer] :page_size optional pagination - size of the result, defaults to 10
    # @option opts [String] :sort optional sort column, no default
    # @option opts [BOOLEAN] :sort_order optional sort direction (asc, desc) - defaults to asc
    # @return [Array<(ExecutionErrorList, Fixnum, Hash)>] ExecutionErrorList data, response status code and response headers
    def get_execution_errors_by_process_instance_with_http_info(id, p_instance_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ProcessInstancesAdministrationBPMApi.get_execution_errors_by_process_instance ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ProcessInstancesAdministrationBPMApi.get_execution_errors_by_process_instance"
      end
      # verify the required parameter 'p_instance_id' is set
      if @api_client.config.client_side_validation && p_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'p_instance_id' when calling ProcessInstancesAdministrationBPMApi.get_execution_errors_by_process_instance"
      end
      # resource path
      local_var_path = "/server/admin/containers/{id}/processes/instances/{pInstanceId}/errors".sub('{' + 'id' + '}', id.to_s).sub('{' + 'pInstanceId' + '}', p_instance_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'includeAck'] = opts[:'include_ack'] if !opts[:'include_ack'].nil?
      query_params[:'node'] = opts[:'node'] if !opts[:'node'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'pageSize'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'sortOrder'] = opts[:'sort_order'] if !opts[:'sort_order'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ExecutionErrorList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProcessInstancesAdministrationBPMApi#get_execution_errors_by_process_instance\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves all nodes from process instance and container
    # 
    # @param id container id that process instance belongs to
    # @param p_instance_id identifier of process instance that process nodes should be collected from
    # @param [Hash] opts the optional parameters
    # @return [ProcessNodeList]
    def get_nodes(id, p_instance_id, opts = {})
      data, _status_code, _headers = get_nodes_with_http_info(id, p_instance_id, opts)
      return data
    end

    # Retrieves all nodes from process instance and container
    # 
    # @param id container id that process instance belongs to
    # @param p_instance_id identifier of process instance that process nodes should be collected from
    # @param [Hash] opts the optional parameters
    # @return [Array<(ProcessNodeList, Fixnum, Hash)>] ProcessNodeList data, response status code and response headers
    def get_nodes_with_http_info(id, p_instance_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ProcessInstancesAdministrationBPMApi.get_nodes ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ProcessInstancesAdministrationBPMApi.get_nodes"
      end
      # verify the required parameter 'p_instance_id' is set
      if @api_client.config.client_side_validation && p_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'p_instance_id' when calling ProcessInstancesAdministrationBPMApi.get_nodes"
      end
      # resource path
      local_var_path = "/server/admin/containers/{id}/processes/instances/{pInstanceId}/nodes".sub('{' + 'id' + '}', id.to_s).sub('{' + 'pInstanceId' + '}', p_instance_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ProcessNodeList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProcessInstancesAdministrationBPMApi#get_nodes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve execution error by its identifier
    # 
    # @param id container id that process error belongs to
    # @param error_id identifier of error to be loaded
    # @param [Hash] opts the optional parameters
    # @return [ExecutionError]
    def get_process_error_by_id(id, error_id, opts = {})
      data, _status_code, _headers = get_process_error_by_id_with_http_info(id, error_id, opts)
      return data
    end

    # Retrieve execution error by its identifier
    # 
    # @param id container id that process error belongs to
    # @param error_id identifier of error to be loaded
    # @param [Hash] opts the optional parameters
    # @return [Array<(ExecutionError, Fixnum, Hash)>] ExecutionError data, response status code and response headers
    def get_process_error_by_id_with_http_info(id, error_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ProcessInstancesAdministrationBPMApi.get_process_error_by_id ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ProcessInstancesAdministrationBPMApi.get_process_error_by_id"
      end
      # verify the required parameter 'error_id' is set
      if @api_client.config.client_side_validation && error_id.nil?
        fail ArgumentError, "Missing the required parameter 'error_id' when calling ProcessInstancesAdministrationBPMApi.get_process_error_by_id"
      end
      # resource path
      local_var_path = "/server/admin/containers/{id}/processes/errors/{errorId}".sub('{' + 'id' + '}', id.to_s).sub('{' + 'errorId' + '}', error_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ExecutionError')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProcessInstancesAdministrationBPMApi#get_process_error_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves all active timer instance from process instance and container
    # 
    # @param id container id that process instance belongs to
    # @param p_instance_id identifier of process instance that timer instances should be collected for
    # @param [Hash] opts the optional parameters
    # @return [TimerInstanceList]
    def get_timer_instances(id, p_instance_id, opts = {})
      data, _status_code, _headers = get_timer_instances_with_http_info(id, p_instance_id, opts)
      return data
    end

    # Retrieves all active timer instance from process instance and container
    # 
    # @param id container id that process instance belongs to
    # @param p_instance_id identifier of process instance that timer instances should be collected for
    # @param [Hash] opts the optional parameters
    # @return [Array<(TimerInstanceList, Fixnum, Hash)>] TimerInstanceList data, response status code and response headers
    def get_timer_instances_with_http_info(id, p_instance_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ProcessInstancesAdministrationBPMApi.get_timer_instances ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ProcessInstancesAdministrationBPMApi.get_timer_instances"
      end
      # verify the required parameter 'p_instance_id' is set
      if @api_client.config.client_side_validation && p_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'p_instance_id' when calling ProcessInstancesAdministrationBPMApi.get_timer_instances"
      end
      # resource path
      local_var_path = "/server/admin/containers/{id}/processes/instances/{pInstanceId}/timers".sub('{' + 'id' + '}', id.to_s).sub('{' + 'pInstanceId' + '}', p_instance_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TimerInstanceList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProcessInstancesAdministrationBPMApi#get_timer_instances\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Migrates process instance to new container and process definition with optional node mapping
    # 
    # @param id container id that process instance belongs to
    # @param p_instance_id identifier of process instance to be migrated
    # @param target_container_id container id that new process definition belongs to
    # @param target_process_id process definition that process instance should be migrated to
    # @param [Hash] opts the optional parameters
    # @option opts [String] :body node mapping - unique ids of old definition to new definition given as Map
    # @return [MigrationReportInstance]
    def migrate_process_instance(id, p_instance_id, target_container_id, target_process_id, opts = {})
      data, _status_code, _headers = migrate_process_instance_with_http_info(id, p_instance_id, target_container_id, target_process_id, opts)
      return data
    end

    # Migrates process instance to new container and process definition with optional node mapping
    # 
    # @param id container id that process instance belongs to
    # @param p_instance_id identifier of process instance to be migrated
    # @param target_container_id container id that new process definition belongs to
    # @param target_process_id process definition that process instance should be migrated to
    # @param [Hash] opts the optional parameters
    # @option opts [String] :body node mapping - unique ids of old definition to new definition given as Map
    # @return [Array<(MigrationReportInstance, Fixnum, Hash)>] MigrationReportInstance data, response status code and response headers
    def migrate_process_instance_with_http_info(id, p_instance_id, target_container_id, target_process_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ProcessInstancesAdministrationBPMApi.migrate_process_instance ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ProcessInstancesAdministrationBPMApi.migrate_process_instance"
      end
      # verify the required parameter 'p_instance_id' is set
      if @api_client.config.client_side_validation && p_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'p_instance_id' when calling ProcessInstancesAdministrationBPMApi.migrate_process_instance"
      end
      # verify the required parameter 'target_container_id' is set
      if @api_client.config.client_side_validation && target_container_id.nil?
        fail ArgumentError, "Missing the required parameter 'target_container_id' when calling ProcessInstancesAdministrationBPMApi.migrate_process_instance"
      end
      # verify the required parameter 'target_process_id' is set
      if @api_client.config.client_side_validation && target_process_id.nil?
        fail ArgumentError, "Missing the required parameter 'target_process_id' when calling ProcessInstancesAdministrationBPMApi.migrate_process_instance"
      end
      # resource path
      local_var_path = "/server/admin/containers/{id}/processes/instances/{pInstanceId}".sub('{' + 'id' + '}', id.to_s).sub('{' + 'pInstanceId' + '}', p_instance_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'targetContainerId'] = target_container_id
      query_params[:'targetProcessId'] = target_process_id

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'MigrationReportInstance')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProcessInstancesAdministrationBPMApi#migrate_process_instance\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Migrates process instances to new container and process definition with optional node mapping
    # 
    # @param id container id that process instances belongs to
    # @param p_instance_id list of identifiers of process instance to be migrated
    # @param target_container_id container id that new process definition belongs to
    # @param target_process_id process definition that process instances should be migrated to
    # @param [Hash] opts the optional parameters
    # @option opts [String] :body node mapping - unique ids of old definition to new definition given as Map
    # @return [MigrationReportInstanceList]
    def migrate_process_instances(id, p_instance_id, target_container_id, target_process_id, opts = {})
      data, _status_code, _headers = migrate_process_instances_with_http_info(id, p_instance_id, target_container_id, target_process_id, opts)
      return data
    end

    # Migrates process instances to new container and process definition with optional node mapping
    # 
    # @param id container id that process instances belongs to
    # @param p_instance_id list of identifiers of process instance to be migrated
    # @param target_container_id container id that new process definition belongs to
    # @param target_process_id process definition that process instances should be migrated to
    # @param [Hash] opts the optional parameters
    # @option opts [String] :body node mapping - unique ids of old definition to new definition given as Map
    # @return [Array<(MigrationReportInstanceList, Fixnum, Hash)>] MigrationReportInstanceList data, response status code and response headers
    def migrate_process_instances_with_http_info(id, p_instance_id, target_container_id, target_process_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ProcessInstancesAdministrationBPMApi.migrate_process_instances ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ProcessInstancesAdministrationBPMApi.migrate_process_instances"
      end
      # verify the required parameter 'p_instance_id' is set
      if @api_client.config.client_side_validation && p_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'p_instance_id' when calling ProcessInstancesAdministrationBPMApi.migrate_process_instances"
      end
      # verify the required parameter 'target_container_id' is set
      if @api_client.config.client_side_validation && target_container_id.nil?
        fail ArgumentError, "Missing the required parameter 'target_container_id' when calling ProcessInstancesAdministrationBPMApi.migrate_process_instances"
      end
      # verify the required parameter 'target_process_id' is set
      if @api_client.config.client_side_validation && target_process_id.nil?
        fail ArgumentError, "Missing the required parameter 'target_process_id' when calling ProcessInstancesAdministrationBPMApi.migrate_process_instances"
      end
      # resource path
      local_var_path = "/server/admin/containers/{id}/processes/instances".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'pInstanceId'] = @api_client.build_collection_param(p_instance_id, :multi)
      query_params[:'targetContainerId'] = target_container_id
      query_params[:'targetProcessId'] = target_process_id

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'MigrationReportInstanceList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProcessInstancesAdministrationBPMApi#migrate_process_instances\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retriggers given node instance within process instance and container
    # 
    # @param id container id that process instance belongs to
    # @param p_instance_id identifier of process instance that node instance belongs to
    # @param node_instance_id identifier of node instance that should be retriggered
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def retrigger_node_instance(id, p_instance_id, node_instance_id, opts = {})
      retrigger_node_instance_with_http_info(id, p_instance_id, node_instance_id, opts)
      return nil
    end

    # Retriggers given node instance within process instance and container
    # 
    # @param id container id that process instance belongs to
    # @param p_instance_id identifier of process instance that node instance belongs to
    # @param node_instance_id identifier of node instance that should be retriggered
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def retrigger_node_instance_with_http_info(id, p_instance_id, node_instance_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ProcessInstancesAdministrationBPMApi.retrigger_node_instance ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ProcessInstancesAdministrationBPMApi.retrigger_node_instance"
      end
      # verify the required parameter 'p_instance_id' is set
      if @api_client.config.client_side_validation && p_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'p_instance_id' when calling ProcessInstancesAdministrationBPMApi.retrigger_node_instance"
      end
      # verify the required parameter 'node_instance_id' is set
      if @api_client.config.client_side_validation && node_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'node_instance_id' when calling ProcessInstancesAdministrationBPMApi.retrigger_node_instance"
      end
      # resource path
      local_var_path = "/server/admin/containers/{id}/processes/instances/{pInstanceId}/nodeinstances/{nodeInstanceId}".sub('{' + 'id' + '}', id.to_s).sub('{' + 'pInstanceId' + '}', p_instance_id.to_s).sub('{' + 'nodeInstanceId' + '}', node_instance_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProcessInstancesAdministrationBPMApi#retrigger_node_instance\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Triggers node within process instance and container
    # 
    # @param id container id that process instance belongs to
    # @param p_instance_id identifier of process instance where node should be triggered
    # @param node_id identifier of the node to be triggered
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def trigger_node(id, p_instance_id, node_id, opts = {})
      trigger_node_with_http_info(id, p_instance_id, node_id, opts)
      return nil
    end

    # Triggers node within process instance and container
    # 
    # @param id container id that process instance belongs to
    # @param p_instance_id identifier of process instance where node should be triggered
    # @param node_id identifier of the node to be triggered
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def trigger_node_with_http_info(id, p_instance_id, node_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ProcessInstancesAdministrationBPMApi.trigger_node ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ProcessInstancesAdministrationBPMApi.trigger_node"
      end
      # verify the required parameter 'p_instance_id' is set
      if @api_client.config.client_side_validation && p_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'p_instance_id' when calling ProcessInstancesAdministrationBPMApi.trigger_node"
      end
      # verify the required parameter 'node_id' is set
      if @api_client.config.client_side_validation && node_id.nil?
        fail ArgumentError, "Missing the required parameter 'node_id' when calling ProcessInstancesAdministrationBPMApi.trigger_node"
      end
      # resource path
      local_var_path = "/server/admin/containers/{id}/processes/instances/{pInstanceId}/nodes/{nodeId}".sub('{' + 'id' + '}', id.to_s).sub('{' + 'pInstanceId' + '}', p_instance_id.to_s).sub('{' + 'nodeId' + '}', node_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProcessInstancesAdministrationBPMApi#trigger_node\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Updates timer instance within process instance and container
    # 
    # @param id container id that process instance belongs to
    # @param p_instance_id identifier of process instance that timer belongs to
    # @param timer_id identifier of timer instance to be updated
    # @param body Map of timer expressions - deplay, perios and repeat are allowed values in the map
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :relative optional flag that indicates if the time expression is relative to the current date or not, defaults to true (default to true)
    # @return [nil]
    def update_timer(id, p_instance_id, timer_id, body, opts = {})
      update_timer_with_http_info(id, p_instance_id, timer_id, body, opts)
      return nil
    end

    # Updates timer instance within process instance and container
    # 
    # @param id container id that process instance belongs to
    # @param p_instance_id identifier of process instance that timer belongs to
    # @param timer_id identifier of timer instance to be updated
    # @param body Map of timer expressions - deplay, perios and repeat are allowed values in the map
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :relative optional flag that indicates if the time expression is relative to the current date or not, defaults to true
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def update_timer_with_http_info(id, p_instance_id, timer_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ProcessInstancesAdministrationBPMApi.update_timer ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ProcessInstancesAdministrationBPMApi.update_timer"
      end
      # verify the required parameter 'p_instance_id' is set
      if @api_client.config.client_side_validation && p_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'p_instance_id' when calling ProcessInstancesAdministrationBPMApi.update_timer"
      end
      # verify the required parameter 'timer_id' is set
      if @api_client.config.client_side_validation && timer_id.nil?
        fail ArgumentError, "Missing the required parameter 'timer_id' when calling ProcessInstancesAdministrationBPMApi.update_timer"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ProcessInstancesAdministrationBPMApi.update_timer"
      end
      # resource path
      local_var_path = "/server/admin/containers/{id}/processes/instances/{pInstanceId}/timers/{timerId}".sub('{' + 'id' + '}', id.to_s).sub('{' + 'pInstanceId' + '}', p_instance_id.to_s).sub('{' + 'timerId' + '}', timer_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'relative'] = opts[:'relative'] if !opts[:'relative'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProcessInstancesAdministrationBPMApi#update_timer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end

=begin
#jbpm

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 7.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1

=end

require "uri"

module JBPMAPIClient
  class ProcessAndTaskDefinitionsBPMApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Retrieves actors and groups that are involved in given process and container
    # 
    # @param id container id where the process definition resides
    # @param p_id process id that the involved actors and groups should be retrieved from
    # @param [Hash] opts the optional parameters
    # @return [ProcessAssociatedEntities]
    def get_associated_entities(id, p_id, opts = {})
      data, _status_code, _headers = get_associated_entities_with_http_info(id, p_id, opts)
      return data
    end

    # Retrieves actors and groups that are involved in given process and container
    # 
    # @param id container id where the process definition resides
    # @param p_id process id that the involved actors and groups should be retrieved from
    # @param [Hash] opts the optional parameters
    # @return [Array<(ProcessAssociatedEntities, Fixnum, Hash)>] ProcessAssociatedEntities data, response status code and response headers
    def get_associated_entities_with_http_info(id, p_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ProcessAndTaskDefinitionsBPMApi.get_associated_entities ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ProcessAndTaskDefinitionsBPMApi.get_associated_entities"
      end
      # verify the required parameter 'p_id' is set
      if @api_client.config.client_side_validation && p_id.nil?
        fail ArgumentError, "Missing the required parameter 'p_id' when calling ProcessAndTaskDefinitionsBPMApi.get_associated_entities"
      end
      # resource path
      local_var_path = "/server/containers/{id}/processes/definitions/{pId}/entities".sub('{' + 'id' + '}', id.to_s).sub('{' + 'pId' + '}', p_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ProcessAssociatedEntities')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProcessAndTaskDefinitionsBPMApi#get_associated_entities\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves process definition identified by given process id within given container
    # 
    # @param id container id where the process definition resides
    # @param p_id process id that the definition should be retrieved for
    # @param [Hash] opts the optional parameters
    # @return [ProcessDefinition]
    def get_process_definition(id, p_id, opts = {})
      data, _status_code, _headers = get_process_definition_with_http_info(id, p_id, opts)
      return data
    end

    # Retrieves process definition identified by given process id within given container
    # 
    # @param id container id where the process definition resides
    # @param p_id process id that the definition should be retrieved for
    # @param [Hash] opts the optional parameters
    # @return [Array<(ProcessDefinition, Fixnum, Hash)>] ProcessDefinition data, response status code and response headers
    def get_process_definition_with_http_info(id, p_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ProcessAndTaskDefinitionsBPMApi.get_process_definition ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ProcessAndTaskDefinitionsBPMApi.get_process_definition"
      end
      # verify the required parameter 'p_id' is set
      if @api_client.config.client_side_validation && p_id.nil?
        fail ArgumentError, "Missing the required parameter 'p_id' when calling ProcessAndTaskDefinitionsBPMApi.get_process_definition"
      end
      # resource path
      local_var_path = "/server/containers/{id}/processes/definitions/{pId}".sub('{' + 'id' + '}', id.to_s).sub('{' + 'pId' + '}', p_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ProcessDefinition')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProcessAndTaskDefinitionsBPMApi#get_process_definition\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves process variables definitions that are present in given process and container
    # 
    # @param id container id where the process definition resides
    # @param p_id process id that the variable definitions should be retrieved from
    # @param [Hash] opts the optional parameters
    # @return [ProcessVariables]
    def get_process_variables(id, p_id, opts = {})
      data, _status_code, _headers = get_process_variables_with_http_info(id, p_id, opts)
      return data
    end

    # Retrieves process variables definitions that are present in given process and container
    # 
    # @param id container id where the process definition resides
    # @param p_id process id that the variable definitions should be retrieved from
    # @param [Hash] opts the optional parameters
    # @return [Array<(ProcessVariables, Fixnum, Hash)>] ProcessVariables data, response status code and response headers
    def get_process_variables_with_http_info(id, p_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ProcessAndTaskDefinitionsBPMApi.get_process_variables ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ProcessAndTaskDefinitionsBPMApi.get_process_variables"
      end
      # verify the required parameter 'p_id' is set
      if @api_client.config.client_side_validation && p_id.nil?
        fail ArgumentError, "Missing the required parameter 'p_id' when calling ProcessAndTaskDefinitionsBPMApi.get_process_variables"
      end
      # resource path
      local_var_path = "/server/containers/{id}/processes/definitions/{pId}/variables".sub('{' + 'id' + '}', id.to_s).sub('{' + 'pId' + '}', p_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ProcessVariables')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProcessAndTaskDefinitionsBPMApi#get_process_variables\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves sub process definitions that are defined in given process within given container
    # 
    # @param id container id where the process definition resides
    # @param p_id process id that subprocesses should be retrieved from
    # @param [Hash] opts the optional parameters
    # @return [ProcessSubprocesses]
    def get_reusable_sub_processes(id, p_id, opts = {})
      data, _status_code, _headers = get_reusable_sub_processes_with_http_info(id, p_id, opts)
      return data
    end

    # Retrieves sub process definitions that are defined in given process within given container
    # 
    # @param id container id where the process definition resides
    # @param p_id process id that subprocesses should be retrieved from
    # @param [Hash] opts the optional parameters
    # @return [Array<(ProcessSubprocesses, Fixnum, Hash)>] ProcessSubprocesses data, response status code and response headers
    def get_reusable_sub_processes_with_http_info(id, p_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ProcessAndTaskDefinitionsBPMApi.get_reusable_sub_processes ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ProcessAndTaskDefinitionsBPMApi.get_reusable_sub_processes"
      end
      # verify the required parameter 'p_id' is set
      if @api_client.config.client_side_validation && p_id.nil?
        fail ArgumentError, "Missing the required parameter 'p_id' when calling ProcessAndTaskDefinitionsBPMApi.get_reusable_sub_processes"
      end
      # resource path
      local_var_path = "/server/containers/{id}/processes/definitions/{pId}/subprocesses".sub('{' + 'id' + '}', id.to_s).sub('{' + 'pId' + '}', p_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ProcessSubprocesses')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProcessAndTaskDefinitionsBPMApi#get_reusable_sub_processes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves service tasks definitions that are present in given process and container
    # 
    # @param id container id where the process definition resides
    # @param p_id process id that the service task definitions should be retrieved from
    # @param [Hash] opts the optional parameters
    # @return [ProcessServiceTasks]
    def get_service_tasks(id, p_id, opts = {})
      data, _status_code, _headers = get_service_tasks_with_http_info(id, p_id, opts)
      return data
    end

    # Retrieves service tasks definitions that are present in given process and container
    # 
    # @param id container id where the process definition resides
    # @param p_id process id that the service task definitions should be retrieved from
    # @param [Hash] opts the optional parameters
    # @return [Array<(ProcessServiceTasks, Fixnum, Hash)>] ProcessServiceTasks data, response status code and response headers
    def get_service_tasks_with_http_info(id, p_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ProcessAndTaskDefinitionsBPMApi.get_service_tasks ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ProcessAndTaskDefinitionsBPMApi.get_service_tasks"
      end
      # verify the required parameter 'p_id' is set
      if @api_client.config.client_side_validation && p_id.nil?
        fail ArgumentError, "Missing the required parameter 'p_id' when calling ProcessAndTaskDefinitionsBPMApi.get_service_tasks"
      end
      # resource path
      local_var_path = "/server/containers/{id}/processes/definitions/{pId}/tasks/service".sub('{' + 'id' + '}', id.to_s).sub('{' + 'pId' + '}', p_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ProcessServiceTasks')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProcessAndTaskDefinitionsBPMApi#get_service_tasks\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves input variables defined on a given user task
    # 
    # @param id container id where the process definition resides
    # @param p_id process id that given task belongs to
    # @param task_name task name that input variable definitions should be retrieved for
    # @param [Hash] opts the optional parameters
    # @return [ProcessTaskInputs]
    def get_task_input_mappings(id, p_id, task_name, opts = {})
      data, _status_code, _headers = get_task_input_mappings_with_http_info(id, p_id, task_name, opts)
      return data
    end

    # Retrieves input variables defined on a given user task
    # 
    # @param id container id where the process definition resides
    # @param p_id process id that given task belongs to
    # @param task_name task name that input variable definitions should be retrieved for
    # @param [Hash] opts the optional parameters
    # @return [Array<(ProcessTaskInputs, Fixnum, Hash)>] ProcessTaskInputs data, response status code and response headers
    def get_task_input_mappings_with_http_info(id, p_id, task_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ProcessAndTaskDefinitionsBPMApi.get_task_input_mappings ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ProcessAndTaskDefinitionsBPMApi.get_task_input_mappings"
      end
      # verify the required parameter 'p_id' is set
      if @api_client.config.client_side_validation && p_id.nil?
        fail ArgumentError, "Missing the required parameter 'p_id' when calling ProcessAndTaskDefinitionsBPMApi.get_task_input_mappings"
      end
      # verify the required parameter 'task_name' is set
      if @api_client.config.client_side_validation && task_name.nil?
        fail ArgumentError, "Missing the required parameter 'task_name' when calling ProcessAndTaskDefinitionsBPMApi.get_task_input_mappings"
      end
      # resource path
      local_var_path = "/server/containers/{id}/processes/definitions/{pId}/tasks/users/{taskName}/inputs".sub('{' + 'id' + '}', id.to_s).sub('{' + 'pId' + '}', p_id.to_s).sub('{' + 'taskName' + '}', task_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ProcessTaskInputs')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProcessAndTaskDefinitionsBPMApi#get_task_input_mappings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves output variables defined on a given user task
    # 
    # @param id container id where the process definition resides
    # @param p_id process id that given task belongs to
    # @param task_name task name that output variable definitions should be retrieved for
    # @param [Hash] opts the optional parameters
    # @return [ProcessTaskOutputs]
    def get_task_output_mappings(id, p_id, task_name, opts = {})
      data, _status_code, _headers = get_task_output_mappings_with_http_info(id, p_id, task_name, opts)
      return data
    end

    # Retrieves output variables defined on a given user task
    # 
    # @param id container id where the process definition resides
    # @param p_id process id that given task belongs to
    # @param task_name task name that output variable definitions should be retrieved for
    # @param [Hash] opts the optional parameters
    # @return [Array<(ProcessTaskOutputs, Fixnum, Hash)>] ProcessTaskOutputs data, response status code and response headers
    def get_task_output_mappings_with_http_info(id, p_id, task_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ProcessAndTaskDefinitionsBPMApi.get_task_output_mappings ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ProcessAndTaskDefinitionsBPMApi.get_task_output_mappings"
      end
      # verify the required parameter 'p_id' is set
      if @api_client.config.client_side_validation && p_id.nil?
        fail ArgumentError, "Missing the required parameter 'p_id' when calling ProcessAndTaskDefinitionsBPMApi.get_task_output_mappings"
      end
      # verify the required parameter 'task_name' is set
      if @api_client.config.client_side_validation && task_name.nil?
        fail ArgumentError, "Missing the required parameter 'task_name' when calling ProcessAndTaskDefinitionsBPMApi.get_task_output_mappings"
      end
      # resource path
      local_var_path = "/server/containers/{id}/processes/definitions/{pId}/tasks/users/{taskName}/outputs".sub('{' + 'id' + '}', id.to_s).sub('{' + 'pId' + '}', p_id.to_s).sub('{' + 'taskName' + '}', task_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ProcessTaskOutputs')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProcessAndTaskDefinitionsBPMApi#get_task_output_mappings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves user tasks definitions that are present in given process and container
    # 
    # @param id container id where the process definition resides
    # @param p_id process id that the user task definitions should be retrieved from
    # @param [Hash] opts the optional parameters
    # @return [UserTaskDefinitions]
    def get_tasks_definitions(id, p_id, opts = {})
      data, _status_code, _headers = get_tasks_definitions_with_http_info(id, p_id, opts)
      return data
    end

    # Retrieves user tasks definitions that are present in given process and container
    # 
    # @param id container id where the process definition resides
    # @param p_id process id that the user task definitions should be retrieved from
    # @param [Hash] opts the optional parameters
    # @return [Array<(UserTaskDefinitions, Fixnum, Hash)>] UserTaskDefinitions data, response status code and response headers
    def get_tasks_definitions_with_http_info(id, p_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ProcessAndTaskDefinitionsBPMApi.get_tasks_definitions ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ProcessAndTaskDefinitionsBPMApi.get_tasks_definitions"
      end
      # verify the required parameter 'p_id' is set
      if @api_client.config.client_side_validation && p_id.nil?
        fail ArgumentError, "Missing the required parameter 'p_id' when calling ProcessAndTaskDefinitionsBPMApi.get_tasks_definitions"
      end
      # resource path
      local_var_path = "/server/containers/{id}/processes/definitions/{pId}/tasks/users".sub('{' + 'id' + '}', id.to_s).sub('{' + 'pId' + '}', p_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'UserTaskDefinitions')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProcessAndTaskDefinitionsBPMApi#get_tasks_definitions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end

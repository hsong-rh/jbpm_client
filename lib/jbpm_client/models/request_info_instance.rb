=begin
#jbpm

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 7.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1

=end

require 'date'

module JBPMAPIClient

  class RequestInfoInstance
    attr_accessor :request_instance_id

    attr_accessor :request_status

    attr_accessor :request_business_key

    attr_accessor :request_message

    attr_accessor :request_retries

    attr_accessor :request_executions

    attr_accessor :request_command

    attr_accessor :request_scheduled_date

    attr_accessor :request_data

    attr_accessor :response_data

    attr_accessor :request_errors

    attr_accessor :request_container_id


    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'request_instance_id' => :'request-instance-id',
        :'request_status' => :'request-status',
        :'request_business_key' => :'request-business-key',
        :'request_message' => :'request-message',
        :'request_retries' => :'request-retries',
        :'request_executions' => :'request-executions',
        :'request_command' => :'request-command',
        :'request_scheduled_date' => :'request-scheduled-date',
        :'request_data' => :'request-data',
        :'response_data' => :'response-data',
        :'request_errors' => :'request-errors',
        :'request_container_id' => :'request-container-id'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'request_instance_id' => :'Integer',
        :'request_status' => :'String',
        :'request_business_key' => :'String',
        :'request_message' => :'String',
        :'request_retries' => :'Integer',
        :'request_executions' => :'Integer',
        :'request_command' => :'String',
        :'request_scheduled_date' => :'DateTime',
        :'request_data' => :'Hash<String, Object>',
        :'response_data' => :'Hash<String, Object>',
        :'request_errors' => :'ErrorInfoInstanceList',
        :'request_container_id' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      if attributes.has_key?(:'request-instance-id')
        self.request_instance_id = attributes[:'request-instance-id']
      end

      if attributes.has_key?(:'request-status')
        self.request_status = attributes[:'request-status']
      end

      if attributes.has_key?(:'request-business-key')
        self.request_business_key = attributes[:'request-business-key']
      end

      if attributes.has_key?(:'request-message')
        self.request_message = attributes[:'request-message']
      end

      if attributes.has_key?(:'request-retries')
        self.request_retries = attributes[:'request-retries']
      end

      if attributes.has_key?(:'request-executions')
        self.request_executions = attributes[:'request-executions']
      end

      if attributes.has_key?(:'request-command')
        self.request_command = attributes[:'request-command']
      end

      if attributes.has_key?(:'request-scheduled-date')
        self.request_scheduled_date = attributes[:'request-scheduled-date']
      end

      if attributes.has_key?(:'request-data')
        if (value = attributes[:'request-data']).is_a?(Hash)
          self.request_data = value
        end
      end

      if attributes.has_key?(:'response-data')
        if (value = attributes[:'response-data']).is_a?(Hash)
          self.response_data = value
        end
      end

      if attributes.has_key?(:'request-errors')
        self.request_errors = attributes[:'request-errors']
      end

      if attributes.has_key?(:'request-container-id')
        self.request_container_id = attributes[:'request-container-id']
      end

    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          request_instance_id == o.request_instance_id &&
          request_status == o.request_status &&
          request_business_key == o.request_business_key &&
          request_message == o.request_message &&
          request_retries == o.request_retries &&
          request_executions == o.request_executions &&
          request_command == o.request_command &&
          request_scheduled_date == o.request_scheduled_date &&
          request_data == o.request_data &&
          response_data == o.response_data &&
          request_errors == o.request_errors &&
          request_container_id == o.request_container_id
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [request_instance_id, request_status, request_business_key, request_message, request_retries, request_executions, request_command, request_scheduled_date, request_data, response_data, request_errors, request_container_id].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = JBPMAPIClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end

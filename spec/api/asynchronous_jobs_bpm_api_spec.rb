=begin
#jbpm

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 7.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1

=end

require 'spec_helper'
require 'json'

# Unit tests for JBPMAPIClient::AsynchronousJobsBPMApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'AsynchronousJobsBPMApi' do
  before do
    # run before each test
    @instance = JBPMAPIClient::AsynchronousJobsBPMApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of AsynchronousJobsBPMApi' do
    it 'should create an instance of AsynchronousJobsBPMApi' do
      expect(@instance).to be_instance_of(JBPMAPIClient::AsynchronousJobsBPMApi)
    end
  end

  # unit tests for cancel_request
  # Cancels active asynchronous job identified by given jobId
  # 
  # @param job_id identifier of the asynchronous job to be canceled
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'cancel_request test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_request_by_id
  # Retrieves asynchronous job by given jobId
  # 
  # @param job_id identifier of the asynchronous job to be retrieved
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :with_errors optional flag that indicats if errors should be loaded as well
  # @option opts [BOOLEAN] :with_data optional flag that indicats if input/output data should be loaded as well
  # @return [RequestInfoInstance]
  describe 'get_request_by_id test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_requests_by_business_key
  # Retrieves asynchronous jobs by business key
  # 
  # @param key identifier of the business key that asynchornous jobs should be found for
  # @param [Hash] opts the optional parameters
  # @option opts [Array<String>] :status optional job status (QUEUED, DONE, CANCELLED, ERROR, RETRYING, RUNNING)
  # @option opts [Integer] :page optional pagination - at which page to start, defaults to 0 (meaning first)
  # @option opts [Integer] :page_size optional pagination - size of the result, defaults to 10
  # @return [RequestInfoInstanceList]
  describe 'get_requests_by_business_key test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_requests_by_command
  # Retrieves asynchronous jobs by command
  # 
  # @param cmd name of the command that asynchornous jobs should be found for
  # @param [Hash] opts the optional parameters
  # @option opts [Array<String>] :status optional job status (QUEUED, DONE, CANCELLED, ERROR, RETRYING, RUNNING)
  # @option opts [Integer] :page optional pagination - at which page to start, defaults to 0 (meaning first)
  # @option opts [Integer] :page_size optional pagination - size of the result, defaults to 10
  # @return [RequestInfoInstanceList]
  describe 'get_requests_by_command test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_requests_by_container
  # Retrieves asynchronous jobs by container
  # 
  # @param id identifier of the container that asynchornous jobs should be found for
  # @param [Hash] opts the optional parameters
  # @option opts [Array<String>] :status optional job status (QUEUED, DONE, CANCELLED, ERROR, RETRYING, RUNNING)
  # @option opts [Integer] :page optional pagination - at which page to start, defaults to 0 (meaning first)
  # @option opts [Integer] :page_size optional pagination - size of the result, defaults to 10
  # @return [RequestInfoInstanceList]
  describe 'get_requests_by_container test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_requests_by_process_instance
  # Retrieves asynchronous jobs by process instance id
  # 
  # @param p_instance_id identifier of the process instance that asynchornous jobs should be found for
  # @param [Hash] opts the optional parameters
  # @option opts [Array<String>] :status optional job status (QUEUED, DONE, CANCELLED, ERROR, RETRYING, RUNNING)
  # @option opts [Integer] :page optional pagination - at which page to start, defaults to 0 (meaning first)
  # @option opts [Integer] :page_size optional pagination - size of the result, defaults to 10
  # @return [RequestInfoInstanceList]
  describe 'get_requests_by_process_instance test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_requests_by_status
  # Retrieves asynchronous jobs filtered by status
  # 
  # @param status optional job status (QUEUED, DONE, CANCELLED, ERROR, RETRYING, RUNNING)
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page optional pagination - at which page to start, defaults to 0 (meaning first)
  # @option opts [Integer] :page_size optional pagination - size of the result, defaults to 10
  # @return [RequestInfoInstanceList]
  describe 'get_requests_by_status test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for requeue_request
  # Requeues failed asynchronous job identified by given jobId
  # 
  # @param job_id identifier of the asynchronous job to be requeued
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'requeue_request test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for schedule_request
  # Schedules new asynchronous job based on given body
  # 
  # @param body asynchronous job definition represented as JobRequestInstance
  # @param [Hash] opts the optional parameters
  # @option opts [String] :container_id optional container id that the job should be associated with
  # @return [Integer]
  describe 'schedule_request test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_request_data
  # Updates active asynchronous job&#39;s data (identified by given jobId)
  # 
  # @param job_id identifier of the asynchronous job to be updated
  # @param body data to be updated on the asynchronous job represented as Map
  # @param [Hash] opts the optional parameters
  # @option opts [String] :container_id optional container id that the job should be associated with
  # @return [nil]
  describe 'update_request_data test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
